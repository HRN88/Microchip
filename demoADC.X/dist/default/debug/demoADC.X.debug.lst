

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Tue Jul 10 19:23:15 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21  0000                     
    22                           ; Version 1.42
    23                           ; Generated 13/04/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F4550 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     
    57                           	psect	smallconst
    58  000800                     __psmallconst:
    59                           	opt stack 0
    60  000800  00                 	db	0
    61  000801                     _dpowers:
    62                           	opt stack 0
    63  000801  0001               	dw	1
    64  000803  000A               	dw	10
    65  000805  0064               	dw	100
    66  000807  03E8               	dw	1000
    67  000809  2710               	dw	10000
    68  00080B                     __end_of_dpowers:
    69                           	opt stack 0
    70  0000                     _ADRESL	set	4035
    71  0000                     _ADRESH	set	4036
    72  0000                     _ADCON0	set	4034
    73  0000                     _TRISA	set	3986
    74  0000                     _ADCON2	set	4032
    75  0000                     _ADCON1	set	4033
    76  0000                     _ADCON0bits	set	4034
    77  0000                     _RCREG	set	4014
    78  0000                     _PIR1bits	set	3998
    79  0000                     _TXREG	set	4013
    80  0000                     _SPBRGH	set	4016
    81  0000                     _SPBRG	set	4015
    82  0000                     _BAUDCONbits	set	4024
    83  0000                     _PIE1bits	set	3997
    84  0000                     _TRISCbits	set	3988
    85  0000                     _RCSTAbits	set	4011
    86  0000                     _TXSTAbits	set	4012
    87  0000                     _INTCONbits	set	4082
    88  00080B                     STR_3:
    89  00080B  45                 	db	69	;'E'
    90  00080C  73                 	db	115	;'s'
    91  00080D  74                 	db	116	;'t'
    92  00080E  61                 	db	97	;'a'
    93  00080F  20                 	db	32
    94  000810  65                 	db	101	;'e'
    95  000811  73                 	db	115	;'s'
    96  000812  20                 	db	32
    97  000813  75                 	db	117	;'u'
    98  000814  6E                 	db	110	;'n'
    99  000815  61                 	db	97	;'a'
   100  000816  20                 	db	32
   101  000817  70                 	db	112	;'p'
   102  000818  72                 	db	114	;'r'
   103  000819  75                 	db	117	;'u'
   104  00081A  65                 	db	101	;'e'
   105  00081B  62                 	db	98	;'b'
   106  00081C  61                 	db	97	;'a'
   107  00081D  20                 	db	32
   108  00081E  25                 	db	37
   109  00081F  64                 	db	100	;'d'
   110  000820  20                 	db	32
   111  000821  65                 	db	101	;'e'
   112  000822  73                 	db	115	;'s'
   113  000823  74                 	db	116	;'t'
   114  000824  65                 	db	101	;'e'
   115  000825  20                 	db	32
   116  000826  65                 	db	101	;'e'
   117  000827  73                 	db	115	;'s'
   118  000828  20                 	db	32
   119  000829  6F                 	db	111	;'o'
   120  00082A  74                 	db	116	;'t'
   121  00082B  72                 	db	114	;'r'
   122  00082C  6F                 	db	111	;'o'
   123  00082D  20                 	db	32
   124  00082E  76                 	db	118	;'v'
   125  00082F  61                 	db	97	;'a'
   126  000830  6C                 	db	108	;'l'
   127  000831  6F                 	db	111	;'o'
   128  000832  72                 	db	114	;'r'
   129  000833  00                 	db	0
   130  000834                     STR_2:
   131  000834  41                 	db	65	;'A'
   132  000835  44                 	db	68	;'D'
   133  000836  43                 	db	67	;'C'
   134  000837  20                 	db	32
   135  000838  6D                 	db	109	;'m'
   136  000839  6F                 	db	111	;'o'
   137  00083A  64                 	db	100	;'d'
   138  00083B  75                 	db	117	;'u'
   139  00083C  6C                 	db	108	;'l'
   140  00083D  65                 	db	101	;'e'
   141  00083E  20                 	db	32
   142  00083F  73                 	db	115	;'s'
   143  000840  74                 	db	116	;'t'
   144  000841  61                 	db	97	;'a'
   145  000842  72                 	db	114	;'r'
   146  000843  74                 	db	116	;'t'
   147  000844  65                 	db	101	;'e'
   148  000845  64                 	db	100	;'d'
   149  000846  2E                 	db	46
   150  000847  2E                 	db	46
   151  000848  2E                 	db	46
   152  000849  00                 	db	0
   153  00084A                     STR_1:
   154  00084A  4C                 	db	76	;'L'
   155  00084B  6F                 	db	111	;'o'
   156  00084C  61                 	db	97	;'a'
   157  00084D  64                 	db	100	;'d'
   158  00084E  69                 	db	105	;'i'
   159  00084F  6E                 	db	110	;'n'
   160  000850  67                 	db	103	;'g'
   161  000851  20                 	db	32
   162  000852  73                 	db	115	;'s'
   163  000853  79                 	db	121	;'y'
   164  000854  73                 	db	115	;'s'
   165  000855  74                 	db	116	;'t'
   166  000856  65                 	db	101	;'e'
   167  000857  6D                 	db	109	;'m'
   168  000858  2E                 	db	46
   169  000859  2E                 	db	46
   170  00085A  2E                 	db	46
   171  00085B  00                 	db	0
   172  00085C                     STR_4:
   173  00085C  25                 	db	37
   174  00085D  64                 	db	100	;'d'
   175  00085E  00                 	db	0
   176  0000                     
   177                           ; #config settings
   178  00085F  00                 	db	0	; dummy byte at the end
   179  0000                     
   180                           	psect	cinit
   181  000D34                     __pcinit:
   182                           	opt stack 0
   183  000D34                     start_initialization:
   184                           	opt stack 0
   185  000D34                     __initialization:
   186                           	opt stack 0
   187  000D34                     end_of_initialization:
   188                           	opt stack 0
   189  000D34                     __end_of__initialization:
   190                           	opt stack 0
   191  000D34  0E00               	movlw	low (__Lmediumconst shr (0+16))
   192  000D36  6EF8               	movwf	tblptru,c
   193  000D38  0100               	movlb	0
   194  000D3A  EFA9  F005         	goto	_main	;jump to C main() function
   195                           tblptru	equ	0xFF8
   196                           
   197                           	psect	cstackCOMRAM
   198  000001                     __pcstackCOMRAM:
   199                           	opt stack 0
   200  000001                     ?_readADC:
   201                           	opt stack 0
   202  000001                     ?___lwdiv:
   203                           	opt stack 0
   204  000001                     ?___aldiv:
   205                           	opt stack 0
   206  000001                     sendDataSerial@c:
   207                           	opt stack 0
   208  000001                     putch@c:
   209                           	opt stack 0
   210  000001                     readADC@channel:
   211                           	opt stack 0
   212  000001                     ___lwdiv@dividend:
   213                           	opt stack 0
   214  000001                     ___aldiv@dividend:
   215                           	opt stack 0
   216                           
   217                           ; 4 bytes @ 0x0
   218  000001                     	ds	1
   219  000002                     printSerialnl@String:
   220                           	opt stack 0
   221                           
   222                           ; 2 bytes @ 0x1
   223  000002                     	ds	1
   224  000003                     ??_readADC:
   225  000003                     ___lwdiv@divisor:
   226                           	opt stack 0
   227                           
   228                           ; 2 bytes @ 0x2
   229  000003                     	ds	1
   230  000004                     printSerialnl@p:
   231                           	opt stack 0
   232                           
   233                           ; 2 bytes @ 0x3
   234  000004                     	ds	1
   235  000005                     ___lwdiv@quotient:
   236                           	opt stack 0
   237  000005                     ___aldiv@divisor:
   238                           	opt stack 0
   239                           
   240                           ; 4 bytes @ 0x4
   241  000005                     	ds	2
   242  000007                     ___lwdiv@counter:
   243                           	opt stack 0
   244                           
   245                           ; 1 bytes @ 0x6
   246  000007                     	ds	1
   247  000008                     ?___lwmod:
   248                           	opt stack 0
   249  000008                     ___lwmod@dividend:
   250                           	opt stack 0
   251                           
   252                           ; 2 bytes @ 0x7
   253  000008                     	ds	1
   254  000009                     ___aldiv@counter:
   255                           	opt stack 0
   256                           
   257                           ; 1 bytes @ 0x8
   258  000009                     	ds	1
   259  00000A                     ___aldiv@sign:
   260                           	opt stack 0
   261  00000A                     ___lwmod@divisor:
   262                           	opt stack 0
   263                           
   264                           ; 2 bytes @ 0x9
   265  00000A                     	ds	1
   266  00000B                     ___aldiv@quotient:
   267                           	opt stack 0
   268                           
   269                           ; 4 bytes @ 0xA
   270  00000B                     	ds	1
   271  00000C                     ___lwmod@counter:
   272                           	opt stack 0
   273                           
   274                           ; 1 bytes @ 0xB
   275  00000C                     	ds	1
   276  00000D                     ?_printf:
   277                           	opt stack 0
   278  00000D                     printf@f:
   279                           	opt stack 0
   280                           
   281                           ; 2 bytes @ 0xC
   282  00000D                     	ds	2
   283  00000F                     startSerial@baudrate:
   284                           	opt stack 0
   285                           
   286                           ; 2 bytes @ 0xE
   287  00000F                     	ds	2
   288  000011                     ??_printf:
   289  000011                     startSerial@FOSC:
   290                           	opt stack 0
   291                           
   292                           ; 4 bytes @ 0x10
   293  000011                     	ds	1
   294  000012                     printf@ap:
   295                           	opt stack 0
   296                           
   297                           ; 2 bytes @ 0x11
   298  000012                     	ds	2
   299  000014                     printf@flag:
   300                           	opt stack 0
   301                           
   302                           ; 1 bytes @ 0x13
   303  000014                     	ds	1
   304  000015                     printf@prec:
   305                           	opt stack 0
   306  000015                     startSerial@mode:
   307                           	opt stack 0
   308                           
   309                           ; 2 bytes @ 0x14
   310  000015                     	ds	1
   311  000016                     printf@val:
   312                           	opt stack 0
   313                           
   314                           ; 2 bytes @ 0x15
   315  000016                     	ds	1
   316  000017                     startSerial@brg_16:
   317                           	opt stack 0
   318                           
   319                           ; 2 bytes @ 0x16
   320  000017                     	ds	1
   321  000018                     printf@c:
   322                           	opt stack 0
   323                           
   324                           ; 1 bytes @ 0x17
   325  000018                     	ds	1
   326  000019                     _startSerial$1087:
   327                           	opt stack 0
   328                           
   329                           ; 4 bytes @ 0x18
   330  000019                     	ds	4
   331  00001D                     startSerial@n:
   332                           	opt stack 0
   333                           
   334                           ; 2 bytes @ 0x1C
   335  00001D                     	ds	2
   336  00001F                     tblptru	equ	0xFF8
   337                           
   338                           ; 1 bytes @ 0x1E
   339 ;;
   340 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   341 ;;
   342 ;; *************** function _main *****************
   343 ;; Defined at:
   344 ;;		line 105 in file "main.c"
   345 ;; Parameters:    Size  Location     Type
   346 ;;		None
   347 ;; Auto vars:     Size  Location     Type
   348 ;;		None
   349 ;; Return value:  Size  Location     Type
   350 ;;                  1    wreg      void 
   351 ;; Registers used:
   352 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   353 ;; Tracked objects:
   354 ;;		On entry : 0/0
   355 ;;		On exit  : 0/0
   356 ;;		Unchanged: 0/0
   357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   358 ;;      Params:         0       0       0       0       0       0       0       0       0
   359 ;;      Locals:         0       0       0       0       0       0       0       0       0
   360 ;;      Temps:          0       0       0       0       0       0       0       0       0
   361 ;;      Totals:         0       0       0       0       0       0       0       0       0
   362 ;;Total ram usage:        0 bytes
   363 ;; Hardware stack levels required when called:    2
   364 ;; This function calls:
   365 ;;		_configADC
   366 ;;		_printSerialnl
   367 ;;		_printf
   368 ;;		_readADC
   369 ;;		_startSerial
   370 ;; This function is called by:
   371 ;;		Startup code after reset
   372 ;; This function uses a non-reentrant model
   373 ;;
   374                           
   375                           	psect	text0
   376  000B52                     __ptext0:
   377                           	opt stack 0
   378  000B52                     _main:
   379                           	opt stack 29
   380                           
   381                           ;main.c: 106: startSerial(9600, 24000000, 0, 0);
   382                           
   383                           ;incstack = 0
   384  000B52  0E25               	movlw	37
   385  000B54  6E10               	movwf	startSerial@baudrate+1,c
   386  000B56  0E80               	movlw	128
   387  000B58  6E0F               	movwf	startSerial@baudrate,c
   388  000B5A  0E00               	movlw	0
   389  000B5C  6E11               	movwf	startSerial@FOSC,c
   390  000B5E  0E36               	movlw	54
   391  000B60  6E12               	movwf	startSerial@FOSC+1,c
   392  000B62  0E6E               	movlw	110
   393  000B64  6E13               	movwf	startSerial@FOSC+2,c
   394  000B66  0E01               	movlw	1
   395  000B68  6E14               	movwf	startSerial@FOSC+3,c
   396  000B6A  0E00               	movlw	0
   397  000B6C  6E16               	movwf	startSerial@mode+1,c
   398  000B6E  0E00               	movlw	0
   399  000B70  6E15               	movwf	startSerial@mode,c
   400  000B72  0E00               	movlw	0
   401  000B74  6E18               	movwf	startSerial@brg_16+1,c
   402  000B76  0E00               	movlw	0
   403  000B78  6E17               	movwf	startSerial@brg_16,c
   404  000B7A  ECBF  F004         	call	_startSerial	;wreg free
   405                           
   406                           ;main.c: 108: printSerialnl("Loading system...");
   407  000B7E  0E4A               	movlw	low STR_1
   408  000B80  6E02               	movwf	printSerialnl@String,c
   409  000B82  0E08               	movlw	high STR_1
   410  000B84  6E03               	movwf	printSerialnl@String+1,c
   411  000B86  EC66  F006         	call	_printSerialnl	;wreg free
   412                           
   413                           ;main.c: 110: configADC();
   414  000B8A  EC85  F006         	call	_configADC	;wreg free
   415                           
   416                           ;main.c: 112: printSerialnl("ADC module started...");
   417  000B8E  0E34               	movlw	low STR_2
   418  000B90  6E02               	movwf	printSerialnl@String,c
   419  000B92  0E08               	movlw	high STR_2
   420  000B94  6E03               	movwf	printSerialnl@String+1,c
   421  000B96  EC66  F006         	call	_printSerialnl	;wreg free
   422                           
   423                           ;main.c: 113: printf("Esta es una prueba %d este es otro valor", ADCON2);
   424  000B9A  0E0B               	movlw	low STR_3
   425  000B9C  6E0D               	movwf	printf@f,c
   426  000B9E  0E08               	movlw	high STR_3
   427  000BA0  6E0E               	movwf	printf@f+1,c
   428  000BA2  CFC0 F00F          	movff	4032,?_printf+2	;volatile
   429  000BA6  6A10               	clrf	?_printf+3,c
   430  000BA8  EC30  F004         	call	_printf	;wreg free
   431  000BAC                     l1165:
   432                           
   433                           ;main.c: 122: printf("%d", readADC(0b0000));
   434  000BAC  0E5C               	movlw	low STR_4
   435  000BAE  6E0D               	movwf	printf@f,c
   436  000BB0  0E08               	movlw	high STR_4
   437  000BB2  6E0E               	movwf	printf@f+1,c
   438  000BB4  0E00               	movlw	0
   439  000BB6  6E02               	movwf	readADC@channel+1,c
   440  000BB8  0E00               	movlw	0
   441  000BBA  6E01               	movwf	readADC@channel,c
   442  000BBC  EC20  F006         	call	_readADC	;wreg free
   443  000BC0  C001  F00F         	movff	?_readADC,?_printf+2
   444  000BC4  C002  F010         	movff	?_readADC+1,?_printf+3
   445  000BC8  EC30  F004         	call	_printf	;wreg free
   446                           
   447                           ;main.c: 124: printf("%d", readADC(0b0001));
   448  000BCC  0E5C               	movlw	low STR_4
   449  000BCE  6E0D               	movwf	printf@f,c
   450  000BD0  0E08               	movlw	high STR_4
   451  000BD2  6E0E               	movwf	printf@f+1,c
   452  000BD4  0E00               	movlw	0
   453  000BD6  6E02               	movwf	readADC@channel+1,c
   454  000BD8  0E01               	movlw	1
   455  000BDA  6E01               	movwf	readADC@channel,c
   456  000BDC  EC20  F006         	call	_readADC	;wreg free
   457  000BE0  C001  F00F         	movff	?_readADC,?_printf+2
   458  000BE4  C002  F010         	movff	?_readADC+1,?_printf+3
   459  000BE8  EC30  F004         	call	_printf	;wreg free
   460  000BEC  D7DF               	goto	l1165
   461  000BEE                     __end_of_main:
   462                           	opt stack 0
   463                           tblptru	equ	0xFF8
   464                           
   465 ;; *************** function _startSerial *****************
   466 ;; Defined at:
   467 ;;		line 8 in file "Serial.h"
   468 ;; Parameters:    Size  Location     Type
   469 ;;  baudrate        2   14[COMRAM] int 
   470 ;;  FOSC            4   16[COMRAM] long 
   471 ;;  mode            2   20[COMRAM] int 
   472 ;;  brg_16          2   22[COMRAM] int 
   473 ;; Auto vars:     Size  Location     Type
   474 ;;  n               2   28[COMRAM] int 
   475 ;; Return value:  Size  Location     Type
   476 ;;                  1    wreg      void 
   477 ;; Registers used:
   478 ;;		wreg, status,2, status,0, cstack
   479 ;; Tracked objects:
   480 ;;		On entry : 0/0
   481 ;;		On exit  : 0/0
   482 ;;		Unchanged: 0/0
   483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   484 ;;      Params:        10       0       0       0       0       0       0       0       0
   485 ;;      Locals:         6       0       0       0       0       0       0       0       0
   486 ;;      Temps:          0       0       0       0       0       0       0       0       0
   487 ;;      Totals:        16       0       0       0       0       0       0       0       0
   488 ;;Total ram usage:       16 bytes
   489 ;; Hardware stack levels used:    1
   490 ;; Hardware stack levels required when called:    1
   491 ;; This function calls:
   492 ;;		___aldiv
   493 ;; This function is called by:
   494 ;;		_main
   495 ;; This function uses a non-reentrant model
   496 ;;
   497                           
   498                           	psect	text1
   499  00097E                     __ptext1:
   500                           	opt stack 0
   501  00097E                     _startSerial:
   502                           	opt stack 29
   503                           
   504                           ;Serial.h: 9: int n;
   505                           ;Serial.h: 10: if(!mode){
   506                           
   507                           ;incstack = 0
   508  00097E  5015               	movf	startSerial@mode,w,c
   509  000980  1016               	iorwf	startSerial@mode+1,w,c
   510  000982  A4D8               	btfss	status,2,c
   511  000984  D002               	goto	l41
   512                           
   513                           ;Serial.h: 11: TXSTAbits.SYNC = 0;
   514  000986  98AC               	bcf	4012,4,c	;volatile
   515                           
   516                           ;Serial.h: 12: }
   517  000988  D001               	goto	l42
   518  00098A                     l41:
   519                           
   520                           ;Serial.h: 13: else{
   521                           ;Serial.h: 14: TXSTAbits.SYNC = 1;
   522  00098A  88AC               	bsf	4012,4,c	;volatile
   523  00098C                     l42:
   524                           
   525                           ;Serial.h: 15: }
   526                           ;Serial.h: 18: RCSTAbits.SPEN = 1;
   527  00098C  8EAB               	bsf	4011,7,c	;volatile
   528                           
   529                           ;Serial.h: 19: TRISCbits.RC6 = 0;
   530  00098E  9C94               	bcf	3988,6,c	;volatile
   531                           
   532                           ;Serial.h: 20: TRISCbits.RC7 = 1;
   533  000990  8E94               	bsf	3988,7,c	;volatile
   534                           
   535                           ;Serial.h: 22: RCSTAbits.CREN = 1;
   536  000992  88AB               	bsf	4011,4,c	;volatile
   537                           
   538                           ;Serial.h: 23: TXSTAbits.TXEN = 1;
   539  000994  8AAC               	bsf	4012,5,c	;volatile
   540                           
   541                           ;Serial.h: 27: PIE1bits.RCIE = 1;
   542  000996  8A9D               	bsf	3997,5,c	;volatile
   543                           
   544                           ;Serial.h: 28: INTCONbits.GIE = 1;
   545  000998  8EF2               	bsf	intcon,7,c	;volatile
   546                           
   547                           ;Serial.h: 29: INTCONbits.PEIE = 1;
   548  00099A  8CF2               	bsf	intcon,6,c	;volatile
   549                           
   550                           ;Serial.h: 30: TXSTAbits.BRGH = 1;
   551  00099C  84AC               	bsf	4012,2,c	;volatile
   552                           
   553                           ;Serial.h: 33: if(brg_16){
   554  00099E  5017               	movf	startSerial@brg_16,w,c
   555  0009A0  1018               	iorwf	startSerial@brg_16+1,w,c
   556  0009A2  B4D8               	btfsc	status,2,c
   557  0009A4  D039               	goto	l43
   558                           
   559                           ;Serial.h: 35: BAUDCONbits.BRG16 = 1;
   560  0009A6  86B8               	bsf	4024,3,c	;volatile
   561                           
   562                           ;Serial.h: 36: n = (int)((FOSC / baudrate) / 4) - 1;
   563  0009A8  C00F  F005         	movff	startSerial@baudrate,___aldiv@divisor
   564  0009AC  C010  F006         	movff	startSerial@baudrate+1,___aldiv@divisor+1
   565  0009B0  0E00               	movlw	0
   566  0009B2  BE06               	btfsc	___aldiv@divisor+1,7,c
   567  0009B4  0EFF               	movlw	-1
   568  0009B6  6E07               	movwf	___aldiv@divisor+2,c
   569  0009B8  6E08               	movwf	___aldiv@divisor+3,c
   570  0009BA  C011  F001         	movff	startSerial@FOSC,___aldiv@dividend
   571  0009BE  C012  F002         	movff	startSerial@FOSC+1,___aldiv@dividend+1
   572  0009C2  C013  F003         	movff	startSerial@FOSC+2,___aldiv@dividend+2
   573  0009C6  C014  F004         	movff	startSerial@FOSC+3,___aldiv@dividend+3
   574  0009CA  EC43  F005         	call	___aldiv	;wreg free
   575  0009CE  C001  F019         	movff	?___aldiv,_startSerial$1087
   576  0009D2  C002  F01A         	movff	?___aldiv+1,_startSerial$1087+1
   577  0009D6  C003  F01B         	movff	?___aldiv+2,_startSerial$1087+2
   578  0009DA  C004  F01C         	movff	?___aldiv+3,_startSerial$1087+3
   579                           
   580                           ;Serial.h: 36: n = (int)((FOSC / baudrate) / 4) - 1;
   581  0009DE  C019  F001         	movff	_startSerial$1087,___aldiv@dividend
   582  0009E2  C01A  F002         	movff	_startSerial$1087+1,___aldiv@dividend+1
   583  0009E6  C01B  F003         	movff	_startSerial$1087+2,___aldiv@dividend+2
   584  0009EA  C01C  F004         	movff	_startSerial$1087+3,___aldiv@dividend+3
   585  0009EE  0E04               	movlw	4
   586  0009F0  6E05               	movwf	___aldiv@divisor,c
   587  0009F2  0E00               	movlw	0
   588  0009F4  6E06               	movwf	___aldiv@divisor+1,c
   589  0009F6  0E00               	movlw	0
   590  0009F8  6E07               	movwf	___aldiv@divisor+2,c
   591  0009FA  0E00               	movlw	0
   592  0009FC  6E08               	movwf	___aldiv@divisor+3,c
   593  0009FE  EC43  F005         	call	___aldiv	;wreg free
   594  000A02  0EFF               	movlw	255
   595  000A04  2401               	addwf	?___aldiv,w,c
   596  000A06  6E1D               	movwf	startSerial@n,c
   597  000A08  0EFF               	movlw	255
   598  000A0A  2002               	addwfc	?___aldiv+1,w,c
   599  000A0C  6E1E               	movwf	startSerial@n+1,c
   600                           
   601                           ;Serial.h: 37: SPBRG = (int)(n & 0x00FF);
   602  000A0E  C01D  FFAF         	movff	startSerial@n,4015	;volatile
   603                           
   604                           ;Serial.h: 38: SPBRGH = (int)(n & 0xFF00);
   605  000A12  0E00               	movlw	0
   606  000A14  6EB0               	movwf	4016,c	;volatile
   607                           
   608                           ;Serial.h: 39: }
   609  000A16  0012               	return	
   610  000A18                     l43:
   611                           
   612                           ;Serial.h: 40: else{
   613                           ;Serial.h: 42: BAUDCONbits.BRG16 = 0;
   614  000A18  96B8               	bcf	4024,3,c	;volatile
   615                           
   616                           ;Serial.h: 43: n = (int)((FOSC / baudrate) / 16) - 1;
   617  000A1A  C00F  F005         	movff	startSerial@baudrate,___aldiv@divisor
   618  000A1E  C010  F006         	movff	startSerial@baudrate+1,___aldiv@divisor+1
   619  000A22  0E00               	movlw	0
   620  000A24  BE06               	btfsc	___aldiv@divisor+1,7,c
   621  000A26  0EFF               	movlw	-1
   622  000A28  6E07               	movwf	___aldiv@divisor+2,c
   623  000A2A  6E08               	movwf	___aldiv@divisor+3,c
   624  000A2C  C011  F001         	movff	startSerial@FOSC,___aldiv@dividend
   625  000A30  C012  F002         	movff	startSerial@FOSC+1,___aldiv@dividend+1
   626  000A34  C013  F003         	movff	startSerial@FOSC+2,___aldiv@dividend+2
   627  000A38  C014  F004         	movff	startSerial@FOSC+3,___aldiv@dividend+3
   628  000A3C  EC43  F005         	call	___aldiv	;wreg free
   629  000A40  C001  F019         	movff	?___aldiv,_startSerial$1087
   630  000A44  C002  F01A         	movff	?___aldiv+1,_startSerial$1087+1
   631  000A48  C003  F01B         	movff	?___aldiv+2,_startSerial$1087+2
   632  000A4C  C004  F01C         	movff	?___aldiv+3,_startSerial$1087+3
   633                           
   634                           ;Serial.h: 43: n = (int)((FOSC / baudrate) / 16) - 1;
   635  000A50  C019  F001         	movff	_startSerial$1087,___aldiv@dividend
   636  000A54  C01A  F002         	movff	_startSerial$1087+1,___aldiv@dividend+1
   637  000A58  C01B  F003         	movff	_startSerial$1087+2,___aldiv@dividend+2
   638  000A5C  C01C  F004         	movff	_startSerial$1087+3,___aldiv@dividend+3
   639  000A60  0E10               	movlw	16
   640  000A62  6E05               	movwf	___aldiv@divisor,c
   641  000A64  0E00               	movlw	0
   642  000A66  6E06               	movwf	___aldiv@divisor+1,c
   643  000A68  0E00               	movlw	0
   644  000A6A  6E07               	movwf	___aldiv@divisor+2,c
   645  000A6C  0E00               	movlw	0
   646  000A6E  6E08               	movwf	___aldiv@divisor+3,c
   647  000A70  EC43  F005         	call	___aldiv	;wreg free
   648  000A74  0EFF               	movlw	255
   649  000A76  2401               	addwf	?___aldiv,w,c
   650  000A78  6E1D               	movwf	startSerial@n,c
   651  000A7A  0EFF               	movlw	255
   652  000A7C  2002               	addwfc	?___aldiv+1,w,c
   653  000A7E  6E1E               	movwf	startSerial@n+1,c
   654                           
   655                           ;Serial.h: 44: SPBRG = (int)(n & 0x00FF);
   656  000A80  C01D  FFAF         	movff	startSerial@n,4015	;volatile
   657  000A84  0012               	return	
   658  000A86                     __end_of_startSerial:
   659                           	opt stack 0
   660                           tblptru	equ	0xFF8
   661                           intcon	equ	0xFF2
   662                           status	equ	0xFD8
   663                           
   664 ;; *************** function ___aldiv *****************
   665 ;; Defined at:
   666 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\aldiv.c"
   667 ;; Parameters:    Size  Location     Type
   668 ;;  dividend        4    0[COMRAM] long 
   669 ;;  divisor         4    4[COMRAM] long 
   670 ;; Auto vars:     Size  Location     Type
   671 ;;  quotient        4   10[COMRAM] long 
   672 ;;  sign            1    9[COMRAM] unsigned char 
   673 ;;  counter         1    8[COMRAM] unsigned char 
   674 ;; Return value:  Size  Location     Type
   675 ;;                  4    0[COMRAM] long 
   676 ;; Registers used:
   677 ;;		wreg, status,2, status,0
   678 ;; Tracked objects:
   679 ;;		On entry : 0/0
   680 ;;		On exit  : 0/0
   681 ;;		Unchanged: 0/0
   682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   683 ;;      Params:         8       0       0       0       0       0       0       0       0
   684 ;;      Locals:         6       0       0       0       0       0       0       0       0
   685 ;;      Temps:          0       0       0       0       0       0       0       0       0
   686 ;;      Totals:        14       0       0       0       0       0       0       0       0
   687 ;;Total ram usage:       14 bytes
   688 ;; Hardware stack levels used:    1
   689 ;; This function calls:
   690 ;;		Nothing
   691 ;; This function is called by:
   692 ;;		_startSerial
   693 ;; This function uses a non-reentrant model
   694 ;;
   695                           
   696                           	psect	text2
   697  000A86                     __ptext2:
   698                           	opt stack 0
   699  000A86                     ___aldiv:
   700                           	opt stack 29
   701                           
   702                           ;incstack = 0
   703  000A86  0E00               	movlw	0
   704  000A88  6E0A               	movwf	___aldiv@sign,c
   705  000A8A  AE08               	btfss	___aldiv@divisor+3,7,c
   706  000A8C  D00A               	goto	l987
   707  000A8E  1E08               	comf	___aldiv@divisor+3,f,c
   708  000A90  1E07               	comf	___aldiv@divisor+2,f,c
   709  000A92  1E06               	comf	___aldiv@divisor+1,f,c
   710  000A94  6C05               	negf	___aldiv@divisor,c
   711  000A96  0E00               	movlw	0
   712  000A98  2206               	addwfc	___aldiv@divisor+1,f,c
   713  000A9A  2207               	addwfc	___aldiv@divisor+2,f,c
   714  000A9C  2208               	addwfc	___aldiv@divisor+3,f,c
   715  000A9E  0E01               	movlw	1
   716  000AA0  6E0A               	movwf	___aldiv@sign,c
   717  000AA2                     l987:
   718  000AA2  AE04               	btfss	___aldiv@dividend+3,7,c
   719  000AA4  D00A               	goto	l993
   720  000AA6  1E04               	comf	___aldiv@dividend+3,f,c
   721  000AA8  1E03               	comf	___aldiv@dividend+2,f,c
   722  000AAA  1E02               	comf	___aldiv@dividend+1,f,c
   723  000AAC  6C01               	negf	___aldiv@dividend,c
   724  000AAE  0E00               	movlw	0
   725  000AB0  2202               	addwfc	___aldiv@dividend+1,f,c
   726  000AB2  2203               	addwfc	___aldiv@dividend+2,f,c
   727  000AB4  2204               	addwfc	___aldiv@dividend+3,f,c
   728  000AB6  0E01               	movlw	1
   729  000AB8  1A0A               	xorwf	___aldiv@sign,f,c
   730  000ABA                     l993:
   731  000ABA  0E00               	movlw	0
   732  000ABC  6E0B               	movwf	___aldiv@quotient,c
   733  000ABE  0E00               	movlw	0
   734  000AC0  6E0C               	movwf	___aldiv@quotient+1,c
   735  000AC2  0E00               	movlw	0
   736  000AC4  6E0D               	movwf	___aldiv@quotient+2,c
   737  000AC6  0E00               	movlw	0
   738  000AC8  6E0E               	movwf	___aldiv@quotient+3,c
   739  000ACA  5005               	movf	___aldiv@divisor,w,c
   740  000ACC  1006               	iorwf	___aldiv@divisor+1,w,c
   741  000ACE  1007               	iorwf	___aldiv@divisor+2,w,c
   742  000AD0  1008               	iorwf	___aldiv@divisor+3,w,c
   743  000AD2  B4D8               	btfsc	status,2,c
   744  000AD4  D02A               	goto	l1015
   745  000AD6  0E01               	movlw	1
   746  000AD8  6E09               	movwf	___aldiv@counter,c
   747  000ADA  D006               	goto	l1001
   748  000ADC                     l999:
   749  000ADC  90D8               	bcf	status,0,c
   750  000ADE  3605               	rlcf	___aldiv@divisor,f,c
   751  000AE0  3606               	rlcf	___aldiv@divisor+1,f,c
   752  000AE2  3607               	rlcf	___aldiv@divisor+2,f,c
   753  000AE4  3608               	rlcf	___aldiv@divisor+3,f,c
   754  000AE6  2A09               	incf	___aldiv@counter,f,c
   755  000AE8                     l1001:
   756  000AE8  AE08               	btfss	___aldiv@divisor+3,7,c
   757  000AEA  D7F8               	goto	l999
   758  000AEC                     l1003:
   759  000AEC  90D8               	bcf	status,0,c
   760  000AEE  360B               	rlcf	___aldiv@quotient,f,c
   761  000AF0  360C               	rlcf	___aldiv@quotient+1,f,c
   762  000AF2  360D               	rlcf	___aldiv@quotient+2,f,c
   763  000AF4  360E               	rlcf	___aldiv@quotient+3,f,c
   764  000AF6  5005               	movf	___aldiv@divisor,w,c
   765  000AF8  5C01               	subwf	___aldiv@dividend,w,c
   766  000AFA  5006               	movf	___aldiv@divisor+1,w,c
   767  000AFC  5802               	subwfb	___aldiv@dividend+1,w,c
   768  000AFE  5007               	movf	___aldiv@divisor+2,w,c
   769  000B00  5803               	subwfb	___aldiv@dividend+2,w,c
   770  000B02  5008               	movf	___aldiv@divisor+3,w,c
   771  000B04  5804               	subwfb	___aldiv@dividend+3,w,c
   772  000B06  A0D8               	btfss	status,0,c
   773  000B08  D009               	goto	l1011
   774  000B0A  5005               	movf	___aldiv@divisor,w,c
   775  000B0C  5E01               	subwf	___aldiv@dividend,f,c
   776  000B0E  5006               	movf	___aldiv@divisor+1,w,c
   777  000B10  5A02               	subwfb	___aldiv@dividend+1,f,c
   778  000B12  5007               	movf	___aldiv@divisor+2,w,c
   779  000B14  5A03               	subwfb	___aldiv@dividend+2,f,c
   780  000B16  5008               	movf	___aldiv@divisor+3,w,c
   781  000B18  5A04               	subwfb	___aldiv@dividend+3,f,c
   782  000B1A  800B               	bsf	___aldiv@quotient,0,c
   783  000B1C                     l1011:
   784  000B1C  90D8               	bcf	status,0,c
   785  000B1E  3208               	rrcf	___aldiv@divisor+3,f,c
   786  000B20  3207               	rrcf	___aldiv@divisor+2,f,c
   787  000B22  3206               	rrcf	___aldiv@divisor+1,f,c
   788  000B24  3205               	rrcf	___aldiv@divisor,f,c
   789  000B26  2E09               	decfsz	___aldiv@counter,f,c
   790  000B28  D7E1               	goto	l1003
   791  000B2A                     l1015:
   792  000B2A  500A               	movf	___aldiv@sign,w,c
   793  000B2C  B4D8               	btfsc	status,2,c
   794  000B2E  D008               	goto	l1019
   795  000B30  1E0E               	comf	___aldiv@quotient+3,f,c
   796  000B32  1E0D               	comf	___aldiv@quotient+2,f,c
   797  000B34  1E0C               	comf	___aldiv@quotient+1,f,c
   798  000B36  6C0B               	negf	___aldiv@quotient,c
   799  000B38  0E00               	movlw	0
   800  000B3A  220C               	addwfc	___aldiv@quotient+1,f,c
   801  000B3C  220D               	addwfc	___aldiv@quotient+2,f,c
   802  000B3E  220E               	addwfc	___aldiv@quotient+3,f,c
   803  000B40                     l1019:
   804  000B40  C00B  F001         	movff	___aldiv@quotient,?___aldiv
   805  000B44  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
   806  000B48  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
   807  000B4C  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
   808  000B50  0012               	return	
   809  000B52                     __end_of___aldiv:
   810                           	opt stack 0
   811                           tblptru	equ	0xFF8
   812                           intcon	equ	0xFF2
   813                           status	equ	0xFD8
   814                           
   815 ;; *************** function _readADC *****************
   816 ;; Defined at:
   817 ;;		line 88 in file "main.c"
   818 ;; Parameters:    Size  Location     Type
   819 ;;  channel         2    0[COMRAM] int 
   820 ;; Auto vars:     Size  Location     Type
   821 ;;		None
   822 ;; Return value:  Size  Location     Type
   823 ;;                  2    0[COMRAM] int 
   824 ;; Registers used:
   825 ;;		wreg, status,2, status,0
   826 ;; Tracked objects:
   827 ;;		On entry : 0/0
   828 ;;		On exit  : 0/0
   829 ;;		Unchanged: 0/0
   830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   831 ;;      Params:         2       0       0       0       0       0       0       0       0
   832 ;;      Locals:         0       0       0       0       0       0       0       0       0
   833 ;;      Temps:          2       0       0       0       0       0       0       0       0
   834 ;;      Totals:         4       0       0       0       0       0       0       0       0
   835 ;;Total ram usage:        4 bytes
   836 ;; Hardware stack levels used:    1
   837 ;; This function calls:
   838 ;;		Nothing
   839 ;; This function is called by:
   840 ;;		_main
   841 ;; This function uses a non-reentrant model
   842 ;;
   843                           
   844                           	psect	text3
   845  000C40                     __ptext3:
   846                           	opt stack 0
   847  000C40                     _readADC:
   848                           	opt stack 30
   849                           
   850                           ;main.c: 89: switch(0b0000){
   851                           
   852                           ;incstack = 0
   853  000C40  D007               	goto	l1095
   854  000C42                     l91:
   855                           
   856                           ;main.c: 91: ADCON0 = ADCON0 | (0b0000 << 2);
   857  000C42  CFC2 FFC2          	movff	4034,4034	;volatile
   858                           
   859                           ;main.c: 92: break;
   860  000C46  D013               	goto	l92
   861  000C48                     l1091:
   862                           
   863                           ;main.c: 94: ADCON0 = ADCON0 | (0b0001 << 2);
   864  000C48  50C2               	movf	4034,w,c	;volatile
   865  000C4A  0904               	iorlw	4
   866  000C4C  6EC2               	movwf	4034,c	;volatile
   867                           
   868                           ;main.c: 96: }
   869                           
   870                           ;main.c: 95: break;
   871  000C4E  D00F               	goto	l92
   872  000C50                     l1095:
   873  000C50  0E00               	movlw	0
   874  000C52  6E03               	movwf	??_readADC& (0+255),c
   875  000C54  0E00               	movlw	0
   876  000C56  6E04               	movwf	(??_readADC+1)& (0+255),c
   877                           
   878                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   879                           ; Switch size 1, requested type "space"
   880                           ; Number of cases is 1, Range of values is 0 to 0
   881                           ; switch strategies available:
   882                           ; Name         Instructions Cycles
   883                           ; simple_byte            4     3 (average)
   884                           ;	Chosen strategy is simple_byte
   885  000C58  5004               	movf	??_readADC+1,w,c
   886  000C5A  0A00               	xorlw	0	; case 0
   887  000C5C  A4D8               	btfss	status,2,c
   888  000C5E  D007               	goto	l92
   889                           
   890                           ; Switch size 1, requested type "space"
   891                           ; Number of cases is 2, Range of values is 0 to 1
   892                           ; switch strategies available:
   893                           ; Name         Instructions Cycles
   894                           ; simple_byte            7     4 (average)
   895                           ;	Chosen strategy is simple_byte
   896  000C60  5003               	movf	??_readADC,w,c
   897  000C62  0A00               	xorlw	0	; case 0
   898  000C64  B4D8               	btfsc	status,2,c
   899  000C66  D7ED               	goto	l91
   900  000C68  0A01               	xorlw	1	; case 1
   901  000C6A  B4D8               	btfsc	status,2,c
   902  000C6C  D7ED               	goto	l1091
   903  000C6E                     l92:
   904                           
   905                           ;main.c: 98: ADCON0bits.ADON = 1;
   906  000C6E  80C2               	bsf	4034,0,c	;volatile
   907                           
   908                           ;main.c: 99: ADCON0bits.GO = 1;
   909  000C70  82C2               	bsf	4034,1,c	;volatile
   910  000C72                     l94:
   911  000C72  B2C2               	btfsc	4034,1,c	;volatile
   912  000C74  D7FE               	goto	l94
   913                           
   914                           ;main.c: 102: return (ADRESH << 8) + ADRESL;
   915  000C76  50C4               	movf	4036,w,c	;volatile
   916  000C78  6E04               	movwf	(??_readADC+1)& (0+255),c
   917  000C7A  6A03               	clrf	??_readADC& (0+255),c
   918  000C7C  50C3               	movf	4035,w,c	;volatile
   919  000C7E  2403               	addwf	??_readADC,w,c
   920  000C80  6E01               	movwf	?_readADC,c
   921  000C82  0E00               	movlw	0
   922  000C84  2004               	addwfc	??_readADC+1,w,c
   923  000C86  6E02               	movwf	?_readADC+1,c
   924  000C88  0012               	return	
   925  000C8A                     __end_of_readADC:
   926                           	opt stack 0
   927                           tblptru	equ	0xFF8
   928                           intcon	equ	0xFF2
   929                           status	equ	0xFD8
   930                           
   931 ;; *************** function _printf *****************
   932 ;; Defined at:
   933 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
   934 ;; Parameters:    Size  Location     Type
   935 ;;  f               2   12[COMRAM] PTR const unsigned char 
   936 ;;		 -> STR_5(3), STR_4(3), STR_3(41), 
   937 ;; Auto vars:     Size  Location     Type
   938 ;;  tmpval          4    0        struct .
   939 ;;  cp              3    0        PTR const unsigned char 
   940 ;;  val             2   21[COMRAM] unsigned int 
   941 ;;  ap              2   17[COMRAM] PTR void [1]
   942 ;;		 -> ?_printf(2), 
   943 ;;  len             2    0        unsigned int 
   944 ;;  c               1   23[COMRAM] char 
   945 ;;  prec            1   20[COMRAM] char 
   946 ;;  flag            1   19[COMRAM] unsigned char 
   947 ;; Return value:  Size  Location     Type
   948 ;;                  2   12[COMRAM] int 
   949 ;; Registers used:
   950 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   951 ;; Tracked objects:
   952 ;;		On entry : 0/0
   953 ;;		On exit  : 0/0
   954 ;;		Unchanged: 0/0
   955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   956 ;;      Params:         4       0       0       0       0       0       0       0       0
   957 ;;      Locals:         7       0       0       0       0       0       0       0       0
   958 ;;      Temps:          1       0       0       0       0       0       0       0       0
   959 ;;      Totals:        12       0       0       0       0       0       0       0       0
   960 ;;Total ram usage:       12 bytes
   961 ;; Hardware stack levels used:    1
   962 ;; Hardware stack levels required when called:    1
   963 ;; This function calls:
   964 ;;		___lwdiv
   965 ;;		___lwmod
   966 ;;		_putch
   967 ;; This function is called by:
   968 ;;		_main
   969 ;; This function uses a non-reentrant model
   970 ;;
   971                           
   972                           	psect	text4
   973  000860                     __ptext4:
   974                           	opt stack 0
   975  000860                     _printf:
   976                           	opt stack 29
   977                           
   978                           ;doprnt.c: 466: va_list ap;
   979                           ;doprnt.c: 499: signed char c;
   980                           ;doprnt.c: 506: signed char prec;
   981                           ;doprnt.c: 508: unsigned char flag;
   982                           ;doprnt.c: 523: union {
   983                           ;doprnt.c: 524: unsigned long vd;
   984                           ;doprnt.c: 525: double integ;
   985                           ;doprnt.c: 526: } tmpval;
   986                           ;doprnt.c: 528: unsigned int val;
   987                           ;doprnt.c: 529: unsigned len;
   988                           ;doprnt.c: 530: const char * cp;
   989                           ;doprnt.c: 533: *ap = __va_start();
   990                           
   991                           ;incstack = 0
   992  000860  0E0F               	movlw	low (?_printf+2)
   993  000862  6E12               	movwf	printf@ap,c
   994  000864  0E00               	movlw	high (?_printf+2)
   995  000866  6E13               	movwf	printf@ap+1,c
   996                           
   997                           ;doprnt.c: 536: while(c = *f++) {
   998  000868  D07D               	goto	l1153
   999  00086A                     l1107:
  1000                           
  1001                           ;doprnt.c: 538: if(c != '%')
  1002  00086A  0E25               	movlw	37
  1003  00086C  1818               	xorwf	printf@c,w,c
  1004  00086E  B4D8               	btfsc	status,2,c
  1005  000870  D004               	goto	l1111
  1006                           
  1007                           ;doprnt.c: 540: {
  1008                           ;doprnt.c: 541: (putch(c) );
  1009  000872  5018               	movf	printf@c,w,c
  1010  000874  EC8E  F006         	call	_putch
  1011                           
  1012                           ;doprnt.c: 542: continue;
  1013  000878  D075               	goto	l1153
  1014  00087A                     l1111:
  1015                           
  1016                           ;doprnt.c: 543: }
  1017                           ;doprnt.c: 548: flag = 0;
  1018  00087A  0E00               	movlw	0
  1019  00087C  6E14               	movwf	printf@flag,c
  1020                           
  1021                           ;doprnt.c: 822: }
  1022                           
  1023                           ;doprnt.c: 813: continue;
  1024                           
  1025                           ;doprnt.c: 802: default:
  1026                           
  1027                           ;doprnt.c: 698: case 'i':
  1028                           ;doprnt.c: 699: break;
  1029                           
  1030                           ;doprnt.c: 697: case 'd':
  1031                           
  1032                           ;doprnt.c: 638: goto alldone;
  1033                           
  1034                           ;doprnt.c: 637: case 0:
  1035                           
  1036                           ;doprnt.c: 635: switch(c = *f++) {
  1037  00087E  C00D  FFF6         	movff	printf@f,tblptrl
  1038  000882  C00E  FFF7         	movff	printf@f+1,tblptrh
  1039  000886  4A0D               	infsnz	printf@f,f,c
  1040  000888  2A0E               	incf	printf@f+1,f,c
  1041  00088A                     	if	0	;tblptru may be non-zero
  1042  00088A                     	endif
  1043  00088A                     	if	0	;tblptru may be non-zero
  1044  00088A                     	endif
  1045  00088A  0008               	tblrd		*
  1046  00088C  CFF5 F018          	movff	tablat,printf@c
  1047  000890  5018               	movf	printf@c,w,c
  1048                           
  1049                           ; Switch size 1, requested type "space"
  1050                           ; Number of cases is 3, Range of values is 0 to 105
  1051                           ; switch strategies available:
  1052                           ; Name         Instructions Cycles
  1053                           ; simple_byte           10     6 (average)
  1054                           ;	Chosen strategy is simple_byte
  1055  000892  0A00               	xorlw	0	; case 0
  1056  000894  B4D8               	btfsc	status,2,c
  1057  000896  0012               	return	
  1058  000898  0A64               	xorlw	100	; case 100
  1059  00089A  B4D8               	btfsc	status,2,c
  1060  00089C  D003               	goto	l1117
  1061  00089E  0A0D               	xorlw	13	; case 105
  1062  0008A0  A4D8               	btfss	status,2,c
  1063  0008A2  D060               	goto	l1153
  1064  0008A4                     l1117:
  1065                           
  1066                           ;doprnt.c: 1253: {
  1067                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1068  0008A4  C012  FFD9         	movff	printf@ap,fsr2l
  1069  0008A8  C013  FFDA         	movff	printf@ap+1,fsr2h
  1070  0008AC  CFDE F016          	movff	postinc2,printf@val
  1071  0008B0  CFDD F017          	movff	postdec2,printf@val+1
  1072  0008B4  0E02               	movlw	2
  1073  0008B6  2612               	addwf	printf@ap,f,c
  1074  0008B8  0E00               	movlw	0
  1075  0008BA  2213               	addwfc	printf@ap+1,f,c
  1076                           
  1077                           ;doprnt.c: 1261: if((int)val < 0) {
  1078  0008BC  AE17               	btfss	printf@val+1,7,c
  1079  0008BE  D006               	goto	l1127
  1080                           
  1081                           ;doprnt.c: 1262: flag |= 0x03;
  1082  0008C0  0E03               	movlw	3
  1083  0008C2  1214               	iorwf	printf@flag,f,c
  1084                           
  1085                           ;doprnt.c: 1263: val = -val;
  1086  0008C4  6C16               	negf	printf@val,c
  1087  0008C6  1E17               	comf	printf@val+1,f,c
  1088  0008C8  B0D8               	btfsc	status,0,c
  1089  0008CA  2A17               	incf	printf@val+1,f,c
  1090  0008CC                     l1127:
  1091                           
  1092                           ;doprnt.c: 1264: }
  1093                           ;doprnt.c: 1266: }
  1094                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1095  0008CC  0E01               	movlw	1
  1096  0008CE  6E18               	movwf	printf@c,c
  1097  0008D0                     l1129:
  1098  0008D0  0E05               	movlw	5
  1099  0008D2  1818               	xorwf	printf@c,w,c
  1100  0008D4  B4D8               	btfsc	status,2,c
  1101  0008D6  D012               	goto	l1141
  1102                           
  1103                           ;doprnt.c: 1306: if(val < dpowers[c])
  1104  0008D8  5018               	movf	printf@c,w,c
  1105  0008DA  0D02               	mullw	2
  1106  0008DC  0E01               	movlw	low _dpowers
  1107  0008DE  24F3               	addwf	prodl,w,c
  1108  0008E0  6EF6               	movwf	tblptrl,c
  1109  0008E2  0E08               	movlw	high _dpowers
  1110  0008E4  20F4               	addwfc	prodh,w,c
  1111  0008E6  6EF7               	movwf	tblptrh,c
  1112  0008E8                     	if	0	;There are less than 3 active tblptr bytes
  1113  0008E8                     	endif
  1114  0008E8  0009               	tblrd		*+
  1115  0008EA  50F5               	movf	tablat,w,c
  1116  0008EC  5C16               	subwf	printf@val,w,c
  1117  0008EE  0009               	tblrd		*+
  1118  0008F0  50F5               	movf	tablat,w,c
  1119  0008F2  5817               	subwfb	printf@val+1,w,c
  1120  0008F4  A0D8               	btfss	status,0,c
  1121  0008F6  D002               	goto	l1141
  1122                           
  1123                           ;doprnt.c: 1307: break;
  1124  0008F8  2A18               	incf	printf@c,f,c
  1125  0008FA  D7EA               	goto	l1129
  1126  0008FC                     l1141:
  1127                           
  1128                           ;doprnt.c: 1422: {
  1129                           ;doprnt.c: 1438: if(flag & 0x03)
  1130  0008FC  C014  F011         	movff	printf@flag,??_printf
  1131  000900  0E03               	movlw	3
  1132  000902  1611               	andwf	??_printf,f,c
  1133  000904  B4D8               	btfsc	status,2,c
  1134  000906  D003               	goto	l1145
  1135                           
  1136                           ;doprnt.c: 1439: (putch('-') );
  1137  000908  0E2D               	movlw	45
  1138  00090A  EC8E  F006         	call	_putch
  1139  00090E                     l1145:
  1140                           
  1141                           ;doprnt.c: 1469: }
  1142                           ;doprnt.c: 1472: prec = c;
  1143  00090E  C018  F015         	movff	printf@c,printf@prec
  1144                           
  1145                           ;doprnt.c: 1474: while(prec--) {
  1146  000912  D024               	goto	l1151
  1147  000914                     l1147:
  1148                           
  1149                           ;doprnt.c: 1478: {
  1150                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1151  000914  5015               	movf	printf@prec,w,c
  1152  000916  0D02               	mullw	2
  1153  000918  0E01               	movlw	low _dpowers
  1154  00091A  24F3               	addwf	prodl,w,c
  1155  00091C  6EF6               	movwf	tblptrl,c
  1156  00091E  0E08               	movlw	high _dpowers
  1157  000920  20F4               	addwfc	prodh,w,c
  1158  000922  6EF7               	movwf	tblptrh,c
  1159  000924                     	if	0	;There are less than 3 active tblptr bytes
  1160  000924                     	endif
  1161  000924  0009               	tblrd		*+
  1162  000926  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1163  00092A  000A               	tblrd		*-
  1164  00092C  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1165  000930  C016  F001         	movff	printf@val,___lwdiv@dividend
  1166  000934  C017  F002         	movff	printf@val+1,___lwdiv@dividend+1
  1167  000938  ECF7  F005         	call	___lwdiv	;wreg free
  1168  00093C  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  1169  000940  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  1170  000944  0E00               	movlw	0
  1171  000946  6E0B               	movwf	___lwmod@divisor+1,c
  1172  000948  0E0A               	movlw	10
  1173  00094A  6E0A               	movwf	___lwmod@divisor,c
  1174  00094C  EC45  F006         	call	___lwmod	;wreg free
  1175  000950  5008               	movf	?___lwmod,w,c
  1176  000952  0F30               	addlw	48
  1177  000954  6E18               	movwf	printf@c,c
  1178                           
  1179                           ;doprnt.c: 1523: }
  1180                           ;doprnt.c: 1524: (putch(c) );
  1181  000956  5018               	movf	printf@c,w,c
  1182  000958  EC8E  F006         	call	_putch
  1183  00095C                     l1151:
  1184  00095C  0615               	decf	printf@prec,f,c
  1185  00095E  2815               	incf	printf@prec,w,c
  1186  000960  A4D8               	btfss	status,2,c
  1187  000962  D7D8               	goto	l1147
  1188  000964                     l1153:
  1189  000964  C00D  FFF6         	movff	printf@f,tblptrl
  1190  000968  C00E  FFF7         	movff	printf@f+1,tblptrh
  1191  00096C  4A0D               	infsnz	printf@f,f,c
  1192  00096E  2A0E               	incf	printf@f+1,f,c
  1193  000970                     	if	0	;tblptru may be non-zero
  1194  000970                     	endif
  1195  000970                     	if	0	;tblptru may be non-zero
  1196  000970                     	endif
  1197  000970  0008               	tblrd		*
  1198  000972  CFF5 F018          	movff	tablat,printf@c
  1199  000976  5018               	movf	printf@c,w,c
  1200  000978  B4D8               	btfsc	status,2,c
  1201  00097A  0012               	return	
  1202  00097C  D776               	goto	l1107
  1203  00097E                     __end_of_printf:
  1204                           	opt stack 0
  1205                           tblptru	equ	0xFF8
  1206                           tblptrh	equ	0xFF7
  1207                           tblptrl	equ	0xFF6
  1208                           tablat	equ	0xFF5
  1209                           prodh	equ	0xFF4
  1210                           prodl	equ	0xFF3
  1211                           intcon	equ	0xFF2
  1212                           postinc2	equ	0xFDE
  1213                           postdec2	equ	0xFDD
  1214                           fsr2h	equ	0xFDA
  1215                           fsr2l	equ	0xFD9
  1216                           status	equ	0xFD8
  1217                           
  1218 ;; *************** function _putch *****************
  1219 ;; Defined at:
  1220 ;;		line 104 in file "Serial.h"
  1221 ;; Parameters:    Size  Location     Type
  1222 ;;  c               1    wreg     unsigned char 
  1223 ;; Auto vars:     Size  Location     Type
  1224 ;;  c               1    0[COMRAM] unsigned char 
  1225 ;; Return value:  Size  Location     Type
  1226 ;;                  1    wreg      void 
  1227 ;; Registers used:
  1228 ;;		wreg
  1229 ;; Tracked objects:
  1230 ;;		On entry : 0/0
  1231 ;;		On exit  : 0/0
  1232 ;;		Unchanged: 0/0
  1233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1234 ;;      Params:         0       0       0       0       0       0       0       0       0
  1235 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1236 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1237 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1238 ;;Total ram usage:        1 bytes
  1239 ;; Hardware stack levels used:    1
  1240 ;; This function calls:
  1241 ;;		Nothing
  1242 ;; This function is called by:
  1243 ;;		_printf
  1244 ;; This function uses a non-reentrant model
  1245 ;;
  1246                           
  1247                           	psect	text5
  1248  000D1C                     __ptext5:
  1249                           	opt stack 0
  1250  000D1C                     _putch:
  1251                           	opt stack 29
  1252                           
  1253                           ;incstack = 0
  1254                           ;putch@c stored from wreg
  1255  000D1C  6E01               	movwf	putch@c,c
  1256                           
  1257                           ;Serial.h: 105: TXREG = c;
  1258  000D1E  C001  FFAD         	movff	putch@c,4013	;volatile
  1259  000D22                     l81:
  1260  000D22  B2AC               	btfsc	4012,1,c	;volatile
  1261  000D24  0012               	return	
  1262  000D26  D7FD               	goto	l81
  1263  000D28                     __end_of_putch:
  1264                           	opt stack 0
  1265                           tblptru	equ	0xFF8
  1266                           tblptrh	equ	0xFF7
  1267                           tblptrl	equ	0xFF6
  1268                           tablat	equ	0xFF5
  1269                           prodh	equ	0xFF4
  1270                           prodl	equ	0xFF3
  1271                           intcon	equ	0xFF2
  1272                           postinc2	equ	0xFDE
  1273                           postdec2	equ	0xFDD
  1274                           fsr2h	equ	0xFDA
  1275                           fsr2l	equ	0xFD9
  1276                           status	equ	0xFD8
  1277                           
  1278 ;; *************** function ___lwmod *****************
  1279 ;; Defined at:
  1280 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
  1281 ;; Parameters:    Size  Location     Type
  1282 ;;  dividend        2    7[COMRAM] unsigned int 
  1283 ;;  divisor         2    9[COMRAM] unsigned int 
  1284 ;; Auto vars:     Size  Location     Type
  1285 ;;  counter         1   11[COMRAM] unsigned char 
  1286 ;; Return value:  Size  Location     Type
  1287 ;;                  2    7[COMRAM] unsigned int 
  1288 ;; Registers used:
  1289 ;;		wreg, status,2, status,0
  1290 ;; Tracked objects:
  1291 ;;		On entry : 0/0
  1292 ;;		On exit  : 0/0
  1293 ;;		Unchanged: 0/0
  1294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1295 ;;      Params:         4       0       0       0       0       0       0       0       0
  1296 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1297 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1298 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1299 ;;Total ram usage:        5 bytes
  1300 ;; Hardware stack levels used:    1
  1301 ;; This function calls:
  1302 ;;		Nothing
  1303 ;; This function is called by:
  1304 ;;		_printf
  1305 ;; This function uses a non-reentrant model
  1306 ;;
  1307                           
  1308                           	psect	text6
  1309  000C8A                     __ptext6:
  1310                           	opt stack 0
  1311  000C8A                     ___lwmod:
  1312                           	opt stack 29
  1313                           
  1314                           ;incstack = 0
  1315  000C8A  500A               	movf	___lwmod@divisor,w,c
  1316  000C8C  100B               	iorwf	___lwmod@divisor+1,w,c
  1317  000C8E  B4D8               	btfsc	status,2,c
  1318  000C90  D018               	goto	l548
  1319  000C92  0E01               	movlw	1
  1320  000C94  6E0C               	movwf	___lwmod@counter,c
  1321  000C96  D004               	goto	l1051
  1322  000C98                     l1049:
  1323  000C98  90D8               	bcf	status,0,c
  1324  000C9A  360A               	rlcf	___lwmod@divisor,f,c
  1325  000C9C  360B               	rlcf	___lwmod@divisor+1,f,c
  1326  000C9E  2A0C               	incf	___lwmod@counter,f,c
  1327  000CA0                     l1051:
  1328  000CA0  AE0B               	btfss	___lwmod@divisor+1,7,c
  1329  000CA2  D7FA               	goto	l1049
  1330  000CA4                     l1053:
  1331  000CA4  500A               	movf	___lwmod@divisor,w,c
  1332  000CA6  5C08               	subwf	___lwmod@dividend,w,c
  1333  000CA8  500B               	movf	___lwmod@divisor+1,w,c
  1334  000CAA  5809               	subwfb	___lwmod@dividend+1,w,c
  1335  000CAC  A0D8               	btfss	status,0,c
  1336  000CAE  D004               	goto	l1057
  1337  000CB0  500A               	movf	___lwmod@divisor,w,c
  1338  000CB2  5E08               	subwf	___lwmod@dividend,f,c
  1339  000CB4  500B               	movf	___lwmod@divisor+1,w,c
  1340  000CB6  5A09               	subwfb	___lwmod@dividend+1,f,c
  1341  000CB8                     l1057:
  1342  000CB8  90D8               	bcf	status,0,c
  1343  000CBA  320B               	rrcf	___lwmod@divisor+1,f,c
  1344  000CBC  320A               	rrcf	___lwmod@divisor,f,c
  1345  000CBE  2E0C               	decfsz	___lwmod@counter,f,c
  1346  000CC0  D7F1               	goto	l1053
  1347  000CC2                     l548:
  1348  000CC2  C008  F008         	movff	___lwmod@dividend,?___lwmod
  1349  000CC6  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  1350  000CCA  0012               	return		;funcret
  1351  000CCC                     __end_of___lwmod:
  1352                           	opt stack 0
  1353                           tblptru	equ	0xFF8
  1354                           tblptrh	equ	0xFF7
  1355                           tblptrl	equ	0xFF6
  1356                           tablat	equ	0xFF5
  1357                           prodh	equ	0xFF4
  1358                           prodl	equ	0xFF3
  1359                           intcon	equ	0xFF2
  1360                           postinc2	equ	0xFDE
  1361                           postdec2	equ	0xFDD
  1362                           fsr2h	equ	0xFDA
  1363                           fsr2l	equ	0xFD9
  1364                           status	equ	0xFD8
  1365                           
  1366 ;; *************** function ___lwdiv *****************
  1367 ;; Defined at:
  1368 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwdiv.c"
  1369 ;; Parameters:    Size  Location     Type
  1370 ;;  dividend        2    0[COMRAM] unsigned int 
  1371 ;;  divisor         2    2[COMRAM] unsigned int 
  1372 ;; Auto vars:     Size  Location     Type
  1373 ;;  quotient        2    4[COMRAM] unsigned int 
  1374 ;;  counter         1    6[COMRAM] unsigned char 
  1375 ;; Return value:  Size  Location     Type
  1376 ;;                  2    0[COMRAM] unsigned int 
  1377 ;; Registers used:
  1378 ;;		wreg, status,2, status,0
  1379 ;; Tracked objects:
  1380 ;;		On entry : 0/0
  1381 ;;		On exit  : 0/0
  1382 ;;		Unchanged: 0/0
  1383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1384 ;;      Params:         4       0       0       0       0       0       0       0       0
  1385 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1386 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1387 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1388 ;;Total ram usage:        7 bytes
  1389 ;; Hardware stack levels used:    1
  1390 ;; This function calls:
  1391 ;;		Nothing
  1392 ;; This function is called by:
  1393 ;;		_printf
  1394 ;; This function uses a non-reentrant model
  1395 ;;
  1396                           
  1397                           	psect	text7
  1398  000BEE                     __ptext7:
  1399                           	opt stack 0
  1400  000BEE                     ___lwdiv:
  1401                           	opt stack 29
  1402                           
  1403                           ;incstack = 0
  1404  000BEE  0E00               	movlw	0
  1405  000BF0  6E06               	movwf	___lwdiv@quotient+1,c
  1406  000BF2  0E00               	movlw	0
  1407  000BF4  6E05               	movwf	___lwdiv@quotient,c
  1408  000BF6  5003               	movf	___lwdiv@divisor,w,c
  1409  000BF8  1004               	iorwf	___lwdiv@divisor+1,w,c
  1410  000BFA  B4D8               	btfsc	status,2,c
  1411  000BFC  D01C               	goto	l538
  1412  000BFE  0E01               	movlw	1
  1413  000C00  6E07               	movwf	___lwdiv@counter,c
  1414  000C02  D004               	goto	l1031
  1415  000C04                     l1029:
  1416  000C04  90D8               	bcf	status,0,c
  1417  000C06  3603               	rlcf	___lwdiv@divisor,f,c
  1418  000C08  3604               	rlcf	___lwdiv@divisor+1,f,c
  1419  000C0A  2A07               	incf	___lwdiv@counter,f,c
  1420  000C0C                     l1031:
  1421  000C0C  AE04               	btfss	___lwdiv@divisor+1,7,c
  1422  000C0E  D7FA               	goto	l1029
  1423  000C10                     l1033:
  1424  000C10  90D8               	bcf	status,0,c
  1425  000C12  3605               	rlcf	___lwdiv@quotient,f,c
  1426  000C14  3606               	rlcf	___lwdiv@quotient+1,f,c
  1427  000C16  5003               	movf	___lwdiv@divisor,w,c
  1428  000C18  5C01               	subwf	___lwdiv@dividend,w,c
  1429  000C1A  5004               	movf	___lwdiv@divisor+1,w,c
  1430  000C1C  5802               	subwfb	___lwdiv@dividend+1,w,c
  1431  000C1E  A0D8               	btfss	status,0,c
  1432  000C20  D005               	goto	l1041
  1433  000C22  5003               	movf	___lwdiv@divisor,w,c
  1434  000C24  5E01               	subwf	___lwdiv@dividend,f,c
  1435  000C26  5004               	movf	___lwdiv@divisor+1,w,c
  1436  000C28  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1437  000C2A  8005               	bsf	___lwdiv@quotient,0,c
  1438  000C2C                     l1041:
  1439  000C2C  90D8               	bcf	status,0,c
  1440  000C2E  3204               	rrcf	___lwdiv@divisor+1,f,c
  1441  000C30  3203               	rrcf	___lwdiv@divisor,f,c
  1442  000C32  2E07               	decfsz	___lwdiv@counter,f,c
  1443  000C34  D7ED               	goto	l1033
  1444  000C36                     l538:
  1445  000C36  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1446  000C3A  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1447  000C3E  0012               	return		;funcret
  1448  000C40                     __end_of___lwdiv:
  1449                           	opt stack 0
  1450                           tblptru	equ	0xFF8
  1451                           tblptrh	equ	0xFF7
  1452                           tblptrl	equ	0xFF6
  1453                           tablat	equ	0xFF5
  1454                           prodh	equ	0xFF4
  1455                           prodl	equ	0xFF3
  1456                           intcon	equ	0xFF2
  1457                           postinc2	equ	0xFDE
  1458                           postdec2	equ	0xFDD
  1459                           fsr2h	equ	0xFDA
  1460                           fsr2l	equ	0xFD9
  1461                           status	equ	0xFD8
  1462                           
  1463 ;; *************** function _printSerialnl *****************
  1464 ;; Defined at:
  1465 ;;		line 67 in file "Serial.h"
  1466 ;; Parameters:    Size  Location     Type
  1467 ;;  String          2    1[COMRAM] PTR unsigned char 
  1468 ;;		 -> STR_2(22), STR_1(18), 
  1469 ;; Auto vars:     Size  Location     Type
  1470 ;;  p               2    3[COMRAM] PTR unsigned char 
  1471 ;;		 -> STR_2(22), STR_1(18), 
  1472 ;; Return value:  Size  Location     Type
  1473 ;;                  1    wreg      void 
  1474 ;; Registers used:
  1475 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1476 ;; Tracked objects:
  1477 ;;		On entry : 0/0
  1478 ;;		On exit  : 0/0
  1479 ;;		Unchanged: 0/0
  1480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1481 ;;      Params:         2       0       0       0       0       0       0       0       0
  1482 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1483 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1484 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1485 ;;Total ram usage:        4 bytes
  1486 ;; Hardware stack levels used:    1
  1487 ;; Hardware stack levels required when called:    1
  1488 ;; This function calls:
  1489 ;;		_sendDataSerial
  1490 ;; This function is called by:
  1491 ;;		_main
  1492 ;; This function uses a non-reentrant model
  1493 ;;
  1494                           
  1495                           	psect	text8
  1496  000CCC                     __ptext8:
  1497                           	opt stack 0
  1498  000CCC                     _printSerialnl:
  1499                           	opt stack 29
  1500                           
  1501                           ;Serial.h: 69: char *p;
  1502                           ;Serial.h: 70: p = String;
  1503                           
  1504                           ;incstack = 0
  1505  000CCC  C002  F004         	movff	printSerialnl@String,printSerialnl@p
  1506  000CD0  C003  F005         	movff	printSerialnl@String+1,printSerialnl@p+1
  1507                           
  1508                           ;Serial.h: 71: while(*p != '\0'){
  1509  000CD4  D00A               	goto	l1085
  1510  000CD6                     l1081:
  1511                           
  1512                           ;Serial.h: 72: sendDataSerial(*p);
  1513  000CD6  C004  FFF6         	movff	printSerialnl@p,tblptrl
  1514  000CDA  C005  FFF7         	movff	printSerialnl@p+1,tblptrh
  1515  000CDE                     	if	0	;tblptru may be non-zero
  1516  000CDE                     	endif
  1517  000CDE                     	if	0	;tblptru may be non-zero
  1518  000CDE                     	endif
  1519  000CDE  0008               	tblrd		*
  1520  000CE0  50F5               	movf	tablat,w,c
  1521  000CE2  EC94  F006         	call	_sendDataSerial
  1522                           
  1523                           ;Serial.h: 73: p++;
  1524  000CE6  4A04               	infsnz	printSerialnl@p,f,c
  1525  000CE8  2A05               	incf	printSerialnl@p+1,f,c
  1526  000CEA                     l1085:
  1527  000CEA  C004  FFF6         	movff	printSerialnl@p,tblptrl
  1528  000CEE  C005  FFF7         	movff	printSerialnl@p+1,tblptrh
  1529  000CF2                     	if	0	;tblptru may be non-zero
  1530  000CF2                     	endif
  1531  000CF2                     	if	0	;tblptru may be non-zero
  1532  000CF2                     	endif
  1533  000CF2  0008               	tblrd		*
  1534  000CF4  50F5               	movf	tablat,w,c
  1535  000CF6  0900               	iorlw	0
  1536  000CF8  A4D8               	btfss	status,2,c
  1537  000CFA  D7ED               	goto	l1081
  1538                           
  1539                           ;Serial.h: 74: }
  1540                           ;Serial.h: 75: sendDataSerial('\n');
  1541  000CFC  0E0A               	movlw	10
  1542  000CFE  EC94  F006         	call	_sendDataSerial
  1543                           
  1544                           ;Serial.h: 76: sendDataSerial('\r');
  1545  000D02  0E0D               	movlw	13
  1546  000D04  EC94  F006         	call	_sendDataSerial
  1547  000D08  0012               	return		;funcret
  1548  000D0A                     __end_of_printSerialnl:
  1549                           	opt stack 0
  1550                           tblptru	equ	0xFF8
  1551                           tblptrh	equ	0xFF7
  1552                           tblptrl	equ	0xFF6
  1553                           tablat	equ	0xFF5
  1554                           prodh	equ	0xFF4
  1555                           prodl	equ	0xFF3
  1556                           intcon	equ	0xFF2
  1557                           postinc2	equ	0xFDE
  1558                           postdec2	equ	0xFDD
  1559                           fsr2h	equ	0xFDA
  1560                           fsr2l	equ	0xFD9
  1561                           status	equ	0xFD8
  1562                           
  1563 ;; *************** function _sendDataSerial *****************
  1564 ;; Defined at:
  1565 ;;		line 51 in file "Serial.h"
  1566 ;; Parameters:    Size  Location     Type
  1567 ;;  c               1    wreg     unsigned char 
  1568 ;; Auto vars:     Size  Location     Type
  1569 ;;  c               1    0[COMRAM] unsigned char 
  1570 ;; Return value:  Size  Location     Type
  1571 ;;                  1    wreg      void 
  1572 ;; Registers used:
  1573 ;;		wreg
  1574 ;; Tracked objects:
  1575 ;;		On entry : 0/0
  1576 ;;		On exit  : 0/0
  1577 ;;		Unchanged: 0/0
  1578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1579 ;;      Params:         0       0       0       0       0       0       0       0       0
  1580 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1581 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1582 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1583 ;;Total ram usage:        1 bytes
  1584 ;; Hardware stack levels used:    1
  1585 ;; This function calls:
  1586 ;;		Nothing
  1587 ;; This function is called by:
  1588 ;;		_printSerialnl
  1589 ;;		_printSerial
  1590 ;; This function uses a non-reentrant model
  1591 ;;
  1592                           
  1593                           	psect	text9
  1594  000D28                     __ptext9:
  1595                           	opt stack 0
  1596  000D28                     _sendDataSerial:
  1597                           	opt stack 29
  1598                           
  1599                           ;incstack = 0
  1600                           ;sendDataSerial@c stored from wreg
  1601  000D28  6E01               	movwf	sendDataSerial@c,c
  1602                           
  1603                           ;Serial.h: 53: TXREG = c;
  1604  000D2A  C001  FFAD         	movff	sendDataSerial@c,4013	;volatile
  1605  000D2E                     l48:
  1606  000D2E  B2AC               	btfsc	4012,1,c	;volatile
  1607  000D30  0012               	return	
  1608  000D32  D7FD               	goto	l48
  1609  000D34                     __end_of_sendDataSerial:
  1610                           	opt stack 0
  1611                           tblptru	equ	0xFF8
  1612                           tblptrh	equ	0xFF7
  1613                           tblptrl	equ	0xFF6
  1614                           tablat	equ	0xFF5
  1615                           prodh	equ	0xFF4
  1616                           prodl	equ	0xFF3
  1617                           intcon	equ	0xFF2
  1618                           postinc2	equ	0xFDE
  1619                           postdec2	equ	0xFDD
  1620                           fsr2h	equ	0xFDA
  1621                           fsr2l	equ	0xFD9
  1622                           status	equ	0xFD8
  1623                           
  1624 ;; *************** function _configADC *****************
  1625 ;; Defined at:
  1626 ;;		line 79 in file "main.c"
  1627 ;; Parameters:    Size  Location     Type
  1628 ;;		None
  1629 ;; Auto vars:     Size  Location     Type
  1630 ;;		None
  1631 ;; Return value:  Size  Location     Type
  1632 ;;                  1    wreg      void 
  1633 ;; Registers used:
  1634 ;;		wreg, status,2
  1635 ;; Tracked objects:
  1636 ;;		On entry : 0/0
  1637 ;;		On exit  : 0/0
  1638 ;;		Unchanged: 0/0
  1639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1640 ;;      Params:         0       0       0       0       0       0       0       0       0
  1641 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1642 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1643 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1644 ;;Total ram usage:        0 bytes
  1645 ;; Hardware stack levels used:    1
  1646 ;; This function calls:
  1647 ;;		Nothing
  1648 ;; This function is called by:
  1649 ;;		_main
  1650 ;; This function uses a non-reentrant model
  1651 ;;
  1652                           
  1653                           	psect	text10
  1654  000D0A                     __ptext10:
  1655                           	opt stack 0
  1656  000D0A                     _configADC:
  1657                           	opt stack 30
  1658                           
  1659                           ;main.c: 80: ADCON0bits.ADON = 0;
  1660                           
  1661                           ;incstack = 0
  1662  000D0A  90C2               	bcf	4034,0,c	;volatile
  1663                           
  1664                           ;main.c: 81: ADCON0bits.GODONE = 0;
  1665  000D0C  92C2               	bcf	4034,1,c	;volatile
  1666                           
  1667                           ;main.c: 82: ADCON1 = 0b1100;
  1668  000D0E  0E0C               	movlw	12
  1669  000D10  6EC1               	movwf	4033,c	;volatile
  1670                           
  1671                           ;main.c: 84: ADCON2 = 0b10010010;
  1672  000D12  0E92               	movlw	146
  1673  000D14  6EC0               	movwf	4032,c	;volatile
  1674                           
  1675                           ;main.c: 85: TRISA = 1;
  1676  000D16  0E01               	movlw	1
  1677  000D18  6E92               	movwf	3986,c	;volatile
  1678  000D1A  0012               	return		;funcret
  1679  000D1C                     __end_of_configADC:
  1680                           	opt stack 0
  1681                           tblptru	equ	0xFF8
  1682                           tblptrh	equ	0xFF7
  1683                           tblptrl	equ	0xFF6
  1684                           tablat	equ	0xFF5
  1685                           prodh	equ	0xFF4
  1686                           prodl	equ	0xFF3
  1687                           intcon	equ	0xFF2
  1688                           postinc2	equ	0xFDE
  1689                           postdec2	equ	0xFDD
  1690                           fsr2h	equ	0xFDA
  1691                           fsr2l	equ	0xFD9
  1692                           status	equ	0xFD8
  1693                           tblptru	equ	0xFF8
  1694                           tblptrh	equ	0xFF7
  1695                           tblptrl	equ	0xFF6
  1696                           tablat	equ	0xFF5
  1697                           prodh	equ	0xFF4
  1698                           prodl	equ	0xFF3
  1699                           intcon	equ	0xFF2
  1700                           postinc2	equ	0xFDE
  1701                           postdec2	equ	0xFDD
  1702                           fsr2h	equ	0xFDA
  1703                           fsr2l	equ	0xFD9
  1704                           status	equ	0xFD8
  1705                           
  1706                           	psect	rparam
  1707  0000                     tblptru	equ	0xFF8
  1708                           tblptrh	equ	0xFF7
  1709                           tblptrl	equ	0xFF6
  1710                           tablat	equ	0xFF5
  1711                           prodh	equ	0xFF4
  1712                           prodl	equ	0xFF3
  1713                           intcon	equ	0xFF2
  1714                           postinc2	equ	0xFDE
  1715                           postdec2	equ	0xFDD
  1716                           fsr2h	equ	0xFDA
  1717                           fsr2l	equ	0xFD9
  1718                           status	equ	0xFD8


Data Sizes:
    Strings     84
    Constant    10
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     30      30
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           244      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 41
		 -> STR_5(CODE[3]), STR_4(CODE[3]), STR_3(CODE[41]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    printSerialnl@String	PTR unsigned char  size(2) Largest target is 22
		 -> STR_2(CODE[22]), STR_1(CODE[18]), 

    printSerialnl@p	PTR unsigned char  size(2) Largest target is 22
		 -> STR_2(CODE[22]), STR_1(CODE[18]), 


Critical Paths under _main in COMRAM

    _main->_startSerial
    _startSerial->___aldiv
    _printf->___lwmod
    ___lwmod->___lwdiv
    _printSerialnl->_sendDataSerial

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3123
                          _configADC
                      _printSerialnl
                             _printf
                            _readADC
                        _startSerial
 ---------------------------------------------------------------------------------
 (1) _startSerial                                         20    10     10    1482
                                             14 COMRAM    16     6     10
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     908
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _readADC                                              4     2      2     152
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    1254
                                             12 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _printSerialnl                                        4     2      2     235
                                              1 COMRAM     4     2      2
                     _sendDataSerial
 ---------------------------------------------------------------------------------
 (2) _sendDataSerial                                       1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _configADC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _configADC
   _printSerialnl
     _sendDataSerial
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
     _readADC (ARG)
   _readADC
   _startSerial
     ___aldiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     1E      1E       1       31.6%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
DATA                 0      0       0       4        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0       0       6        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK3            F4      0       0      11        0.0%
BANK3               F4      0       0      12        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BIGRAM_1           400      0       0      21        0.0%
BIGRAM             3F3      0       0      22        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Jul 10 19:23:15 2018

                     l41 098A                       l42 098C                       l43 0A18  
                     l48 0D2E                       l81 0D22                       l91 0C42  
                     l92 0C6E                       l94 0C72              __CFG_BOR$ON 000000  
            __CFG_BORV$3 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000              _startSerial 097E             __CFG_CP3$OFF 000000  
            __CFG_LVP$ON 000000                      l538 0C36                      l548 0CC2  
                    l993 0ABA                      l987 0AA2                      l999 0ADC  
           __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000             __CFG_WDT$OFF 000000  
                   l1001 0AE8                     l1011 0B1C                     l1003 0AEC  
                   l1031 0C0C                     l1111 087A                     l1015 0B2A  
                   l1041 0C2C                     l1033 0C10                     l1051 0CA0  
                   l1107 086A                     l1019 0B40                     l1029 0C04  
                   l1053 0CA4                     l1141 08FC                     l1117 08A4  
                   l1151 095C                     l1127 08CC                     l1081 0CD6  
                   l1057 0CB8                     l1049 0C98                     l1145 090E  
                   l1129 08D0                     l1153 0964                     l1147 0914  
                   l1091 0C48                     l1085 0CEA                     l1165 0BAC  
                   l1095 0C50                     STR_1 084A                     STR_2 0834  
                   STR_3 080B                     STR_4 085C                     STR_5 085C  
        sendDataSerial@c 0001   __end_of_sendDataSerial 0D34                     _main 0B52  
                   fsr2h 000FDA                     fsr2l 000FD9                     prodh 000FF4  
                   prodl 000FF3                     start 0002            __CFG_IESO$OFF 000000  
          __CFG_MCLRE$ON 000000             ___param_bank 000000      printSerialnl@String 0002  
          __CFG_PLLDIV$5 000000           __CFG_CCP2MX$ON 000000          __end_of___aldiv 0B52  
                  ?_main 0001          __end_of___lwdiv 0C40          __end_of___lwmod 0CCC  
                  _RCREG 000FAE                    _SPBRG 000FAF            __CFG_USBDIV$1 000000  
                  _TRISA 000F92          ??_printSerialnl 0004                    _TXREG 000FAD  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000          __end_of_readADC 0C8A           __CFG_EBTRB$OFF 000000  
        __end_of_dpowers 080B                    _putch 0D1C                    tablat 000FF5  
        ?_sendDataSerial 0001                    status 000FD8           __CFG_ICPRT$OFF 000000  
         __CFG_PBADEN$ON 000000          __initialization 0D34             __end_of_main 0BEE  
                 ??_main 001F            __activetblptr 000002           printSerialnl@p 0004  
                 _ADCON0 000FC2                   _ADCON1 000FC1                   _ADCON2 000FC0  
                 _ADRESH 000FC4                   _ADRESL 000FC3                   ?_putch 0001  
                 _SPBRGH 000FB0           __CFG_XINST$OFF 000000                ??___aldiv 0009  
         __CFG_STVREN$ON 000000             startSerial@n 001D                ??___lwdiv 0005  
              ??___lwmod 000C                   _printf 0860                ??_readADC 0003  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                   putch@c 0001               __accesstop 0060  
__end_of__initialization 0D34            ___rparam_used 000001           __pcstackCOMRAM 0001  
          __end_of_putch 0D28             ?_startSerial 000F       __size_of_configADC 0012  
                ??_putch 0001                  ?_printf 000D         ??_sendDataSerial 0001  
        __CFG_VREGEN$OFF 000000                  __Hparam 0000                  __Lparam 0000  
      __end_of_configADC 0D1C                  ___aldiv 0A86                  ___lwdiv 0BEE  
                ___lwmod 0C8A             __psmallconst 0800                  __pcinit 0D34  
                __ramtop 0800                  __ptext0 0B52                  __ptext1 097E  
                __ptext2 0A86                  __ptext3 0C40                  __ptext4 0860  
                __ptext5 0D1C                  __ptext6 0C8A                  __ptext7 0BEE  
                __ptext8 0CCC                  __ptext9 0D28          __size_of_printf 011E  
                _readADC 0C40                  _dpowers 0801         ___aldiv@dividend 0001  
  __end_of_printSerialnl 0D0A     end_of_initialization 0D34            __Lmediumconst 0000  
              _RCSTAbits 000FAB                  printf@c 0018                  printf@f 000D  
       ___aldiv@quotient 000B                  postdec2 000FDD                  postinc2 000FDE  
   __size_of_startSerial 0108                _TRISCbits 000F94                _TXSTAbits 000FAC  
            _BAUDCONbits 000FB8           __end_of_printf 097E         _startSerial$1087 0019  
    start_initialization 0D34      startSerial@baudrate 000F         __CFG_LPT1OSC$OFF 000000  
               ??_printf 0011        startSerial@brg_16 0017          startSerial@FOSC 0011  
        startSerial@mode 0015         ___lwdiv@dividend 0001                 ?___aldiv 0001  
               ?___lwdiv 0001                 ?___lwmod 0008                _configADC 0D0A  
               ?_readADC 0001              __smallconst 0800         ___lwdiv@quotient 0005  
         __size_of_putch 000C          ___aldiv@divisor 0005          ___aldiv@counter 0009  
               _PIE1bits 000F9D                 _PIR1bits 000F9E         __CFG_WDTPS$32768 000000  
             ?_configADC 0001               _ADCON0bits 000FC2               printf@flag 0014  
             printf@prec 0015  __size_of_sendDataSerial 000C                 __Hrparam 0000  
               __Lrparam 0000   __size_of_printSerialnl 003E         __size_of___aldiv 00CC  
       __size_of___lwdiv 0052         __size_of___lwmod 0042           readADC@channel 0001  
          ??_startSerial 0019         __size_of_readADC 004A          ___lwdiv@divisor 0003  
        ___lwdiv@counter 0007                 __ptext10 0D0A            __size_of_main 009C  
            ??_configADC 0001                printf@val 0016    __CFG_CPUDIV$OSC3_PLL4 000000  
             _INTCONbits 000FF2      __end_of_startSerial 0A86            _printSerialnl 0CCC  
       ___lwmod@dividend 0008                 printf@ap 0012          ___lwmod@divisor 000A  
        ___lwmod@counter 000C             ___aldiv@sign 000A           ?_printSerialnl 0002  
     __CFG_FOSC$HSPLL_HS 000000           _sendDataSerial 0D28  
