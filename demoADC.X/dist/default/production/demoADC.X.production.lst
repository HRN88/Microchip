

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Wed Jul 11 19:45:48 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    21                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    29                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    30  0000                     
    31                           ; Version 1.42
    32                           ; Generated 13/04/2017 GMT
    33                           ; 
    34                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F4550 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     
    66                           	psect	smallconst
    67  000800                     __psmallconst:
    68                           	opt stack 0
    69  000800  00                 	db	0
    70  000801                     _dpowers:
    71                           	opt stack 0
    72  000801  0001               	dw	1
    73  000803  000A               	dw	10
    74  000805  0064               	dw	100
    75  000807  03E8               	dw	1000
    76  000809  2710               	dw	10000
    77  00080B                     __end_of_dpowers:
    78                           	opt stack 0
    79  0000                     _ADRESL	set	4035
    80  0000                     _ADRESH	set	4036
    81  0000                     _ADCON0bits	set	4034
    82  0000                     _ADCON0	set	4034
    83  0000                     _TRISA	set	3986
    84  0000                     _ADCON2	set	4032
    85  0000                     _ADCON1	set	4033
    86  0000                     _RCREG	set	4014
    87  0000                     _PIR1bits	set	3998
    88  0000                     _TXREG	set	4013
    89  0000                     _SPBRGH	set	4016
    90  0000                     _SPBRG	set	4015
    91  0000                     _BAUDCONbits	set	4024
    92  0000                     _INTCONbits	set	4082
    93  0000                     _PIE1bits	set	3997
    94  0000                     _TRISCbits	set	3988
    95  0000                     _RCSTAbits	set	4011
    96  0000                     _TXSTAbits	set	4012
    97  00080B                     STR_4:
    98  00080B  45                 	db	69	;'E'
    99  00080C  73                 	db	115	;'s'
   100  00080D  74                 	db	116	;'t'
   101  00080E  61                 	db	97	;'a'
   102  00080F  20                 	db	32
   103  000810  65                 	db	101	;'e'
   104  000811  73                 	db	115	;'s'
   105  000812  20                 	db	32
   106  000813  75                 	db	117	;'u'
   107  000814  6E                 	db	110	;'n'
   108  000815  61                 	db	97	;'a'
   109  000816  20                 	db	32
   110  000817  70                 	db	112	;'p'
   111  000818  72                 	db	114	;'r'
   112  000819  75                 	db	117	;'u'
   113  00081A  65                 	db	101	;'e'
   114  00081B  62                 	db	98	;'b'
   115  00081C  61                 	db	97	;'a'
   116  00081D  20                 	db	32
   117  00081E  25                 	db	37
   118  00081F  64                 	db	100	;'d'
   119  000820  20                 	db	32
   120  000821  65                 	db	101	;'e'
   121  000822  73                 	db	115	;'s'
   122  000823  74                 	db	116	;'t'
   123  000824  65                 	db	101	;'e'
   124  000825  20                 	db	32
   125  000826  65                 	db	101	;'e'
   126  000827  73                 	db	115	;'s'
   127  000828  20                 	db	32
   128  000829  6F                 	db	111	;'o'
   129  00082A  74                 	db	116	;'t'
   130  00082B  72                 	db	114	;'r'
   131  00082C  6F                 	db	111	;'o'
   132  00082D  20                 	db	32
   133  00082E  76                 	db	118	;'v'
   134  00082F  61                 	db	97	;'a'
   135  000830  6C                 	db	108	;'l'
   136  000831  6F                 	db	111	;'o'
   137  000832  72                 	db	114	;'r'
   138  000833  00                 	db	0
   139  000834                     STR_3:
   140  000834  41                 	db	65	;'A'
   141  000835  44                 	db	68	;'D'
   142  000836  43                 	db	67	;'C'
   143  000837  20                 	db	32
   144  000838  6D                 	db	109	;'m'
   145  000839  6F                 	db	111	;'o'
   146  00083A  64                 	db	100	;'d'
   147  00083B  75                 	db	117	;'u'
   148  00083C  6C                 	db	108	;'l'
   149  00083D  65                 	db	101	;'e'
   150  00083E  20                 	db	32
   151  00083F  73                 	db	115	;'s'
   152  000840  74                 	db	116	;'t'
   153  000841  61                 	db	97	;'a'
   154  000842  72                 	db	114	;'r'
   155  000843  74                 	db	116	;'t'
   156  000844  65                 	db	101	;'e'
   157  000845  64                 	db	100	;'d'
   158  000846  2E                 	db	46
   159  000847  2E                 	db	46
   160  000848  2E                 	db	46
   161  000849  00                 	db	0
   162  00084A                     STR_2:
   163  00084A  4C                 	db	76	;'L'
   164  00084B  6F                 	db	111	;'o'
   165  00084C  61                 	db	97	;'a'
   166  00084D  64                 	db	100	;'d'
   167  00084E  69                 	db	105	;'i'
   168  00084F  6E                 	db	110	;'n'
   169  000850  67                 	db	103	;'g'
   170  000851  20                 	db	32
   171  000852  73                 	db	115	;'s'
   172  000853  79                 	db	121	;'y'
   173  000854  73                 	db	115	;'s'
   174  000855  74                 	db	116	;'t'
   175  000856  65                 	db	101	;'e'
   176  000857  6D                 	db	109	;'m'
   177  000858  2E                 	db	46
   178  000859  2E                 	db	46
   179  00085A  2E                 	db	46
   180  00085B  00                 	db	0
   181  00085C                     STR_1:
   182  00085C  20                 	db	32
   183  00085D  25                 	db	37
   184  00085E  64                 	db	100	;'d'
   185  00085F  00                 	db	0
   186                           
   187                           ; #config settings
   188  000860  00                 	db	0	; dummy byte at the end
   189  0000                     
   190                           	psect	cinit
   191  000F54                     __pcinit:
   192                           	opt stack 0
   193  000F54                     start_initialization:
   194                           	opt stack 0
   195  000F54                     __initialization:
   196                           	opt stack 0
   197  000F54                     end_of_initialization:
   198                           	opt stack 0
   199  000F54                     __end_of__initialization:
   200                           	opt stack 0
   201  000F54  9037               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   202  000F56  9237               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   203  000F58  0E00               	movlw	low (__Lmediumconst shr (0+16))
   204  000F5A  6EF8               	movwf	tblptru,c
   205  000F5C  0100               	movlb	0
   206  000F5E  EF99  F006         	goto	_main	;jump to C main() function
   207                           tblptru	equ	0xFF8
   208                           
   209                           	psect	cstackBANK0
   210  000060                     __pcstackBANK0:
   211                           	opt stack 0
   212  000060                     ?_printf:
   213                           	opt stack 0
   214  000060                     startSerial@baudrate:
   215                           	opt stack 0
   216  000060                     printf@f:
   217                           	opt stack 0
   218                           
   219                           ; 2 bytes @ 0x0
   220  000060                     	ds	2
   221  000062                     startSerial@FOSC:
   222                           	opt stack 0
   223                           
   224                           ; 4 bytes @ 0x2
   225  000062                     	ds	2
   226  000064                     printf@ap:
   227                           	opt stack 0
   228                           
   229                           ; 2 bytes @ 0x4
   230  000064                     	ds	2
   231  000066                     printf@flag:
   232                           	opt stack 0
   233  000066                     startSerial@mode:
   234                           	opt stack 0
   235                           
   236                           ; 2 bytes @ 0x6
   237  000066                     	ds	1
   238  000067                     printf@prec:
   239                           	opt stack 0
   240                           
   241                           ; 1 bytes @ 0x7
   242  000067                     	ds	1
   243  000068                     startSerial@brg_16:
   244                           	opt stack 0
   245  000068                     printf@val:
   246                           	opt stack 0
   247                           
   248                           ; 2 bytes @ 0x8
   249  000068                     	ds	2
   250  00006A                     printf@c:
   251                           	opt stack 0
   252  00006A                     _startSerial$1097:
   253                           	opt stack 0
   254                           
   255                           ; 4 bytes @ 0xA
   256  00006A                     	ds	4
   257  00006E                     startSerial@n:
   258                           	opt stack 0
   259                           
   260                           ; 2 bytes @ 0xE
   261  00006E                     	ds	2
   262                           tblptru	equ	0xFF8
   263                           
   264                           	psect	cstackCOMRAM
   265  000001                     __pcstackCOMRAM:
   266                           	opt stack 0
   267  000001                     ?i2___lwdiv:
   268                           	opt stack 0
   269  000001                     i2putch@c:
   270                           	opt stack 0
   271  000001                     i2___lwdiv@dividend:
   272                           	opt stack 0
   273                           
   274                           ; 2 bytes @ 0x0
   275  000001                     	ds	2
   276  000003                     i2___lwdiv@divisor:
   277                           	opt stack 0
   278                           
   279                           ; 2 bytes @ 0x2
   280  000003                     	ds	2
   281  000005                     i2___lwdiv@quotient:
   282                           	opt stack 0
   283                           
   284                           ; 2 bytes @ 0x4
   285  000005                     	ds	2
   286  000007                     i2___lwdiv@counter:
   287                           	opt stack 0
   288                           
   289                           ; 1 bytes @ 0x6
   290  000007                     	ds	1
   291  000008                     ?i2___lwmod:
   292                           	opt stack 0
   293  000008                     i2___lwmod@dividend:
   294                           	opt stack 0
   295                           
   296                           ; 2 bytes @ 0x7
   297  000008                     	ds	2
   298  00000A                     i2___lwmod@divisor:
   299                           	opt stack 0
   300                           
   301                           ; 2 bytes @ 0x9
   302  00000A                     	ds	2
   303  00000C                     i2___lwmod@counter:
   304                           	opt stack 0
   305                           
   306                           ; 1 bytes @ 0xB
   307  00000C                     	ds	1
   308  00000D                     ?i2_printf:
   309                           	opt stack 0
   310  00000D                     i2printf@f:
   311                           	opt stack 0
   312                           
   313                           ; 2 bytes @ 0xC
   314  00000D                     	ds	4
   315  000011                     ??i2_printf:
   316                           
   317                           ; 1 bytes @ 0x10
   318  000011                     	ds	1
   319  000012                     i2printf@ap:
   320                           	opt stack 0
   321                           
   322                           ; 2 bytes @ 0x11
   323  000012                     	ds	2
   324  000014                     i2printf@flag:
   325                           	opt stack 0
   326                           
   327                           ; 1 bytes @ 0x13
   328  000014                     	ds	1
   329  000015                     i2printf@prec:
   330                           	opt stack 0
   331                           
   332                           ; 1 bytes @ 0x14
   333  000015                     	ds	1
   334  000016                     i2printf@val:
   335                           	opt stack 0
   336                           
   337                           ; 2 bytes @ 0x15
   338  000016                     	ds	2
   339  000018                     i2printf@c:
   340                           	opt stack 0
   341                           
   342                           ; 1 bytes @ 0x17
   343  000018                     	ds	1
   344  000019                     ??_auxRead:
   345                           
   346                           ; 1 bytes @ 0x18
   347  000019                     	ds	2
   348  00001B                     ??_ISR:
   349                           
   350                           ; 1 bytes @ 0x1A
   351  00001B                     	ds	14
   352  000029                     ?___lwdiv:
   353                           	opt stack 0
   354  000029                     ?___aldiv:
   355                           	opt stack 0
   356  000029                     sendDataSerial@c:
   357                           	opt stack 0
   358  000029                     putch@c:
   359                           	opt stack 0
   360  000029                     readADC@channel:
   361                           	opt stack 0
   362  000029                     ___lwdiv@dividend:
   363                           	opt stack 0
   364  000029                     ___aldiv@dividend:
   365                           	opt stack 0
   366                           
   367                           ; 4 bytes @ 0x28
   368  000029                     	ds	1
   369  00002A                     printSerialnl@String:
   370                           	opt stack 0
   371                           
   372                           ; 2 bytes @ 0x29
   373  00002A                     	ds	1
   374  00002B                     ___lwdiv@divisor:
   375                           	opt stack 0
   376                           
   377                           ; 2 bytes @ 0x2A
   378  00002B                     	ds	1
   379  00002C                     printSerialnl@p:
   380                           	opt stack 0
   381                           
   382                           ; 2 bytes @ 0x2B
   383  00002C                     	ds	1
   384  00002D                     ___lwdiv@quotient:
   385                           	opt stack 0
   386  00002D                     ___aldiv@divisor:
   387                           	opt stack 0
   388                           
   389                           ; 4 bytes @ 0x2C
   390  00002D                     	ds	2
   391  00002F                     ___lwdiv@counter:
   392                           	opt stack 0
   393                           
   394                           ; 1 bytes @ 0x2E
   395  00002F                     	ds	1
   396  000030                     ?___lwmod:
   397                           	opt stack 0
   398  000030                     ___lwmod@dividend:
   399                           	opt stack 0
   400                           
   401                           ; 2 bytes @ 0x2F
   402  000030                     	ds	1
   403  000031                     ___aldiv@counter:
   404                           	opt stack 0
   405                           
   406                           ; 1 bytes @ 0x30
   407  000031                     	ds	1
   408  000032                     ___aldiv@sign:
   409                           	opt stack 0
   410  000032                     ___lwmod@divisor:
   411                           	opt stack 0
   412                           
   413                           ; 2 bytes @ 0x31
   414  000032                     	ds	1
   415  000033                     ___aldiv@quotient:
   416                           	opt stack 0
   417                           
   418                           ; 4 bytes @ 0x32
   419  000033                     	ds	1
   420  000034                     ___lwmod@counter:
   421                           	opt stack 0
   422                           
   423                           ; 1 bytes @ 0x33
   424  000034                     	ds	1
   425  000035                     ??_printf:
   426                           
   427                           ; 1 bytes @ 0x34
   428  000035                     	ds	2
   429  000037                     tblptru	equ	0xFF8
   430                           
   431                           ; 1 bytes @ 0x36
   432 ;;
   433 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   434 ;;
   435 ;; *************** function _main *****************
   436 ;; Defined at:
   437 ;;		line 133 in file "main.c"
   438 ;; Parameters:    Size  Location     Type
   439 ;;		None
   440 ;; Auto vars:     Size  Location     Type
   441 ;;		None
   442 ;; Return value:  Size  Location     Type
   443 ;;                  1    wreg      void 
   444 ;; Registers used:
   445 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   446 ;; Tracked objects:
   447 ;;		On entry : 0/0
   448 ;;		On exit  : 0/0
   449 ;;		Unchanged: 0/0
   450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   451 ;;      Params:         0       0       0       0       0       0       0       0       0
   452 ;;      Locals:         0       0       0       0       0       0       0       0       0
   453 ;;      Temps:          0       0       0       0       0       0       0       0       0
   454 ;;      Totals:         0       0       0       0       0       0       0       0       0
   455 ;;Total ram usage:        0 bytes
   456 ;; Hardware stack levels required when called:    6
   457 ;; This function calls:
   458 ;;		_configADC
   459 ;;		_printSerialnl
   460 ;;		_printf
   461 ;;		_readADC
   462 ;;		_startSerial
   463 ;; This function is called by:
   464 ;;		Startup code after reset
   465 ;; This function uses a non-reentrant model
   466 ;;
   467                           
   468                           	psect	text0
   469  000D32                     __ptext0:
   470                           	opt stack 0
   471  000D32                     _main:
   472                           	opt stack 25
   473                           
   474                           ;main.c: 134: startSerial(9600, 24000000, 0, 0);
   475                           
   476                           ;incstack = 0
   477  000D32  0E25               	movlw	37
   478  000D34  0100               	movlb	0	; () banked
   479  000D36  6F61               	movwf	(startSerial@baudrate+1)& (0+255),b
   480  000D38  0E80               	movlw	128
   481  000D3A  6F60               	movwf	startSerial@baudrate& (0+255),b
   482  000D3C  0E00               	movlw	0
   483  000D3E  0100               	movlb	0	; () banked
   484  000D40  6F62               	movwf	startSerial@FOSC& (0+255),b
   485  000D42  0E36               	movlw	54
   486  000D44  6F63               	movwf	(startSerial@FOSC+1)& (0+255),b
   487  000D46  0E6E               	movlw	110
   488  000D48  6F64               	movwf	(startSerial@FOSC+2)& (0+255),b
   489  000D4A  0E01               	movlw	1
   490  000D4C  6F65               	movwf	(startSerial@FOSC+3)& (0+255),b
   491  000D4E  0E00               	movlw	0
   492  000D50  0100               	movlb	0	; () banked
   493  000D52  6F67               	movwf	(startSerial@mode+1)& (0+255),b
   494  000D54  0E00               	movlw	0
   495  000D56  6F66               	movwf	startSerial@mode& (0+255),b
   496  000D58  0E00               	movlw	0
   497  000D5A  0100               	movlb	0	; () banked
   498  000D5C  6F69               	movwf	(startSerial@brg_16+1)& (0+255),b
   499  000D5E  0E00               	movlw	0
   500  000D60  6F68               	movwf	startSerial@brg_16& (0+255),b
   501  000D62  EC67  F005         	call	_startSerial	;wreg free
   502                           
   503                           ;main.c: 136: printSerialnl("Loading system...");
   504  000D66  0E4A               	movlw	low STR_2
   505  000D68  6E2A               	movwf	printSerialnl@String,c
   506  000D6A  0E08               	movlw	high STR_2
   507  000D6C  6E2B               	movwf	printSerialnl@String+1,c
   508  000D6E  EC68  F007         	call	_printSerialnl	;wreg free
   509                           
   510                           ;main.c: 138: configADC();
   511  000D72  EC97  F007         	call	_configADC	;wreg free
   512                           
   513                           ;main.c: 140: printSerialnl("ADC module started...");
   514  000D76  0E34               	movlw	low STR_3
   515  000D78  6E2A               	movwf	printSerialnl@String,c
   516  000D7A  0E08               	movlw	high STR_3
   517  000D7C  6E2B               	movwf	printSerialnl@String+1,c
   518  000D7E  EC68  F007         	call	_printSerialnl	;wreg free
   519                           
   520                           ;main.c: 141: printf("Esta es una prueba %d este es otro valor", ADCON2);
   521  000D82  0E0B               	movlw	low STR_4
   522  000D84  0100               	movlb	0	; () banked
   523  000D86  6F60               	movwf	printf@f& (0+255),b
   524  000D88  0E08               	movlw	high STR_4
   525  000D8A  0100               	movlb	0	; () banked
   526  000D8C  6F61               	movwf	(printf@f+1)& (0+255),b
   527  000D8E  CFC0 F062          	movff	4032,?_printf+2	;volatile
   528  000D92  0100               	movlb	0	; () banked
   529  000D94  6B63               	clrf	(?_printf+3)& (0+255),b
   530  000D96  EC31  F004         	call	_printf	;wreg free
   531                           
   532                           ;main.c: 146: readADC(0b0000);
   533  000D9A  0E00               	movlw	0
   534  000D9C  6E2A               	movwf	readADC@channel+1,c
   535  000D9E  0E00               	movlw	0
   536  000DA0  6E29               	movwf	readADC@channel,c
   537  000DA2  ECA1  F007         	call	_readADC	;wreg free
   538  000DA6                     l104:
   539  000DA6  D7FF               	goto	l104
   540  000DA8                     __end_of_main:
   541                           	opt stack 0
   542                           tblptru	equ	0xFF8
   543                           
   544 ;; *************** function _startSerial *****************
   545 ;; Defined at:
   546 ;;		line 8 in file "Serial.h"
   547 ;; Parameters:    Size  Location     Type
   548 ;;  baudrate        2    0[BANK0 ] int 
   549 ;;  FOSC            4    2[BANK0 ] long 
   550 ;;  mode            2    6[BANK0 ] int 
   551 ;;  brg_16          2    8[BANK0 ] int 
   552 ;; Auto vars:     Size  Location     Type
   553 ;;  n               2   14[BANK0 ] int 
   554 ;; Return value:  Size  Location     Type
   555 ;;                  1    wreg      void 
   556 ;; Registers used:
   557 ;;		wreg, status,2, status,0, cstack
   558 ;; Tracked objects:
   559 ;;		On entry : 0/0
   560 ;;		On exit  : 0/0
   561 ;;		Unchanged: 0/0
   562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   563 ;;      Params:         0      10       0       0       0       0       0       0       0
   564 ;;      Locals:         0       6       0       0       0       0       0       0       0
   565 ;;      Temps:          0       0       0       0       0       0       0       0       0
   566 ;;      Totals:         0      16       0       0       0       0       0       0       0
   567 ;;Total ram usage:       16 bytes
   568 ;; Hardware stack levels used:    1
   569 ;; Hardware stack levels required when called:    5
   570 ;; This function calls:
   571 ;;		___aldiv
   572 ;; This function is called by:
   573 ;;		_main
   574 ;; This function uses a non-reentrant model
   575 ;;
   576                           
   577                           	psect	text1
   578  000ACE                     __ptext1:
   579                           	opt stack 0
   580  000ACE                     _startSerial:
   581                           	opt stack 25
   582                           
   583                           ;Serial.h: 9: int n;
   584                           ;Serial.h: 10: if(!mode){
   585                           
   586                           ;incstack = 0
   587  000ACE  0100               	movlb	0	; () banked
   588  000AD0  5166               	movf	startSerial@mode& (0+255),w,b
   589  000AD2  0100               	movlb	0	; () banked
   590  000AD4  1167               	iorwf	(startSerial@mode+1)& (0+255),w,b
   591  000AD6  A4D8               	btfss	status,2,c
   592  000AD8  D002               	goto	l41
   593                           
   594                           ; BSR set to: 0
   595                           ;Serial.h: 11: TXSTAbits.SYNC = 0;
   596  000ADA  98AC               	bcf	4012,4,c	;volatile
   597                           
   598                           ;Serial.h: 12: }
   599  000ADC  D001               	goto	l42
   600  000ADE                     l41:
   601                           
   602                           ; BSR set to: 0
   603                           ;Serial.h: 13: else{
   604                           ;Serial.h: 14: TXSTAbits.SYNC = 1;
   605  000ADE  88AC               	bsf	4012,4,c	;volatile
   606  000AE0                     l42:
   607                           
   608                           ; BSR set to: 0
   609                           ;Serial.h: 15: }
   610                           ;Serial.h: 18: RCSTAbits.SPEN = 1;
   611  000AE0  8EAB               	bsf	4011,7,c	;volatile
   612                           
   613                           ;Serial.h: 19: TRISCbits.RC6 = 0;
   614  000AE2  9C94               	bcf	3988,6,c	;volatile
   615                           
   616                           ;Serial.h: 20: TRISCbits.RC7 = 1;
   617  000AE4  8E94               	bsf	3988,7,c	;volatile
   618                           
   619                           ;Serial.h: 22: RCSTAbits.CREN = 1;
   620  000AE6  88AB               	bsf	4011,4,c	;volatile
   621                           
   622                           ;Serial.h: 23: TXSTAbits.TXEN = 1;
   623  000AE8  8AAC               	bsf	4012,5,c	;volatile
   624                           
   625                           ;Serial.h: 27: PIE1bits.RCIE = 1;
   626  000AEA  8A9D               	bsf	3997,5,c	;volatile
   627                           
   628                           ;Serial.h: 28: INTCONbits.GIE = 1;
   629  000AEC  8EF2               	bsf	intcon,7,c	;volatile
   630                           
   631                           ;Serial.h: 29: INTCONbits.PEIE = 1;
   632  000AEE  8CF2               	bsf	intcon,6,c	;volatile
   633                           
   634                           ;Serial.h: 30: TXSTAbits.BRGH = 1;
   635  000AF0  84AC               	bsf	4012,2,c	;volatile
   636                           
   637                           ; BSR set to: 0
   638                           ;Serial.h: 33: if(brg_16){
   639  000AF2  0100               	movlb	0	; () banked
   640  000AF4  5168               	movf	startSerial@brg_16& (0+255),w,b
   641  000AF6  0100               	movlb	0	; () banked
   642  000AF8  1169               	iorwf	(startSerial@brg_16+1)& (0+255),w,b
   643  000AFA  B4D8               	btfsc	status,2,c
   644  000AFC  D03B               	goto	l43
   645                           
   646                           ; BSR set to: 0
   647                           ;Serial.h: 35: BAUDCONbits.BRG16 = 1;
   648  000AFE  86B8               	bsf	4024,3,c	;volatile
   649                           
   650                           ; BSR set to: 0
   651                           ;Serial.h: 36: n = (int)((FOSC / baudrate) / 4) - 1;
   652  000B00  C060  F02D         	movff	startSerial@baudrate,___aldiv@divisor
   653  000B04  C061  F02E         	movff	startSerial@baudrate+1,___aldiv@divisor+1
   654  000B08  0E00               	movlw	0
   655  000B0A  BE2E               	btfsc	___aldiv@divisor+1,7,c
   656  000B0C  0EFF               	movlw	-1
   657  000B0E  6E2F               	movwf	___aldiv@divisor+2,c
   658  000B10  6E30               	movwf	___aldiv@divisor+3,c
   659  000B12  C062  F029         	movff	startSerial@FOSC,___aldiv@dividend
   660  000B16  C063  F02A         	movff	startSerial@FOSC+1,___aldiv@dividend+1
   661  000B1A  C064  F02B         	movff	startSerial@FOSC+2,___aldiv@dividend+2
   662  000B1E  C065  F02C         	movff	startSerial@FOSC+3,___aldiv@dividend+3
   663  000B22  ECF3  F005         	call	___aldiv	;wreg free
   664  000B26  C029  F06A         	movff	?___aldiv,_startSerial$1097
   665  000B2A  C02A  F06B         	movff	?___aldiv+1,_startSerial$1097+1
   666  000B2E  C02B  F06C         	movff	?___aldiv+2,_startSerial$1097+2
   667  000B32  C02C  F06D         	movff	?___aldiv+3,_startSerial$1097+3
   668                           
   669                           ;Serial.h: 36: n = (int)((FOSC / baudrate) / 4) - 1;
   670  000B36  C06A  F029         	movff	_startSerial$1097,___aldiv@dividend
   671  000B3A  C06B  F02A         	movff	_startSerial$1097+1,___aldiv@dividend+1
   672  000B3E  C06C  F02B         	movff	_startSerial$1097+2,___aldiv@dividend+2
   673  000B42  C06D  F02C         	movff	_startSerial$1097+3,___aldiv@dividend+3
   674  000B46  0E04               	movlw	4
   675  000B48  6E2D               	movwf	___aldiv@divisor,c
   676  000B4A  0E00               	movlw	0
   677  000B4C  6E2E               	movwf	___aldiv@divisor+1,c
   678  000B4E  0E00               	movlw	0
   679  000B50  6E2F               	movwf	___aldiv@divisor+2,c
   680  000B52  0E00               	movlw	0
   681  000B54  6E30               	movwf	___aldiv@divisor+3,c
   682  000B56  ECF3  F005         	call	___aldiv	;wreg free
   683  000B5A  0EFF               	movlw	255
   684  000B5C  2429               	addwf	?___aldiv,w,c
   685  000B5E  0100               	movlb	0	; () banked
   686  000B60  6F6E               	movwf	startSerial@n& (0+255),b
   687  000B62  0EFF               	movlw	255
   688  000B64  202A               	addwfc	?___aldiv+1,w,c
   689  000B66  0100               	movlb	0	; () banked
   690  000B68  6F6F               	movwf	(startSerial@n+1)& (0+255),b
   691                           
   692                           ; BSR set to: 0
   693                           ;Serial.h: 37: SPBRG = (int)(n & 0x00FF);
   694  000B6A  C06E  FFAF         	movff	startSerial@n,4015	;volatile
   695                           
   696                           ; BSR set to: 0
   697                           ;Serial.h: 38: SPBRGH = (int)(n & 0xFF00);
   698  000B6E  0E00               	movlw	0
   699  000B70  6EB0               	movwf	4016,c	;volatile
   700                           
   701                           ;Serial.h: 39: }
   702  000B72  0012               	return	
   703  000B74                     l43:
   704                           
   705                           ; BSR set to: 0
   706                           ;Serial.h: 40: else{
   707                           ;Serial.h: 42: BAUDCONbits.BRG16 = 0;
   708  000B74  96B8               	bcf	4024,3,c	;volatile
   709                           
   710                           ; BSR set to: 0
   711                           ;Serial.h: 43: n = (int)((FOSC / baudrate) / 16) - 1;
   712  000B76  C060  F02D         	movff	startSerial@baudrate,___aldiv@divisor
   713  000B7A  C061  F02E         	movff	startSerial@baudrate+1,___aldiv@divisor+1
   714  000B7E  0E00               	movlw	0
   715  000B80  BE2E               	btfsc	___aldiv@divisor+1,7,c
   716  000B82  0EFF               	movlw	-1
   717  000B84  6E2F               	movwf	___aldiv@divisor+2,c
   718  000B86  6E30               	movwf	___aldiv@divisor+3,c
   719  000B88  C062  F029         	movff	startSerial@FOSC,___aldiv@dividend
   720  000B8C  C063  F02A         	movff	startSerial@FOSC+1,___aldiv@dividend+1
   721  000B90  C064  F02B         	movff	startSerial@FOSC+2,___aldiv@dividend+2
   722  000B94  C065  F02C         	movff	startSerial@FOSC+3,___aldiv@dividend+3
   723  000B98  ECF3  F005         	call	___aldiv	;wreg free
   724  000B9C  C029  F06A         	movff	?___aldiv,_startSerial$1097
   725  000BA0  C02A  F06B         	movff	?___aldiv+1,_startSerial$1097+1
   726  000BA4  C02B  F06C         	movff	?___aldiv+2,_startSerial$1097+2
   727  000BA8  C02C  F06D         	movff	?___aldiv+3,_startSerial$1097+3
   728                           
   729                           ;Serial.h: 43: n = (int)((FOSC / baudrate) / 16) - 1;
   730  000BAC  C06A  F029         	movff	_startSerial$1097,___aldiv@dividend
   731  000BB0  C06B  F02A         	movff	_startSerial$1097+1,___aldiv@dividend+1
   732  000BB4  C06C  F02B         	movff	_startSerial$1097+2,___aldiv@dividend+2
   733  000BB8  C06D  F02C         	movff	_startSerial$1097+3,___aldiv@dividend+3
   734  000BBC  0E10               	movlw	16
   735  000BBE  6E2D               	movwf	___aldiv@divisor,c
   736  000BC0  0E00               	movlw	0
   737  000BC2  6E2E               	movwf	___aldiv@divisor+1,c
   738  000BC4  0E00               	movlw	0
   739  000BC6  6E2F               	movwf	___aldiv@divisor+2,c
   740  000BC8  0E00               	movlw	0
   741  000BCA  6E30               	movwf	___aldiv@divisor+3,c
   742  000BCC  ECF3  F005         	call	___aldiv	;wreg free
   743  000BD0  0EFF               	movlw	255
   744  000BD2  2429               	addwf	?___aldiv,w,c
   745  000BD4  0100               	movlb	0	; () banked
   746  000BD6  6F6E               	movwf	startSerial@n& (0+255),b
   747  000BD8  0EFF               	movlw	255
   748  000BDA  202A               	addwfc	?___aldiv+1,w,c
   749  000BDC  0100               	movlb	0	; () banked
   750  000BDE  6F6F               	movwf	(startSerial@n+1)& (0+255),b
   751                           
   752                           ; BSR set to: 0
   753                           ;Serial.h: 44: SPBRG = (int)(n & 0x00FF);
   754  000BE0  C06E  FFAF         	movff	startSerial@n,4015	;volatile
   755  000BE4  0012               	return	
   756  000BE6                     __end_of_startSerial:
   757                           	opt stack 0
   758                           tblptru	equ	0xFF8
   759                           intcon	equ	0xFF2
   760                           status	equ	0xFD8
   761                           
   762 ;; *************** function ___aldiv *****************
   763 ;; Defined at:
   764 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\aldiv.c"
   765 ;; Parameters:    Size  Location     Type
   766 ;;  dividend        4   40[COMRAM] long 
   767 ;;  divisor         4   44[COMRAM] long 
   768 ;; Auto vars:     Size  Location     Type
   769 ;;  quotient        4   50[COMRAM] long 
   770 ;;  sign            1   49[COMRAM] unsigned char 
   771 ;;  counter         1   48[COMRAM] unsigned char 
   772 ;; Return value:  Size  Location     Type
   773 ;;                  4   40[COMRAM] long 
   774 ;; Registers used:
   775 ;;		wreg, status,2, status,0
   776 ;; Tracked objects:
   777 ;;		On entry : 0/0
   778 ;;		On exit  : 0/0
   779 ;;		Unchanged: 0/0
   780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   781 ;;      Params:         8       0       0       0       0       0       0       0       0
   782 ;;      Locals:         6       0       0       0       0       0       0       0       0
   783 ;;      Temps:          0       0       0       0       0       0       0       0       0
   784 ;;      Totals:        14       0       0       0       0       0       0       0       0
   785 ;;Total ram usage:       14 bytes
   786 ;; Hardware stack levels used:    1
   787 ;; Hardware stack levels required when called:    4
   788 ;; This function calls:
   789 ;;		Nothing
   790 ;; This function is called by:
   791 ;;		_startSerial
   792 ;; This function uses a non-reentrant model
   793 ;;
   794                           
   795                           	psect	text2
   796  000BE6                     __ptext2:
   797                           	opt stack 0
   798  000BE6                     ___aldiv:
   799                           	opt stack 25
   800                           
   801                           ; BSR set to: 0
   802                           ;incstack = 0
   803  000BE6  0E00               	movlw	0
   804  000BE8  6E32               	movwf	___aldiv@sign,c
   805  000BEA  AE30               	btfss	___aldiv@divisor+3,7,c
   806  000BEC  D00A               	goto	l1123
   807  000BEE  1E30               	comf	___aldiv@divisor+3,f,c
   808  000BF0  1E2F               	comf	___aldiv@divisor+2,f,c
   809  000BF2  1E2E               	comf	___aldiv@divisor+1,f,c
   810  000BF4  6C2D               	negf	___aldiv@divisor,c
   811  000BF6  0E00               	movlw	0
   812  000BF8  222E               	addwfc	___aldiv@divisor+1,f,c
   813  000BFA  222F               	addwfc	___aldiv@divisor+2,f,c
   814  000BFC  2230               	addwfc	___aldiv@divisor+3,f,c
   815  000BFE  0E01               	movlw	1
   816  000C00  6E32               	movwf	___aldiv@sign,c
   817  000C02                     l1123:
   818  000C02  AE2C               	btfss	___aldiv@dividend+3,7,c
   819  000C04  D00A               	goto	l1129
   820  000C06  1E2C               	comf	___aldiv@dividend+3,f,c
   821  000C08  1E2B               	comf	___aldiv@dividend+2,f,c
   822  000C0A  1E2A               	comf	___aldiv@dividend+1,f,c
   823  000C0C  6C29               	negf	___aldiv@dividend,c
   824  000C0E  0E00               	movlw	0
   825  000C10  222A               	addwfc	___aldiv@dividend+1,f,c
   826  000C12  222B               	addwfc	___aldiv@dividend+2,f,c
   827  000C14  222C               	addwfc	___aldiv@dividend+3,f,c
   828  000C16  0E01               	movlw	1
   829  000C18  1A32               	xorwf	___aldiv@sign,f,c
   830  000C1A                     l1129:
   831  000C1A  0E00               	movlw	0
   832  000C1C  6E33               	movwf	___aldiv@quotient,c
   833  000C1E  0E00               	movlw	0
   834  000C20  6E34               	movwf	___aldiv@quotient+1,c
   835  000C22  0E00               	movlw	0
   836  000C24  6E35               	movwf	___aldiv@quotient+2,c
   837  000C26  0E00               	movlw	0
   838  000C28  6E36               	movwf	___aldiv@quotient+3,c
   839  000C2A  502D               	movf	___aldiv@divisor,w,c
   840  000C2C  102E               	iorwf	___aldiv@divisor+1,w,c
   841  000C2E  102F               	iorwf	___aldiv@divisor+2,w,c
   842  000C30  1030               	iorwf	___aldiv@divisor+3,w,c
   843  000C32  B4D8               	btfsc	status,2,c
   844  000C34  D02A               	goto	l1151
   845  000C36  0E01               	movlw	1
   846  000C38  6E31               	movwf	___aldiv@counter,c
   847  000C3A  D006               	goto	l1137
   848  000C3C                     l1135:
   849  000C3C  90D8               	bcf	status,0,c
   850  000C3E  362D               	rlcf	___aldiv@divisor,f,c
   851  000C40  362E               	rlcf	___aldiv@divisor+1,f,c
   852  000C42  362F               	rlcf	___aldiv@divisor+2,f,c
   853  000C44  3630               	rlcf	___aldiv@divisor+3,f,c
   854  000C46  2A31               	incf	___aldiv@counter,f,c
   855  000C48                     l1137:
   856  000C48  AE30               	btfss	___aldiv@divisor+3,7,c
   857  000C4A  D7F8               	goto	l1135
   858  000C4C                     l1139:
   859  000C4C  90D8               	bcf	status,0,c
   860  000C4E  3633               	rlcf	___aldiv@quotient,f,c
   861  000C50  3634               	rlcf	___aldiv@quotient+1,f,c
   862  000C52  3635               	rlcf	___aldiv@quotient+2,f,c
   863  000C54  3636               	rlcf	___aldiv@quotient+3,f,c
   864  000C56  502D               	movf	___aldiv@divisor,w,c
   865  000C58  5C29               	subwf	___aldiv@dividend,w,c
   866  000C5A  502E               	movf	___aldiv@divisor+1,w,c
   867  000C5C  582A               	subwfb	___aldiv@dividend+1,w,c
   868  000C5E  502F               	movf	___aldiv@divisor+2,w,c
   869  000C60  582B               	subwfb	___aldiv@dividend+2,w,c
   870  000C62  5030               	movf	___aldiv@divisor+3,w,c
   871  000C64  582C               	subwfb	___aldiv@dividend+3,w,c
   872  000C66  A0D8               	btfss	status,0,c
   873  000C68  D009               	goto	l1147
   874  000C6A  502D               	movf	___aldiv@divisor,w,c
   875  000C6C  5E29               	subwf	___aldiv@dividend,f,c
   876  000C6E  502E               	movf	___aldiv@divisor+1,w,c
   877  000C70  5A2A               	subwfb	___aldiv@dividend+1,f,c
   878  000C72  502F               	movf	___aldiv@divisor+2,w,c
   879  000C74  5A2B               	subwfb	___aldiv@dividend+2,f,c
   880  000C76  5030               	movf	___aldiv@divisor+3,w,c
   881  000C78  5A2C               	subwfb	___aldiv@dividend+3,f,c
   882  000C7A  8033               	bsf	___aldiv@quotient,0,c
   883  000C7C                     l1147:
   884  000C7C  90D8               	bcf	status,0,c
   885  000C7E  3230               	rrcf	___aldiv@divisor+3,f,c
   886  000C80  322F               	rrcf	___aldiv@divisor+2,f,c
   887  000C82  322E               	rrcf	___aldiv@divisor+1,f,c
   888  000C84  322D               	rrcf	___aldiv@divisor,f,c
   889  000C86  2E31               	decfsz	___aldiv@counter,f,c
   890  000C88  D7E1               	goto	l1139
   891  000C8A                     l1151:
   892  000C8A  5032               	movf	___aldiv@sign,w,c
   893  000C8C  B4D8               	btfsc	status,2,c
   894  000C8E  D008               	goto	l1155
   895  000C90  1E36               	comf	___aldiv@quotient+3,f,c
   896  000C92  1E35               	comf	___aldiv@quotient+2,f,c
   897  000C94  1E34               	comf	___aldiv@quotient+1,f,c
   898  000C96  6C33               	negf	___aldiv@quotient,c
   899  000C98  0E00               	movlw	0
   900  000C9A  2234               	addwfc	___aldiv@quotient+1,f,c
   901  000C9C  2235               	addwfc	___aldiv@quotient+2,f,c
   902  000C9E  2236               	addwfc	___aldiv@quotient+3,f,c
   903  000CA0                     l1155:
   904  000CA0  C033  F029         	movff	___aldiv@quotient,?___aldiv
   905  000CA4  C034  F02A         	movff	___aldiv@quotient+1,?___aldiv+1
   906  000CA8  C035  F02B         	movff	___aldiv@quotient+2,?___aldiv+2
   907  000CAC  C036  F02C         	movff	___aldiv@quotient+3,?___aldiv+3
   908  000CB0  0012               	return	
   909  000CB2                     __end_of___aldiv:
   910                           	opt stack 0
   911                           tblptru	equ	0xFF8
   912                           intcon	equ	0xFF2
   913                           status	equ	0xFD8
   914                           
   915 ;; *************** function _readADC *****************
   916 ;; Defined at:
   917 ;;		line 111 in file "main.c"
   918 ;; Parameters:    Size  Location     Type
   919 ;;  channel         2   40[COMRAM] int 
   920 ;; Auto vars:     Size  Location     Type
   921 ;;		None
   922 ;; Return value:  Size  Location     Type
   923 ;;                  1    wreg      void 
   924 ;; Registers used:
   925 ;;		wreg, status,2, status,0
   926 ;; Tracked objects:
   927 ;;		On entry : 0/0
   928 ;;		On exit  : 0/0
   929 ;;		Unchanged: 0/0
   930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   931 ;;      Params:         2       0       0       0       0       0       0       0       0
   932 ;;      Locals:         0       0       0       0       0       0       0       0       0
   933 ;;      Temps:          0       0       0       0       0       0       0       0       0
   934 ;;      Totals:         2       0       0       0       0       0       0       0       0
   935 ;;Total ram usage:        2 bytes
   936 ;; Hardware stack levels used:    1
   937 ;; Hardware stack levels required when called:    4
   938 ;; This function calls:
   939 ;;		Nothing
   940 ;; This function is called by:
   941 ;;		_main
   942 ;; This function uses a non-reentrant model
   943 ;;
   944                           
   945                           	psect	text3
   946  000F42                     __ptext3:
   947                           	opt stack 0
   948  000F42                     _readADC:
   949                           	opt stack 26
   950                           
   951                           ;main.c: 112: ADCON0 = 0x00;
   952                           
   953                           ;incstack = 0
   954  000F42  0E00               	movlw	0
   955  000F44  6EC2               	movwf	4034,c	;volatile
   956                           
   957                           ;main.c: 113: ADCON0 |= (channel << 2);
   958  000F46  4429               	rlncf	readADC@channel,w,c
   959  000F48  46E8               	rlncf	wreg,f,c
   960  000F4A  0BFC               	andlw	252
   961  000F4C  12C2               	iorwf	4034,f,c	;volatile
   962                           
   963                           ;main.c: 114: ADCON0bits.ADON = 1;
   964  000F4E  80C2               	bsf	4034,0,c	;volatile
   965                           
   966                           ;main.c: 115: ADCON0bits.GO = 1;
   967  000F50  82C2               	bsf	4034,1,c	;volatile
   968  000F52  0012               	return		;funcret
   969  000F54                     __end_of_readADC:
   970                           	opt stack 0
   971                           tblptru	equ	0xFF8
   972                           intcon	equ	0xFF2
   973                           wreg	equ	0xFE8
   974                           status	equ	0xFD8
   975                           
   976 ;; *************** function _printf *****************
   977 ;; Defined at:
   978 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
   979 ;; Parameters:    Size  Location     Type
   980 ;;  f               2    0[BANK0 ] PTR const unsigned char 
   981 ;;		 -> STR_4(41), STR_1(4), 
   982 ;; Auto vars:     Size  Location     Type
   983 ;;  tmpval          4    0        struct .
   984 ;;  cp              3    0        PTR const unsigned char 
   985 ;;  val             2    8[BANK0 ] unsigned int 
   986 ;;  ap              2    4[BANK0 ] PTR void [1]
   987 ;;		 -> ?i2_printf(2), ?_printf(2), 
   988 ;;  len             2    0        unsigned int 
   989 ;;  c               1   10[BANK0 ] char 
   990 ;;  prec            1    7[BANK0 ] char 
   991 ;;  flag            1    6[BANK0 ] unsigned char 
   992 ;; Return value:  Size  Location     Type
   993 ;;                  2    0[BANK0 ] int 
   994 ;; Registers used:
   995 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   996 ;; Tracked objects:
   997 ;;		On entry : 0/0
   998 ;;		On exit  : 0/0
   999 ;;		Unchanged: 0/0
  1000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1001 ;;      Params:         0       4       0       0       0       0       0       0       0
  1002 ;;      Locals:         0       7       0       0       0       0       0       0       0
  1003 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1004 ;;      Totals:         1      11       0       0       0       0       0       0       0
  1005 ;;Total ram usage:       12 bytes
  1006 ;; Hardware stack levels used:    1
  1007 ;; Hardware stack levels required when called:    5
  1008 ;; This function calls:
  1009 ;;		___lwdiv
  1010 ;;		___lwmod
  1011 ;;		_putch
  1012 ;; This function is called by:
  1013 ;;		_main
  1014 ;; This function uses a non-reentrant model
  1015 ;;
  1016                           
  1017                           	psect	text4
  1018  000862                     __ptext4:
  1019                           	opt stack 0
  1020  000862                     _printf:
  1021                           	opt stack 25
  1022                           
  1023                           ;doprnt.c: 466: va_list ap;
  1024                           ;doprnt.c: 499: signed char c;
  1025                           ;doprnt.c: 506: signed char prec;
  1026                           ;doprnt.c: 508: unsigned char flag;
  1027                           ;doprnt.c: 523: union {
  1028                           ;doprnt.c: 524: unsigned long vd;
  1029                           ;doprnt.c: 525: double integ;
  1030                           ;doprnt.c: 526: } tmpval;
  1031                           ;doprnt.c: 528: unsigned int val;
  1032                           ;doprnt.c: 529: unsigned len;
  1033                           ;doprnt.c: 530: const char * cp;
  1034                           ;doprnt.c: 533: *ap = __va_start();
  1035                           
  1036                           ;incstack = 0
  1037  000862  0E62               	movlw	low (?_printf+2)
  1038  000864  0100               	movlb	0	; () banked
  1039  000866  6F64               	movwf	printf@ap& (0+255),b
  1040  000868  0E00               	movlw	high (?_printf+2)
  1041  00086A  0100               	movlb	0	; () banked
  1042  00086C  6F65               	movwf	(printf@ap+1)& (0+255),b
  1043                           
  1044                           ;doprnt.c: 536: while(c = *f++) {
  1045  00086E  D091               	goto	l1333
  1046  000870                     l1287:
  1047                           
  1048                           ; BSR set to: 0
  1049                           ;doprnt.c: 538: if(c != '%')
  1050  000870  0E25               	movlw	37
  1051  000872  0100               	movlb	0	; () banked
  1052  000874  196A               	xorwf	printf@c& (0+255),w,b
  1053  000876  B4D8               	btfsc	status,2,c
  1054  000878  D005               	goto	l1291
  1055                           
  1056                           ; BSR set to: 0
  1057                           ;doprnt.c: 540: {
  1058                           ;doprnt.c: 541: (putch(c) );
  1059  00087A  0100               	movlb	0	; () banked
  1060  00087C  516A               	movf	printf@c& (0+255),w,b
  1061  00087E  ECB1  F007         	call	_putch
  1062                           
  1063                           ;doprnt.c: 542: continue;
  1064  000882  D087               	goto	l1333
  1065  000884                     l1291:
  1066                           
  1067                           ;doprnt.c: 543: }
  1068                           ;doprnt.c: 548: flag = 0;
  1069  000884  0E00               	movlw	0
  1070  000886  0100               	movlb	0	; () banked
  1071  000888  6F66               	movwf	printf@flag& (0+255),b
  1072                           
  1073                           ; BSR set to: 0
  1074                           
  1075                           ; BSR set to: 0
  1076                           
  1077                           ; BSR set to: 0
  1078                           ;doprnt.c: 822: }
  1079                           
  1080                           ; BSR set to: 0
  1081                           ;doprnt.c: 813: continue;
  1082                           
  1083                           ;doprnt.c: 802: default:
  1084                           
  1085                           ; BSR set to: 0
  1086                           ;doprnt.c: 698: case 'i':
  1087                           ;doprnt.c: 699: break;
  1088                           
  1089                           ; BSR set to: 0
  1090                           
  1091                           ;doprnt.c: 697: case 'd':
  1092                           
  1093                           ; BSR set to: 0
  1094                           ;doprnt.c: 638: goto alldone;
  1095                           
  1096                           ;doprnt.c: 637: case 0:
  1097                           
  1098                           ;doprnt.c: 635: switch(c = *f++) {
  1099  00088A  C060  FFF6         	movff	printf@f,tblptrl
  1100  00088E  C061  FFF7         	movff	printf@f+1,tblptrh
  1101  000892  0100               	movlb	0	; () banked
  1102  000894  4B60               	infsnz	printf@f& (0+255),f,b
  1103  000896  2B61               	incf	(printf@f+1)& (0+255),f,b
  1104  000898                     	if	0	;tblptru may be non-zero
  1105  000898                     	endif
  1106  000898                     	if	0	;tblptru may be non-zero
  1107  000898                     	endif
  1108  000898  0008               	tblrd		*
  1109  00089A  CFF5 F06A          	movff	tablat,printf@c
  1110  00089E  0100               	movlb	0	; () banked
  1111  0008A0  516A               	movf	printf@c& (0+255),w,b
  1112                           
  1113                           ; Switch size 1, requested type "space"
  1114                           ; Number of cases is 3, Range of values is 0 to 105
  1115                           ; switch strategies available:
  1116                           ; Name         Instructions Cycles
  1117                           ; simple_byte           10     6 (average)
  1118                           ;	Chosen strategy is simple_byte
  1119  0008A2  0A00               	xorlw	0	; case 0
  1120  0008A4  B4D8               	btfsc	status,2,c
  1121  0008A6  0012               	return	
  1122  0008A8  0A64               	xorlw	100	; case 100
  1123  0008AA  B4D8               	btfsc	status,2,c
  1124  0008AC  D003               	goto	l1297
  1125  0008AE  0A0D               	xorlw	13	; case 105
  1126  0008B0  A4D8               	btfss	status,2,c
  1127  0008B2  D06F               	goto	l1333
  1128  0008B4                     l1297:
  1129                           
  1130                           ; BSR set to: 0
  1131                           ;doprnt.c: 1253: {
  1132                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1133  0008B4  C064  FFD9         	movff	printf@ap,fsr2l
  1134  0008B8  C065  FFDA         	movff	printf@ap+1,fsr2h
  1135  0008BC  CFDE F068          	movff	postinc2,printf@val
  1136  0008C0  CFDD F069          	movff	postdec2,printf@val+1
  1137                           
  1138                           ; BSR set to: 0
  1139  0008C4  0E02               	movlw	2
  1140  0008C6  0100               	movlb	0	; () banked
  1141  0008C8  2764               	addwf	printf@ap& (0+255),f,b
  1142  0008CA  0E00               	movlw	0
  1143  0008CC  2365               	addwfc	(printf@ap+1)& (0+255),f,b
  1144                           
  1145                           ; BSR set to: 0
  1146                           ;doprnt.c: 1261: if((int)val < 0) {
  1147  0008CE  0100               	movlb	0	; () banked
  1148  0008D0  AF69               	btfss	(printf@val+1)& (0+255),7,b
  1149  0008D2  D008               	goto	l1307
  1150                           
  1151                           ; BSR set to: 0
  1152                           ;doprnt.c: 1262: flag |= 0x03;
  1153  0008D4  0E03               	movlw	3
  1154  0008D6  0100               	movlb	0	; () banked
  1155  0008D8  1366               	iorwf	printf@flag& (0+255),f,b
  1156                           
  1157                           ; BSR set to: 0
  1158                           ;doprnt.c: 1263: val = -val;
  1159  0008DA  0100               	movlb	0	; () banked
  1160  0008DC  6D68               	negf	printf@val& (0+255),b
  1161  0008DE  1F69               	comf	(printf@val+1)& (0+255),f,b
  1162  0008E0  B0D8               	btfsc	status,0,c
  1163  0008E2  2B69               	incf	(printf@val+1)& (0+255),f,b
  1164  0008E4                     l1307:
  1165                           
  1166                           ; BSR set to: 0
  1167                           ;doprnt.c: 1264: }
  1168                           ;doprnt.c: 1266: }
  1169                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1170  0008E4  0E01               	movlw	1
  1171  0008E6  0100               	movlb	0	; () banked
  1172  0008E8  6F6A               	movwf	printf@c& (0+255),b
  1173  0008EA                     l1309:
  1174                           
  1175                           ; BSR set to: 0
  1176  0008EA  0E05               	movlw	5
  1177  0008EC  0100               	movlb	0	; () banked
  1178  0008EE  196A               	xorwf	printf@c& (0+255),w,b
  1179  0008F0  B4D8               	btfsc	status,2,c
  1180  0008F2  D016               	goto	l1321
  1181                           
  1182                           ; BSR set to: 0
  1183                           ;doprnt.c: 1306: if(val < dpowers[c])
  1184                           
  1185                           ; BSR set to: 0
  1186                           
  1187                           ; BSR set to: 0
  1188  0008F4  0100               	movlb	0	; () banked
  1189  0008F6  516A               	movf	printf@c& (0+255),w,b
  1190  0008F8  0D02               	mullw	2
  1191  0008FA  0E01               	movlw	low _dpowers
  1192  0008FC  24F3               	addwf	prodl,w,c
  1193  0008FE  6EF6               	movwf	tblptrl,c
  1194  000900  0E08               	movlw	high _dpowers
  1195  000902  20F4               	addwfc	prodh,w,c
  1196  000904  6EF7               	movwf	tblptrh,c
  1197  000906                     	if	0	;There are less than 3 active tblptr bytes
  1198  000906                     	endif
  1199  000906  0009               	tblrd		*+
  1200  000908  50F5               	movf	tablat,w,c
  1201  00090A  0100               	movlb	0	; () banked
  1202  00090C  5D68               	subwf	printf@val& (0+255),w,b
  1203  00090E  0009               	tblrd		*+
  1204  000910  50F5               	movf	tablat,w,c
  1205  000912  0100               	movlb	0	; () banked
  1206  000914  5969               	subwfb	(printf@val+1)& (0+255),w,b
  1207  000916  A0D8               	btfss	status,0,c
  1208  000918  D003               	goto	l1321
  1209                           
  1210                           ; BSR set to: 0
  1211                           
  1212                           ; BSR set to: 0
  1213                           
  1214                           ; BSR set to: 0
  1215                           ;doprnt.c: 1307: break;
  1216  00091A  0100               	movlb	0	; () banked
  1217  00091C  2B6A               	incf	printf@c& (0+255),f,b
  1218  00091E  D7E5               	goto	l1309
  1219  000920                     l1321:
  1220                           
  1221                           ; BSR set to: 0
  1222                           ;doprnt.c: 1422: {
  1223                           ;doprnt.c: 1438: if(flag & 0x03)
  1224  000920  C066  F035         	movff	printf@flag,??_printf
  1225  000924  0E03               	movlw	3
  1226  000926  1635               	andwf	??_printf,f,c
  1227  000928  B4D8               	btfsc	status,2,c
  1228  00092A  D003               	goto	l1325
  1229                           
  1230                           ; BSR set to: 0
  1231                           ;doprnt.c: 1439: (putch('-') );
  1232  00092C  0E2D               	movlw	45
  1233  00092E  ECB1  F007         	call	_putch
  1234  000932                     l1325:
  1235                           
  1236                           ;doprnt.c: 1469: }
  1237                           ;doprnt.c: 1472: prec = c;
  1238  000932  C06A  F067         	movff	printf@c,printf@prec
  1239                           
  1240                           ;doprnt.c: 1474: while(prec--) {
  1241  000936  D027               	goto	l1331
  1242  000938                     l1327:
  1243                           
  1244                           ;doprnt.c: 1478: {
  1245                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1246  000938  0100               	movlb	0	; () banked
  1247  00093A  5167               	movf	printf@prec& (0+255),w,b
  1248  00093C  0D02               	mullw	2
  1249  00093E  0E01               	movlw	low _dpowers
  1250  000940  24F3               	addwf	prodl,w,c
  1251  000942  6EF6               	movwf	tblptrl,c
  1252  000944  0E08               	movlw	high _dpowers
  1253  000946  20F4               	addwfc	prodh,w,c
  1254  000948  6EF7               	movwf	tblptrh,c
  1255  00094A                     	if	0	;There are less than 3 active tblptr bytes
  1256  00094A                     	endif
  1257  00094A  0009               	tblrd		*+
  1258  00094C  CFF5 F02B          	movff	tablat,___lwdiv@divisor
  1259  000950  000A               	tblrd		*-
  1260  000952  CFF5 F02C          	movff	tablat,___lwdiv@divisor+1
  1261  000956  C068  F029         	movff	printf@val,___lwdiv@dividend
  1262  00095A  C069  F02A         	movff	printf@val+1,___lwdiv@dividend+1
  1263  00095E  ECD4  F006         	call	___lwdiv	;wreg free
  1264  000962  C029  F030         	movff	?___lwdiv,___lwmod@dividend
  1265  000966  C02A  F031         	movff	?___lwdiv+1,___lwmod@dividend+1
  1266  00096A  0E00               	movlw	0
  1267  00096C  6E33               	movwf	___lwmod@divisor+1,c
  1268  00096E  0E0A               	movlw	10
  1269  000970  6E32               	movwf	___lwmod@divisor,c
  1270  000972  EC26  F007         	call	___lwmod	;wreg free
  1271  000976  5030               	movf	?___lwmod,w,c
  1272  000978  0F30               	addlw	48
  1273  00097A  0100               	movlb	0	; () banked
  1274  00097C  6F6A               	movwf	printf@c& (0+255),b
  1275                           
  1276                           ; BSR set to: 0
  1277                           ;doprnt.c: 1523: }
  1278                           ;doprnt.c: 1524: (putch(c) );
  1279  00097E  0100               	movlb	0	; () banked
  1280  000980  516A               	movf	printf@c& (0+255),w,b
  1281  000982  ECB1  F007         	call	_putch
  1282  000986                     l1331:
  1283  000986  0100               	movlb	0	; () banked
  1284  000988  0767               	decf	printf@prec& (0+255),f,b
  1285  00098A  0100               	movlb	0	; () banked
  1286  00098C  2967               	incf	printf@prec& (0+255),w,b
  1287  00098E  A4D8               	btfss	status,2,c
  1288  000990  D7D3               	goto	l1327
  1289  000992                     l1333:
  1290  000992  C060  FFF6         	movff	printf@f,tblptrl
  1291  000996  C061  FFF7         	movff	printf@f+1,tblptrh
  1292  00099A  0100               	movlb	0	; () banked
  1293  00099C  4B60               	infsnz	printf@f& (0+255),f,b
  1294  00099E  2B61               	incf	(printf@f+1)& (0+255),f,b
  1295  0009A0                     	if	0	;tblptru may be non-zero
  1296  0009A0                     	endif
  1297  0009A0                     	if	0	;tblptru may be non-zero
  1298  0009A0                     	endif
  1299  0009A0  0008               	tblrd		*
  1300  0009A2  CFF5 F06A          	movff	tablat,printf@c
  1301  0009A6  0100               	movlb	0	; () banked
  1302  0009A8  516A               	movf	printf@c& (0+255),w,b
  1303  0009AA  B4D8               	btfsc	status,2,c
  1304  0009AC  0012               	return	
  1305  0009AE  D760               	goto	l1287
  1306  0009B0                     __end_of_printf:
  1307                           	opt stack 0
  1308                           tblptru	equ	0xFF8
  1309                           tblptrh	equ	0xFF7
  1310                           tblptrl	equ	0xFF6
  1311                           tablat	equ	0xFF5
  1312                           prodh	equ	0xFF4
  1313                           prodl	equ	0xFF3
  1314                           intcon	equ	0xFF2
  1315                           wreg	equ	0xFE8
  1316                           postinc2	equ	0xFDE
  1317                           postdec2	equ	0xFDD
  1318                           fsr2h	equ	0xFDA
  1319                           fsr2l	equ	0xFD9
  1320                           status	equ	0xFD8
  1321                           
  1322 ;; *************** function _putch *****************
  1323 ;; Defined at:
  1324 ;;		line 104 in file "Serial.h"
  1325 ;; Parameters:    Size  Location     Type
  1326 ;;  c               1    wreg     unsigned char 
  1327 ;; Auto vars:     Size  Location     Type
  1328 ;;  c               1   40[COMRAM] unsigned char 
  1329 ;; Return value:  Size  Location     Type
  1330 ;;                  1    wreg      void 
  1331 ;; Registers used:
  1332 ;;		wreg
  1333 ;; Tracked objects:
  1334 ;;		On entry : 0/0
  1335 ;;		On exit  : 0/0
  1336 ;;		Unchanged: 0/0
  1337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1338 ;;      Params:         0       0       0       0       0       0       0       0       0
  1339 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1340 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1341 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1342 ;;Total ram usage:        1 bytes
  1343 ;; Hardware stack levels used:    1
  1344 ;; Hardware stack levels required when called:    4
  1345 ;; This function calls:
  1346 ;;		Nothing
  1347 ;; This function is called by:
  1348 ;;		_printf
  1349 ;; This function uses a non-reentrant model
  1350 ;;
  1351                           
  1352                           	psect	text5
  1353  000F62                     __ptext5:
  1354                           	opt stack 0
  1355  000F62                     _putch:
  1356                           	opt stack 25
  1357                           
  1358                           ; BSR set to: 0
  1359                           ;incstack = 0
  1360                           ;putch@c stored from wreg
  1361  000F62  6E29               	movwf	putch@c,c
  1362                           
  1363                           ;Serial.h: 105: TXREG = c;
  1364  000F64  C029  FFAD         	movff	putch@c,4013	;volatile
  1365  000F68                     l81:
  1366  000F68  B2AC               	btfsc	4012,1,c	;volatile
  1367  000F6A  0012               	return	
  1368  000F6C  D7FD               	goto	l81
  1369  000F6E                     __end_of_putch:
  1370                           	opt stack 0
  1371                           tblptru	equ	0xFF8
  1372                           tblptrh	equ	0xFF7
  1373                           tblptrl	equ	0xFF6
  1374                           tablat	equ	0xFF5
  1375                           prodh	equ	0xFF4
  1376                           prodl	equ	0xFF3
  1377                           intcon	equ	0xFF2
  1378                           wreg	equ	0xFE8
  1379                           postinc2	equ	0xFDE
  1380                           postdec2	equ	0xFDD
  1381                           fsr2h	equ	0xFDA
  1382                           fsr2l	equ	0xFD9
  1383                           status	equ	0xFD8
  1384                           
  1385 ;; *************** function ___lwmod *****************
  1386 ;; Defined at:
  1387 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
  1388 ;; Parameters:    Size  Location     Type
  1389 ;;  dividend        2   47[COMRAM] unsigned int 
  1390 ;;  divisor         2   49[COMRAM] unsigned int 
  1391 ;; Auto vars:     Size  Location     Type
  1392 ;;  counter         1   51[COMRAM] unsigned char 
  1393 ;; Return value:  Size  Location     Type
  1394 ;;                  2   47[COMRAM] unsigned int 
  1395 ;; Registers used:
  1396 ;;		wreg, status,2, status,0
  1397 ;; Tracked objects:
  1398 ;;		On entry : 0/0
  1399 ;;		On exit  : 0/0
  1400 ;;		Unchanged: 0/0
  1401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1402 ;;      Params:         4       0       0       0       0       0       0       0       0
  1403 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1404 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1405 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1406 ;;Total ram usage:        5 bytes
  1407 ;; Hardware stack levels used:    1
  1408 ;; Hardware stack levels required when called:    4
  1409 ;; This function calls:
  1410 ;;		Nothing
  1411 ;; This function is called by:
  1412 ;;		_printf
  1413 ;; This function uses a non-reentrant model
  1414 ;;
  1415                           
  1416                           	psect	text6
  1417  000E4C                     __ptext6:
  1418                           	opt stack 0
  1419  000E4C                     ___lwmod:
  1420                           	opt stack 25
  1421                           
  1422                           ;incstack = 0
  1423  000E4C  5032               	movf	___lwmod@divisor,w,c
  1424  000E4E  1033               	iorwf	___lwmod@divisor+1,w,c
  1425  000E50  B4D8               	btfsc	status,2,c
  1426  000E52  D018               	goto	l550
  1427  000E54  0E01               	movlw	1
  1428  000E56  6E34               	movwf	___lwmod@counter,c
  1429  000E58  D004               	goto	l1187
  1430  000E5A                     l1185:
  1431  000E5A  90D8               	bcf	status,0,c
  1432  000E5C  3632               	rlcf	___lwmod@divisor,f,c
  1433  000E5E  3633               	rlcf	___lwmod@divisor+1,f,c
  1434  000E60  2A34               	incf	___lwmod@counter,f,c
  1435  000E62                     l1187:
  1436  000E62  AE33               	btfss	___lwmod@divisor+1,7,c
  1437  000E64  D7FA               	goto	l1185
  1438  000E66                     l1189:
  1439  000E66  5032               	movf	___lwmod@divisor,w,c
  1440  000E68  5C30               	subwf	___lwmod@dividend,w,c
  1441  000E6A  5033               	movf	___lwmod@divisor+1,w,c
  1442  000E6C  5831               	subwfb	___lwmod@dividend+1,w,c
  1443  000E6E  A0D8               	btfss	status,0,c
  1444  000E70  D004               	goto	l1193
  1445  000E72  5032               	movf	___lwmod@divisor,w,c
  1446  000E74  5E30               	subwf	___lwmod@dividend,f,c
  1447  000E76  5033               	movf	___lwmod@divisor+1,w,c
  1448  000E78  5A31               	subwfb	___lwmod@dividend+1,f,c
  1449  000E7A                     l1193:
  1450  000E7A  90D8               	bcf	status,0,c
  1451  000E7C  3233               	rrcf	___lwmod@divisor+1,f,c
  1452  000E7E  3232               	rrcf	___lwmod@divisor,f,c
  1453  000E80  2E34               	decfsz	___lwmod@counter,f,c
  1454  000E82  D7F1               	goto	l1189
  1455  000E84                     l550:
  1456  000E84  C030  F030         	movff	___lwmod@dividend,?___lwmod
  1457  000E88  C031  F031         	movff	___lwmod@dividend+1,?___lwmod+1
  1458  000E8C  0012               	return		;funcret
  1459  000E8E                     __end_of___lwmod:
  1460                           	opt stack 0
  1461                           tblptru	equ	0xFF8
  1462                           tblptrh	equ	0xFF7
  1463                           tblptrl	equ	0xFF6
  1464                           tablat	equ	0xFF5
  1465                           prodh	equ	0xFF4
  1466                           prodl	equ	0xFF3
  1467                           intcon	equ	0xFF2
  1468                           wreg	equ	0xFE8
  1469                           postinc2	equ	0xFDE
  1470                           postdec2	equ	0xFDD
  1471                           fsr2h	equ	0xFDA
  1472                           fsr2l	equ	0xFD9
  1473                           status	equ	0xFD8
  1474                           
  1475 ;; *************** function ___lwdiv *****************
  1476 ;; Defined at:
  1477 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwdiv.c"
  1478 ;; Parameters:    Size  Location     Type
  1479 ;;  dividend        2   40[COMRAM] unsigned int 
  1480 ;;  divisor         2   42[COMRAM] unsigned int 
  1481 ;; Auto vars:     Size  Location     Type
  1482 ;;  quotient        2   44[COMRAM] unsigned int 
  1483 ;;  counter         1   46[COMRAM] unsigned char 
  1484 ;; Return value:  Size  Location     Type
  1485 ;;                  2   40[COMRAM] unsigned int 
  1486 ;; Registers used:
  1487 ;;		wreg, status,2, status,0
  1488 ;; Tracked objects:
  1489 ;;		On entry : 0/0
  1490 ;;		On exit  : 0/0
  1491 ;;		Unchanged: 0/0
  1492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1493 ;;      Params:         4       0       0       0       0       0       0       0       0
  1494 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1495 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1496 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1497 ;;Total ram usage:        7 bytes
  1498 ;; Hardware stack levels used:    1
  1499 ;; Hardware stack levels required when called:    4
  1500 ;; This function calls:
  1501 ;;		Nothing
  1502 ;; This function is called by:
  1503 ;;		_printf
  1504 ;; This function uses a non-reentrant model
  1505 ;;
  1506                           
  1507                           	psect	text7
  1508  000DA8                     __ptext7:
  1509                           	opt stack 0
  1510  000DA8                     ___lwdiv:
  1511                           	opt stack 25
  1512                           
  1513                           ;incstack = 0
  1514  000DA8  0E00               	movlw	0
  1515  000DAA  6E2E               	movwf	___lwdiv@quotient+1,c
  1516  000DAC  0E00               	movlw	0
  1517  000DAE  6E2D               	movwf	___lwdiv@quotient,c
  1518  000DB0  502B               	movf	___lwdiv@divisor,w,c
  1519  000DB2  102C               	iorwf	___lwdiv@divisor+1,w,c
  1520  000DB4  B4D8               	btfsc	status,2,c
  1521  000DB6  D01C               	goto	l540
  1522  000DB8  0E01               	movlw	1
  1523  000DBA  6E2F               	movwf	___lwdiv@counter,c
  1524  000DBC  D004               	goto	l1167
  1525  000DBE                     l1165:
  1526  000DBE  90D8               	bcf	status,0,c
  1527  000DC0  362B               	rlcf	___lwdiv@divisor,f,c
  1528  000DC2  362C               	rlcf	___lwdiv@divisor+1,f,c
  1529  000DC4  2A2F               	incf	___lwdiv@counter,f,c
  1530  000DC6                     l1167:
  1531  000DC6  AE2C               	btfss	___lwdiv@divisor+1,7,c
  1532  000DC8  D7FA               	goto	l1165
  1533  000DCA                     l1169:
  1534  000DCA  90D8               	bcf	status,0,c
  1535  000DCC  362D               	rlcf	___lwdiv@quotient,f,c
  1536  000DCE  362E               	rlcf	___lwdiv@quotient+1,f,c
  1537  000DD0  502B               	movf	___lwdiv@divisor,w,c
  1538  000DD2  5C29               	subwf	___lwdiv@dividend,w,c
  1539  000DD4  502C               	movf	___lwdiv@divisor+1,w,c
  1540  000DD6  582A               	subwfb	___lwdiv@dividend+1,w,c
  1541  000DD8  A0D8               	btfss	status,0,c
  1542  000DDA  D005               	goto	l1177
  1543  000DDC  502B               	movf	___lwdiv@divisor,w,c
  1544  000DDE  5E29               	subwf	___lwdiv@dividend,f,c
  1545  000DE0  502C               	movf	___lwdiv@divisor+1,w,c
  1546  000DE2  5A2A               	subwfb	___lwdiv@dividend+1,f,c
  1547  000DE4  802D               	bsf	___lwdiv@quotient,0,c
  1548  000DE6                     l1177:
  1549  000DE6  90D8               	bcf	status,0,c
  1550  000DE8  322C               	rrcf	___lwdiv@divisor+1,f,c
  1551  000DEA  322B               	rrcf	___lwdiv@divisor,f,c
  1552  000DEC  2E2F               	decfsz	___lwdiv@counter,f,c
  1553  000DEE  D7ED               	goto	l1169
  1554  000DF0                     l540:
  1555  000DF0  C02D  F029         	movff	___lwdiv@quotient,?___lwdiv
  1556  000DF4  C02E  F02A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1557  000DF8  0012               	return		;funcret
  1558  000DFA                     __end_of___lwdiv:
  1559                           	opt stack 0
  1560                           tblptru	equ	0xFF8
  1561                           tblptrh	equ	0xFF7
  1562                           tblptrl	equ	0xFF6
  1563                           tablat	equ	0xFF5
  1564                           prodh	equ	0xFF4
  1565                           prodl	equ	0xFF3
  1566                           intcon	equ	0xFF2
  1567                           wreg	equ	0xFE8
  1568                           postinc2	equ	0xFDE
  1569                           postdec2	equ	0xFDD
  1570                           fsr2h	equ	0xFDA
  1571                           fsr2l	equ	0xFD9
  1572                           status	equ	0xFD8
  1573                           
  1574 ;; *************** function _printSerialnl *****************
  1575 ;; Defined at:
  1576 ;;		line 67 in file "Serial.h"
  1577 ;; Parameters:    Size  Location     Type
  1578 ;;  String          2   41[COMRAM] PTR unsigned char 
  1579 ;;		 -> STR_3(22), STR_2(18), 
  1580 ;; Auto vars:     Size  Location     Type
  1581 ;;  p               2   43[COMRAM] PTR unsigned char 
  1582 ;;		 -> STR_3(22), STR_2(18), 
  1583 ;; Return value:  Size  Location     Type
  1584 ;;                  1    wreg      void 
  1585 ;; Registers used:
  1586 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1587 ;; Tracked objects:
  1588 ;;		On entry : 0/0
  1589 ;;		On exit  : 0/0
  1590 ;;		Unchanged: 0/0
  1591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1592 ;;      Params:         2       0       0       0       0       0       0       0       0
  1593 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1594 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1595 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1596 ;;Total ram usage:        4 bytes
  1597 ;; Hardware stack levels used:    1
  1598 ;; Hardware stack levels required when called:    5
  1599 ;; This function calls:
  1600 ;;		_sendDataSerial
  1601 ;; This function is called by:
  1602 ;;		_main
  1603 ;; This function uses a non-reentrant model
  1604 ;;
  1605                           
  1606                           	psect	text8
  1607  000ED0                     __ptext8:
  1608                           	opt stack 0
  1609  000ED0                     _printSerialnl:
  1610                           	opt stack 25
  1611                           
  1612                           ;Serial.h: 69: char *p;
  1613                           ;Serial.h: 70: p = String;
  1614                           
  1615                           ;incstack = 0
  1616  000ED0  C02A  F02C         	movff	printSerialnl@String,printSerialnl@p
  1617  000ED4  C02B  F02D         	movff	printSerialnl@String+1,printSerialnl@p+1
  1618                           
  1619                           ;Serial.h: 71: while(*p != '\0'){
  1620  000ED8  D00A               	goto	l1271
  1621  000EDA                     l1267:
  1622                           
  1623                           ;Serial.h: 72: sendDataSerial(*p);
  1624  000EDA  C02C  FFF6         	movff	printSerialnl@p,tblptrl
  1625  000EDE  C02D  FFF7         	movff	printSerialnl@p+1,tblptrh
  1626  000EE2                     	if	0	;tblptru may be non-zero
  1627  000EE2                     	endif
  1628  000EE2                     	if	0	;tblptru may be non-zero
  1629  000EE2                     	endif
  1630  000EE2  0008               	tblrd		*
  1631  000EE4  50F5               	movf	tablat,w,c
  1632  000EE6  ECB7  F007         	call	_sendDataSerial
  1633                           
  1634                           ;Serial.h: 73: p++;
  1635  000EEA  4A2C               	infsnz	printSerialnl@p,f,c
  1636  000EEC  2A2D               	incf	printSerialnl@p+1,f,c
  1637  000EEE                     l1271:
  1638  000EEE  C02C  FFF6         	movff	printSerialnl@p,tblptrl
  1639  000EF2  C02D  FFF7         	movff	printSerialnl@p+1,tblptrh
  1640  000EF6                     	if	0	;tblptru may be non-zero
  1641  000EF6                     	endif
  1642  000EF6                     	if	0	;tblptru may be non-zero
  1643  000EF6                     	endif
  1644  000EF6  0008               	tblrd		*
  1645  000EF8  50F5               	movf	tablat,w,c
  1646  000EFA  0900               	iorlw	0
  1647  000EFC  A4D8               	btfss	status,2,c
  1648  000EFE  D7ED               	goto	l1267
  1649                           
  1650                           ;Serial.h: 74: }
  1651                           ;Serial.h: 75: sendDataSerial('\n');
  1652  000F00  0E0A               	movlw	10
  1653  000F02  ECB7  F007         	call	_sendDataSerial
  1654                           
  1655                           ;Serial.h: 76: sendDataSerial('\r');
  1656  000F06  0E0D               	movlw	13
  1657  000F08  ECB7  F007         	call	_sendDataSerial
  1658  000F0C  0012               	return		;funcret
  1659  000F0E                     __end_of_printSerialnl:
  1660                           	opt stack 0
  1661                           tblptru	equ	0xFF8
  1662                           tblptrh	equ	0xFF7
  1663                           tblptrl	equ	0xFF6
  1664                           tablat	equ	0xFF5
  1665                           prodh	equ	0xFF4
  1666                           prodl	equ	0xFF3
  1667                           intcon	equ	0xFF2
  1668                           wreg	equ	0xFE8
  1669                           postinc2	equ	0xFDE
  1670                           postdec2	equ	0xFDD
  1671                           fsr2h	equ	0xFDA
  1672                           fsr2l	equ	0xFD9
  1673                           status	equ	0xFD8
  1674                           
  1675 ;; *************** function _sendDataSerial *****************
  1676 ;; Defined at:
  1677 ;;		line 51 in file "Serial.h"
  1678 ;; Parameters:    Size  Location     Type
  1679 ;;  c               1    wreg     unsigned char 
  1680 ;; Auto vars:     Size  Location     Type
  1681 ;;  c               1   40[COMRAM] unsigned char 
  1682 ;; Return value:  Size  Location     Type
  1683 ;;                  1    wreg      void 
  1684 ;; Registers used:
  1685 ;;		wreg
  1686 ;; Tracked objects:
  1687 ;;		On entry : 0/0
  1688 ;;		On exit  : 0/0
  1689 ;;		Unchanged: 0/0
  1690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1691 ;;      Params:         0       0       0       0       0       0       0       0       0
  1692 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1693 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1694 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1695 ;;Total ram usage:        1 bytes
  1696 ;; Hardware stack levels used:    1
  1697 ;; Hardware stack levels required when called:    4
  1698 ;; This function calls:
  1699 ;;		Nothing
  1700 ;; This function is called by:
  1701 ;;		_printSerialnl
  1702 ;;		_printSerial
  1703 ;; This function uses a non-reentrant model
  1704 ;;
  1705                           
  1706                           	psect	text9
  1707  000F6E                     __ptext9:
  1708                           	opt stack 0
  1709  000F6E                     _sendDataSerial:
  1710                           	opt stack 25
  1711                           
  1712                           ;incstack = 0
  1713                           ;sendDataSerial@c stored from wreg
  1714  000F6E  6E29               	movwf	sendDataSerial@c,c
  1715                           
  1716                           ;Serial.h: 53: TXREG = c;
  1717  000F70  C029  FFAD         	movff	sendDataSerial@c,4013	;volatile
  1718  000F74                     l48:
  1719  000F74  B2AC               	btfsc	4012,1,c	;volatile
  1720  000F76  0012               	return	
  1721  000F78  D7FD               	goto	l48
  1722  000F7A                     __end_of_sendDataSerial:
  1723                           	opt stack 0
  1724                           tblptru	equ	0xFF8
  1725                           tblptrh	equ	0xFF7
  1726                           tblptrl	equ	0xFF6
  1727                           tablat	equ	0xFF5
  1728                           prodh	equ	0xFF4
  1729                           prodl	equ	0xFF3
  1730                           intcon	equ	0xFF2
  1731                           wreg	equ	0xFE8
  1732                           postinc2	equ	0xFDE
  1733                           postdec2	equ	0xFDD
  1734                           fsr2h	equ	0xFDA
  1735                           fsr2l	equ	0xFD9
  1736                           status	equ	0xFD8
  1737                           
  1738 ;; *************** function _configADC *****************
  1739 ;; Defined at:
  1740 ;;		line 99 in file "main.c"
  1741 ;; Parameters:    Size  Location     Type
  1742 ;;		None
  1743 ;; Auto vars:     Size  Location     Type
  1744 ;;		None
  1745 ;; Return value:  Size  Location     Type
  1746 ;;                  1    wreg      void 
  1747 ;; Registers used:
  1748 ;;		wreg, status,2
  1749 ;; Tracked objects:
  1750 ;;		On entry : 0/0
  1751 ;;		On exit  : 0/0
  1752 ;;		Unchanged: 0/0
  1753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1754 ;;      Params:         0       0       0       0       0       0       0       0       0
  1755 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1756 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1757 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1758 ;;Total ram usage:        0 bytes
  1759 ;; Hardware stack levels used:    1
  1760 ;; Hardware stack levels required when called:    4
  1761 ;; This function calls:
  1762 ;;		Nothing
  1763 ;; This function is called by:
  1764 ;;		_main
  1765 ;; This function uses a non-reentrant model
  1766 ;;
  1767                           
  1768                           	psect	text10
  1769  000F2E                     __ptext10:
  1770                           	opt stack 0
  1771  000F2E                     _configADC:
  1772                           	opt stack 26
  1773                           
  1774                           ;main.c: 101: ADCON1 = 0x00;
  1775                           
  1776                           ;incstack = 0
  1777  000F2E  0E00               	movlw	0
  1778  000F30  6EC1               	movwf	4033,c	;volatile
  1779                           
  1780                           ;main.c: 102: ADCON2 = 0b10010010;
  1781  000F32  0E92               	movlw	146
  1782  000F34  6EC0               	movwf	4032,c	;volatile
  1783                           
  1784                           ;main.c: 103: TRISA = 0xFF;;
  1785  000F36  6892               	setf	3986,c	;volatile
  1786                           
  1787                           ;main.c: 104: PIE1bits.ADIE = 1;
  1788  000F38  8C9D               	bsf	3997,6,c	;volatile
  1789                           
  1790                           ;main.c: 105: PIR1bits.ADIF = 0;
  1791  000F3A  9C9E               	bcf	3998,6,c	;volatile
  1792                           
  1793                           ;main.c: 106: INTCONbits.GIE = 1;
  1794  000F3C  8EF2               	bsf	intcon,7,c	;volatile
  1795                           
  1796                           ;main.c: 107: INTCONbits.PEIE = 1;
  1797  000F3E  8CF2               	bsf	intcon,6,c	;volatile
  1798  000F40  0012               	return		;funcret
  1799  000F42                     __end_of_configADC:
  1800                           	opt stack 0
  1801                           tblptru	equ	0xFF8
  1802                           tblptrh	equ	0xFF7
  1803                           tblptrl	equ	0xFF6
  1804                           tablat	equ	0xFF5
  1805                           prodh	equ	0xFF4
  1806                           prodl	equ	0xFF3
  1807                           intcon	equ	0xFF2
  1808                           wreg	equ	0xFE8
  1809                           postinc2	equ	0xFDE
  1810                           postdec2	equ	0xFDD
  1811                           fsr2h	equ	0xFDA
  1812                           fsr2l	equ	0xFD9
  1813                           status	equ	0xFD8
  1814                           
  1815 ;; *************** function _ISR *****************
  1816 ;; Defined at:
  1817 ;;		line 124 in file "main.c"
  1818 ;; Parameters:    Size  Location     Type
  1819 ;;		None
  1820 ;; Auto vars:     Size  Location     Type
  1821 ;;		None
  1822 ;; Return value:  Size  Location     Type
  1823 ;;                  1    wreg      void 
  1824 ;; Registers used:
  1825 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1826 ;; Tracked objects:
  1827 ;;		On entry : 0/0
  1828 ;;		On exit  : 0/0
  1829 ;;		Unchanged: 0/0
  1830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1831 ;;      Params:         0       0       0       0       0       0       0       0       0
  1832 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1833 ;;      Temps:         14       0       0       0       0       0       0       0       0
  1834 ;;      Totals:        14       0       0       0       0       0       0       0       0
  1835 ;;Total ram usage:       14 bytes
  1836 ;; Hardware stack levels used:    1
  1837 ;; Hardware stack levels required when called:    3
  1838 ;; This function calls:
  1839 ;;		_auxRead
  1840 ;; This function is called by:
  1841 ;;		Interrupt level 2
  1842 ;; This function uses a non-reentrant model
  1843 ;;
  1844                           
  1845                           	psect	intcode
  1846  000008                     __pintcode:
  1847                           	opt stack 0
  1848  000008                     _ISR:
  1849                           	opt stack 25
  1850                           
  1851                           ;incstack = 0
  1852  000008  8237               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1853  00000A  ED59  F006         	call	int_func,f	;refresh shadow registers
  1854                           tblptru	equ	0xFF8
  1855                           tblptrh	equ	0xFF7
  1856                           tblptrl	equ	0xFF6
  1857                           tablat	equ	0xFF5
  1858                           prodh	equ	0xFF4
  1859                           prodl	equ	0xFF3
  1860                           intcon	equ	0xFF2
  1861                           wreg	equ	0xFE8
  1862                           postinc2	equ	0xFDE
  1863                           postdec2	equ	0xFDD
  1864                           fsr2h	equ	0xFDA
  1865                           fsr2l	equ	0xFD9
  1866                           status	equ	0xFD8
  1867                           
  1868                           	psect	intcode_body
  1869  000CB2                     __pintcode_body:
  1870                           	opt stack 25
  1871  000CB2                     int_func:
  1872                           	opt stack 25
  1873  000CB2  0006               	pop		; remove dummy address from shadow register refresh
  1874  000CB4  CFFA F01B          	movff	pclath,??_ISR
  1875  000CB8  CFFB F01C          	movff	pclatu,??_ISR+1
  1876  000CBC  CFE9 F01D          	movff	fsr0l,??_ISR+2
  1877  000CC0  CFEA F01E          	movff	fsr0h,??_ISR+3
  1878  000CC4  CFE1 F01F          	movff	fsr1l,??_ISR+4
  1879  000CC8  CFE2 F020          	movff	fsr1h,??_ISR+5
  1880  000CCC  CFD9 F021          	movff	fsr2l,??_ISR+6
  1881  000CD0  CFDA F022          	movff	fsr2h,??_ISR+7
  1882  000CD4  CFF3 F023          	movff	prodl,??_ISR+8
  1883  000CD8  CFF4 F024          	movff	prodh,??_ISR+9
  1884  000CDC  CFF6 F025          	movff	tblptrl,??_ISR+10
  1885  000CE0  CFF7 F026          	movff	tblptrh,??_ISR+11
  1886  000CE4  CFF8 F027          	movff	tblptru,??_ISR+12
  1887  000CE8  CFF5 F028          	movff	tablat,??_ISR+13
  1888                           
  1889                           ;main.c: 125: if(PIR1bits.ADIF == 1){
  1890  000CEC  AC9E               	btfss	3998,6,c	;volatile
  1891  000CEE  D003               	goto	i2l99
  1892                           
  1893                           ;main.c: 126: auxRead();
  1894  000CF0  EC87  F007         	call	_auxRead	;wreg free
  1895                           
  1896                           ;main.c: 127: PIR1bits.ADIF = 0;
  1897  000CF4  9C9E               	bcf	3998,6,c	;volatile
  1898  000CF6                     i2l99:
  1899  000CF6  C028  FFF5         	movff	??_ISR+13,tablat
  1900  000CFA  C027  FFF8         	movff	??_ISR+12,tblptru
  1901  000CFE  C026  FFF7         	movff	??_ISR+11,tblptrh
  1902  000D02  C025  FFF6         	movff	??_ISR+10,tblptrl
  1903  000D06  C024  FFF4         	movff	??_ISR+9,prodh
  1904  000D0A  C023  FFF3         	movff	??_ISR+8,prodl
  1905  000D0E  C022  FFDA         	movff	??_ISR+7,fsr2h
  1906  000D12  C021  FFD9         	movff	??_ISR+6,fsr2l
  1907  000D16  C020  FFE2         	movff	??_ISR+5,fsr1h
  1908  000D1A  C01F  FFE1         	movff	??_ISR+4,fsr1l
  1909  000D1E  C01E  FFEA         	movff	??_ISR+3,fsr0h
  1910  000D22  C01D  FFE9         	movff	??_ISR+2,fsr0l
  1911  000D26  C01C  FFFB         	movff	??_ISR+1,pclatu
  1912  000D2A  C01B  FFFA         	movff	??_ISR,pclath
  1913  000D2E  9237               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1914  000D30  0011               	retfie		f
  1915  000D32                     __end_of_ISR:
  1916                           	opt stack 0
  1917                           pclatu	equ	0xFFB
  1918                           pclath	equ	0xFFA
  1919                           tblptru	equ	0xFF8
  1920                           tblptrh	equ	0xFF7
  1921                           tblptrl	equ	0xFF6
  1922                           tablat	equ	0xFF5
  1923                           prodh	equ	0xFF4
  1924                           prodl	equ	0xFF3
  1925                           intcon	equ	0xFF2
  1926                           fsr0h	equ	0xFEA
  1927                           fsr0l	equ	0xFE9
  1928                           wreg	equ	0xFE8
  1929                           fsr1h	equ	0xFE2
  1930                           fsr1l	equ	0xFE1
  1931                           postinc2	equ	0xFDE
  1932                           postdec2	equ	0xFDD
  1933                           fsr2h	equ	0xFDA
  1934                           fsr2l	equ	0xFD9
  1935                           status	equ	0xFD8
  1936                           
  1937 ;; *************** function _auxRead *****************
  1938 ;; Defined at:
  1939 ;;		line 120 in file "main.c"
  1940 ;; Parameters:    Size  Location     Type
  1941 ;;		None
  1942 ;; Auto vars:     Size  Location     Type
  1943 ;;		None
  1944 ;; Return value:  Size  Location     Type
  1945 ;;                  1    wreg      void 
  1946 ;; Registers used:
  1947 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1948 ;; Tracked objects:
  1949 ;;		On entry : 0/0
  1950 ;;		On exit  : 0/0
  1951 ;;		Unchanged: 0/0
  1952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1953 ;;      Params:         0       0       0       0       0       0       0       0       0
  1954 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1955 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1956 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1957 ;;Total ram usage:        2 bytes
  1958 ;; Hardware stack levels used:    1
  1959 ;; Hardware stack levels required when called:    2
  1960 ;; This function calls:
  1961 ;;		i2_printf
  1962 ;; This function is called by:
  1963 ;;		_ISR
  1964 ;; This function uses a non-reentrant model
  1965 ;;
  1966                           
  1967                           	psect	text12
  1968  000F0E                     __ptext12:
  1969                           	opt stack 0
  1970  000F0E                     _auxRead:
  1971                           	opt stack 25
  1972                           
  1973                           ;main.c: 121: printf(" %d", ((ADRESH << 8) + ADRESL));
  1974                           
  1975                           ;incstack = 0
  1976  000F0E  0E5C               	movlw	low STR_1
  1977  000F10  6E0D               	movwf	i2printf@f,c
  1978  000F12  0E08               	movlw	high STR_1
  1979  000F14  6E0E               	movwf	i2printf@f+1,c
  1980  000F16  50C4               	movf	4036,w,c	;volatile
  1981  000F18  6E1A               	movwf	(??_auxRead+1)& (0+255),c
  1982  000F1A  6A19               	clrf	??_auxRead& (0+255),c
  1983  000F1C  50C3               	movf	4035,w,c	;volatile
  1984  000F1E  2419               	addwf	??_auxRead,w,c
  1985  000F20  6E0F               	movwf	?i2_printf+2,c
  1986  000F22  0E00               	movlw	0
  1987  000F24  201A               	addwfc	??_auxRead+1,w,c
  1988  000F26  6E10               	movwf	?i2_printf+3,c
  1989  000F28  ECD8  F004         	call	i2_printf	;wreg free
  1990  000F2C  0012               	return		;funcret
  1991  000F2E                     __end_of_auxRead:
  1992                           	opt stack 0
  1993                           pclatu	equ	0xFFB
  1994                           pclath	equ	0xFFA
  1995                           tblptru	equ	0xFF8
  1996                           tblptrh	equ	0xFF7
  1997                           tblptrl	equ	0xFF6
  1998                           tablat	equ	0xFF5
  1999                           prodh	equ	0xFF4
  2000                           prodl	equ	0xFF3
  2001                           intcon	equ	0xFF2
  2002                           fsr0h	equ	0xFEA
  2003                           fsr0l	equ	0xFE9
  2004                           wreg	equ	0xFE8
  2005                           fsr1h	equ	0xFE2
  2006                           fsr1l	equ	0xFE1
  2007                           postinc2	equ	0xFDE
  2008                           postdec2	equ	0xFDD
  2009                           fsr2h	equ	0xFDA
  2010                           fsr2l	equ	0xFD9
  2011                           status	equ	0xFD8
  2012                           
  2013 ;; *************** function i2_printf *****************
  2014 ;; Defined at:
  2015 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  2016 ;; Parameters:    Size  Location     Type
  2017 ;;  f               2   12[COMRAM] PTR const unsigned char 
  2018 ;;		 -> STR_4(41), STR_1(4), 
  2019 ;; Auto vars:     Size  Location     Type
  2020 ;;  printf          4    0        struct .
  2021 ;;  printf          3    0        PTR const unsigned char 
  2022 ;;  printf          2   21[COMRAM] unsigned int 
  2023 ;;  printf          2   17[COMRAM] PTR void [1]
  2024 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2025 ;;  printf          2    0        unsigned int 
  2026 ;;  printf          1   23[COMRAM] char 
  2027 ;;  printf          1   20[COMRAM] char 
  2028 ;;  printf          1   19[COMRAM] unsigned char 
  2029 ;; Return value:  Size  Location     Type
  2030 ;;                  2   12[COMRAM] int 
  2031 ;; Registers used:
  2032 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2033 ;; Tracked objects:
  2034 ;;		On entry : 0/0
  2035 ;;		On exit  : 0/0
  2036 ;;		Unchanged: 0/0
  2037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2038 ;;      Params:         4       0       0       0       0       0       0       0       0
  2039 ;;      Locals:         7       0       0       0       0       0       0       0       0
  2040 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2041 ;;      Totals:        12       0       0       0       0       0       0       0       0
  2042 ;;Total ram usage:       12 bytes
  2043 ;; Hardware stack levels used:    1
  2044 ;; Hardware stack levels required when called:    1
  2045 ;; This function calls:
  2046 ;;		i2___lwdiv
  2047 ;;		i2___lwmod
  2048 ;;		i2_putch
  2049 ;; This function is called by:
  2050 ;;		_auxRead
  2051 ;; This function uses a non-reentrant model
  2052 ;;
  2053                           
  2054                           	psect	text13
  2055  0009B0                     __ptext13:
  2056                           	opt stack 0
  2057  0009B0                     i2_printf:
  2058                           	opt stack 25
  2059                           
  2060                           ;doprnt.c: 466: va_list ap;
  2061                           ;doprnt.c: 499: signed char c;
  2062                           ;doprnt.c: 506: signed char prec;
  2063                           ;doprnt.c: 508: unsigned char flag;
  2064                           ;doprnt.c: 523: union {
  2065                           ;doprnt.c: 524: unsigned long vd;
  2066                           ;doprnt.c: 525: double integ;
  2067                           ;doprnt.c: 526: } tmpval;
  2068                           ;doprnt.c: 528: unsigned int val;
  2069                           ;doprnt.c: 529: unsigned len;
  2070                           ;doprnt.c: 530: const char * cp;
  2071                           ;doprnt.c: 533: *ap = __va_start();
  2072                           
  2073                           ;incstack = 0
  2074  0009B0  0E0F               	movlw	low (?i2_printf+2)
  2075  0009B2  6E12               	movwf	i2printf@ap,c
  2076  0009B4  0E00               	movlw	high (?i2_printf+2)
  2077  0009B6  6E13               	movwf	i2printf@ap+1,c
  2078                           
  2079                           ;doprnt.c: 536: while(c = *f++) {
  2080  0009B8  D07D               	goto	i2l1245
  2081  0009BA                     i2l1199:
  2082                           
  2083                           ;doprnt.c: 538: if(c != '%')
  2084  0009BA  0E25               	movlw	37
  2085  0009BC  1818               	xorwf	i2printf@c,w,c
  2086  0009BE  B4D8               	btfsc	status,2,c
  2087  0009C0  D004               	goto	i2l1203
  2088                           
  2089                           ;doprnt.c: 540: {
  2090                           ;doprnt.c: 541: (putch(c) );
  2091  0009C2  5018               	movf	i2printf@c,w,c
  2092  0009C4  ECBD  F007         	call	i2_putch
  2093                           
  2094                           ;doprnt.c: 542: continue;
  2095  0009C8  D075               	goto	i2l1245
  2096  0009CA                     i2l1203:
  2097                           
  2098                           ;doprnt.c: 543: }
  2099                           ;doprnt.c: 548: flag = 0;
  2100  0009CA  0E00               	movlw	0
  2101  0009CC  6E14               	movwf	i2printf@flag,c
  2102                           
  2103                           ;doprnt.c: 822: }
  2104                           
  2105                           ;doprnt.c: 813: continue;
  2106                           
  2107                           ;doprnt.c: 802: default:
  2108                           
  2109                           ;doprnt.c: 698: case 'i':
  2110                           ;doprnt.c: 699: break;
  2111                           
  2112                           ;doprnt.c: 697: case 'd':
  2113                           
  2114                           ;doprnt.c: 638: goto alldone;
  2115                           
  2116                           ;doprnt.c: 637: case 0:
  2117                           
  2118                           ;doprnt.c: 635: switch(c = *f++) {
  2119  0009CE  C00D  FFF6         	movff	i2printf@f,tblptrl
  2120  0009D2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  2121  0009D6  4A0D               	infsnz	i2printf@f,f,c
  2122  0009D8  2A0E               	incf	i2printf@f+1,f,c
  2123  0009DA                     	if	0	;tblptru may be non-zero
  2124  0009DA                     	endif
  2125  0009DA                     	if	0	;tblptru may be non-zero
  2126  0009DA                     	endif
  2127  0009DA  0008               	tblrd		*
  2128  0009DC  CFF5 F018          	movff	tablat,i2printf@c
  2129  0009E0  5018               	movf	i2printf@c,w,c
  2130                           
  2131                           ; Switch size 1, requested type "space"
  2132                           ; Number of cases is 3, Range of values is 0 to 105
  2133                           ; switch strategies available:
  2134                           ; Name         Instructions Cycles
  2135                           ; simple_byte           10     6 (average)
  2136                           ;	Chosen strategy is simple_byte
  2137  0009E2  0A00               	xorlw	0	; case 0
  2138  0009E4  B4D8               	btfsc	status,2,c
  2139  0009E6  0012               	return	
  2140  0009E8  0A64               	xorlw	100	; case 100
  2141  0009EA  B4D8               	btfsc	status,2,c
  2142  0009EC  D003               	goto	i2l1209
  2143  0009EE  0A0D               	xorlw	13	; case 105
  2144  0009F0  A4D8               	btfss	status,2,c
  2145  0009F2  D060               	goto	i2l1245
  2146  0009F4                     i2l1209:
  2147                           
  2148                           ;doprnt.c: 1253: {
  2149                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2150  0009F4  C012  FFD9         	movff	i2printf@ap,fsr2l
  2151  0009F8  C013  FFDA         	movff	i2printf@ap+1,fsr2h
  2152  0009FC  CFDE F016          	movff	postinc2,i2printf@val
  2153  000A00  CFDD F017          	movff	postdec2,i2printf@val+1
  2154  000A04  0E02               	movlw	2
  2155  000A06  2612               	addwf	i2printf@ap,f,c
  2156  000A08  0E00               	movlw	0
  2157  000A0A  2213               	addwfc	i2printf@ap+1,f,c
  2158                           
  2159                           ;doprnt.c: 1261: if((int)val < 0) {
  2160  000A0C  AE17               	btfss	i2printf@val+1,7,c
  2161  000A0E  D006               	goto	i2l1219
  2162                           
  2163                           ;doprnt.c: 1262: flag |= 0x03;
  2164  000A10  0E03               	movlw	3
  2165  000A12  1214               	iorwf	i2printf@flag,f,c
  2166                           
  2167                           ;doprnt.c: 1263: val = -val;
  2168  000A14  6C16               	negf	i2printf@val,c
  2169  000A16  1E17               	comf	i2printf@val+1,f,c
  2170  000A18  B0D8               	btfsc	status,0,c
  2171  000A1A  2A17               	incf	i2printf@val+1,f,c
  2172  000A1C                     i2l1219:
  2173                           
  2174                           ;doprnt.c: 1264: }
  2175                           ;doprnt.c: 1266: }
  2176                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2177  000A1C  0E01               	movlw	1
  2178  000A1E  6E18               	movwf	i2printf@c,c
  2179  000A20                     i2l1221:
  2180  000A20  0E05               	movlw	5
  2181  000A22  1818               	xorwf	i2printf@c,w,c
  2182  000A24  B4D8               	btfsc	status,2,c
  2183  000A26  D012               	goto	i2l1233
  2184                           
  2185                           ;doprnt.c: 1306: if(val < dpowers[c])
  2186  000A28  5018               	movf	i2printf@c,w,c
  2187  000A2A  0D02               	mullw	2
  2188  000A2C  0E01               	movlw	low _dpowers
  2189  000A2E  24F3               	addwf	prodl,w,c
  2190  000A30  6EF6               	movwf	tblptrl,c
  2191  000A32  0E08               	movlw	high _dpowers
  2192  000A34  20F4               	addwfc	prodh,w,c
  2193  000A36  6EF7               	movwf	tblptrh,c
  2194  000A38                     	if	0	;There are less than 3 active tblptr bytes
  2195  000A38                     	endif
  2196  000A38  0009               	tblrd		*+
  2197  000A3A  50F5               	movf	tablat,w,c
  2198  000A3C  5C16               	subwf	i2printf@val,w,c
  2199  000A3E  0009               	tblrd		*+
  2200  000A40  50F5               	movf	tablat,w,c
  2201  000A42  5817               	subwfb	i2printf@val+1,w,c
  2202  000A44  A0D8               	btfss	status,0,c
  2203  000A46  D002               	goto	i2l1233
  2204                           
  2205                           ;doprnt.c: 1307: break;
  2206  000A48  2A18               	incf	i2printf@c,f,c
  2207  000A4A  D7EA               	goto	i2l1221
  2208  000A4C                     i2l1233:
  2209                           
  2210                           ;doprnt.c: 1422: {
  2211                           ;doprnt.c: 1438: if(flag & 0x03)
  2212  000A4C  C014  F011         	movff	i2printf@flag,??i2_printf
  2213  000A50  0E03               	movlw	3
  2214  000A52  1611               	andwf	??i2_printf,f,c
  2215  000A54  B4D8               	btfsc	status,2,c
  2216  000A56  D003               	goto	i2l1237
  2217                           
  2218                           ;doprnt.c: 1439: (putch('-') );
  2219  000A58  0E2D               	movlw	45
  2220  000A5A  ECBD  F007         	call	i2_putch
  2221  000A5E                     i2l1237:
  2222                           
  2223                           ;doprnt.c: 1469: }
  2224                           ;doprnt.c: 1472: prec = c;
  2225  000A5E  C018  F015         	movff	i2printf@c,i2printf@prec
  2226                           
  2227                           ;doprnt.c: 1474: while(prec--) {
  2228  000A62  D024               	goto	i2l1243
  2229  000A64                     i2l1239:
  2230                           
  2231                           ;doprnt.c: 1478: {
  2232                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2233  000A64  5015               	movf	i2printf@prec,w,c
  2234  000A66  0D02               	mullw	2
  2235  000A68  0E01               	movlw	low _dpowers
  2236  000A6A  24F3               	addwf	prodl,w,c
  2237  000A6C  6EF6               	movwf	tblptrl,c
  2238  000A6E  0E08               	movlw	high _dpowers
  2239  000A70  20F4               	addwfc	prodh,w,c
  2240  000A72  6EF7               	movwf	tblptrh,c
  2241  000A74                     	if	0	;There are less than 3 active tblptr bytes
  2242  000A74                     	endif
  2243  000A74  0009               	tblrd		*+
  2244  000A76  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  2245  000A7A  000A               	tblrd		*-
  2246  000A7C  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  2247  000A80  C016  F001         	movff	i2printf@val,i2___lwdiv@dividend
  2248  000A84  C017  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  2249  000A88  ECFD  F006         	call	i2___lwdiv	;wreg free
  2250  000A8C  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  2251  000A90  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  2252  000A94  0E00               	movlw	0
  2253  000A96  6E0B               	movwf	i2___lwmod@divisor+1,c
  2254  000A98  0E0A               	movlw	10
  2255  000A9A  6E0A               	movwf	i2___lwmod@divisor,c
  2256  000A9C  EC47  F007         	call	i2___lwmod	;wreg free
  2257  000AA0  5008               	movf	?i2___lwmod,w,c
  2258  000AA2  0F30               	addlw	48
  2259  000AA4  6E18               	movwf	i2printf@c,c
  2260                           
  2261                           ;doprnt.c: 1523: }
  2262                           ;doprnt.c: 1524: (putch(c) );
  2263  000AA6  5018               	movf	i2printf@c,w,c
  2264  000AA8  ECBD  F007         	call	i2_putch
  2265  000AAC                     i2l1243:
  2266  000AAC  0615               	decf	i2printf@prec,f,c
  2267  000AAE  2815               	incf	i2printf@prec,w,c
  2268  000AB0  A4D8               	btfss	status,2,c
  2269  000AB2  D7D8               	goto	i2l1239
  2270  000AB4                     i2l1245:
  2271  000AB4  C00D  FFF6         	movff	i2printf@f,tblptrl
  2272  000AB8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  2273  000ABC  4A0D               	infsnz	i2printf@f,f,c
  2274  000ABE  2A0E               	incf	i2printf@f+1,f,c
  2275  000AC0                     	if	0	;tblptru may be non-zero
  2276  000AC0                     	endif
  2277  000AC0                     	if	0	;tblptru may be non-zero
  2278  000AC0                     	endif
  2279  000AC0  0008               	tblrd		*
  2280  000AC2  CFF5 F018          	movff	tablat,i2printf@c
  2281  000AC6  5018               	movf	i2printf@c,w,c
  2282  000AC8  B4D8               	btfsc	status,2,c
  2283  000ACA  0012               	return	
  2284  000ACC  D776               	goto	i2l1199
  2285  000ACE                     __end_ofi2_printf:
  2286                           	opt stack 0
  2287                           pclatu	equ	0xFFB
  2288                           pclath	equ	0xFFA
  2289                           tblptru	equ	0xFF8
  2290                           tblptrh	equ	0xFF7
  2291                           tblptrl	equ	0xFF6
  2292                           tablat	equ	0xFF5
  2293                           prodh	equ	0xFF4
  2294                           prodl	equ	0xFF3
  2295                           intcon	equ	0xFF2
  2296                           fsr0h	equ	0xFEA
  2297                           fsr0l	equ	0xFE9
  2298                           wreg	equ	0xFE8
  2299                           fsr1h	equ	0xFE2
  2300                           fsr1l	equ	0xFE1
  2301                           postinc2	equ	0xFDE
  2302                           postdec2	equ	0xFDD
  2303                           fsr2h	equ	0xFDA
  2304                           fsr2l	equ	0xFD9
  2305                           status	equ	0xFD8
  2306                           
  2307 ;; *************** function i2_putch *****************
  2308 ;; Defined at:
  2309 ;;		line 104 in file "Serial.h"
  2310 ;; Parameters:    Size  Location     Type
  2311 ;;  c               1    wreg     unsigned char 
  2312 ;; Auto vars:     Size  Location     Type
  2313 ;;  c               1    0[COMRAM] unsigned char 
  2314 ;; Return value:  Size  Location     Type
  2315 ;;                  1    wreg      void 
  2316 ;; Registers used:
  2317 ;;		wreg
  2318 ;; Tracked objects:
  2319 ;;		On entry : 0/0
  2320 ;;		On exit  : 0/0
  2321 ;;		Unchanged: 0/0
  2322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2323 ;;      Params:         0       0       0       0       0       0       0       0       0
  2324 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2325 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2326 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2327 ;;Total ram usage:        1 bytes
  2328 ;; Hardware stack levels used:    1
  2329 ;; This function calls:
  2330 ;;		Nothing
  2331 ;; This function is called by:
  2332 ;;		i2_printf
  2333 ;; This function uses a non-reentrant model
  2334 ;;
  2335                           
  2336                           	psect	text14
  2337  000F7A                     __ptext14:
  2338                           	opt stack 0
  2339  000F7A                     i2_putch:
  2340                           	opt stack 25
  2341                           
  2342                           ;incstack = 0
  2343                           ;i2putch@c stored from wreg
  2344  000F7A  6E01               	movwf	i2putch@c,c
  2345                           
  2346                           ;Serial.h: 105: TXREG = c;
  2347  000F7C  C001  FFAD         	movff	i2putch@c,4013	;volatile
  2348  000F80                     i2l81:
  2349  000F80  B2AC               	btfsc	4012,1,c	;volatile
  2350  000F82  0012               	return	
  2351  000F84  D7FD               	goto	i2l81
  2352  000F86                     __end_ofi2_putch:
  2353                           	opt stack 0
  2354                           pclatu	equ	0xFFB
  2355                           pclath	equ	0xFFA
  2356                           tblptru	equ	0xFF8
  2357                           tblptrh	equ	0xFF7
  2358                           tblptrl	equ	0xFF6
  2359                           tablat	equ	0xFF5
  2360                           prodh	equ	0xFF4
  2361                           prodl	equ	0xFF3
  2362                           intcon	equ	0xFF2
  2363                           fsr0h	equ	0xFEA
  2364                           fsr0l	equ	0xFE9
  2365                           wreg	equ	0xFE8
  2366                           fsr1h	equ	0xFE2
  2367                           fsr1l	equ	0xFE1
  2368                           postinc2	equ	0xFDE
  2369                           postdec2	equ	0xFDD
  2370                           fsr2h	equ	0xFDA
  2371                           fsr2l	equ	0xFD9
  2372                           status	equ	0xFD8
  2373                           
  2374 ;; *************** function i2___lwmod *****************
  2375 ;; Defined at:
  2376 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
  2377 ;; Parameters:    Size  Location     Type
  2378 ;;  dividend        2    7[COMRAM] unsigned int 
  2379 ;;  divisor         2    9[COMRAM] unsigned int 
  2380 ;; Auto vars:     Size  Location     Type
  2381 ;;  __lwmod         1   11[COMRAM] unsigned char 
  2382 ;; Return value:  Size  Location     Type
  2383 ;;                  2    7[COMRAM] unsigned int 
  2384 ;; Registers used:
  2385 ;;		wreg, status,2, status,0
  2386 ;; Tracked objects:
  2387 ;;		On entry : 0/0
  2388 ;;		On exit  : 0/0
  2389 ;;		Unchanged: 0/0
  2390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2391 ;;      Params:         4       0       0       0       0       0       0       0       0
  2392 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2393 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2394 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2395 ;;Total ram usage:        5 bytes
  2396 ;; Hardware stack levels used:    1
  2397 ;; This function calls:
  2398 ;;		Nothing
  2399 ;; This function is called by:
  2400 ;;		i2_printf
  2401 ;; This function uses a non-reentrant model
  2402 ;;
  2403                           
  2404                           	psect	text15
  2405  000E8E                     __ptext15:
  2406                           	opt stack 0
  2407  000E8E                     i2___lwmod:
  2408                           	opt stack 25
  2409                           
  2410                           ;incstack = 0
  2411  000E8E  500A               	movf	i2___lwmod@divisor,w,c
  2412  000E90  100B               	iorwf	i2___lwmod@divisor+1,w,c
  2413  000E92  B4D8               	btfsc	status,2,c
  2414  000E94  D018               	goto	i2l550
  2415  000E96  0E01               	movlw	1
  2416  000E98  6E0C               	movwf	i2___lwmod@counter,c
  2417  000E9A  D004               	goto	i2l1103
  2418  000E9C                     i2l1101:
  2419  000E9C  90D8               	bcf	status,0,c
  2420  000E9E  360A               	rlcf	i2___lwmod@divisor,f,c
  2421  000EA0  360B               	rlcf	i2___lwmod@divisor+1,f,c
  2422  000EA2  2A0C               	incf	i2___lwmod@counter,f,c
  2423  000EA4                     i2l1103:
  2424  000EA4  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  2425  000EA6  D7FA               	goto	i2l1101
  2426  000EA8                     i2l1105:
  2427  000EA8  500A               	movf	i2___lwmod@divisor,w,c
  2428  000EAA  5C08               	subwf	i2___lwmod@dividend,w,c
  2429  000EAC  500B               	movf	i2___lwmod@divisor+1,w,c
  2430  000EAE  5809               	subwfb	i2___lwmod@dividend+1,w,c
  2431  000EB0  A0D8               	btfss	status,0,c
  2432  000EB2  D004               	goto	i2l1109
  2433  000EB4  500A               	movf	i2___lwmod@divisor,w,c
  2434  000EB6  5E08               	subwf	i2___lwmod@dividend,f,c
  2435  000EB8  500B               	movf	i2___lwmod@divisor+1,w,c
  2436  000EBA  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  2437  000EBC                     i2l1109:
  2438  000EBC  90D8               	bcf	status,0,c
  2439  000EBE  320B               	rrcf	i2___lwmod@divisor+1,f,c
  2440  000EC0  320A               	rrcf	i2___lwmod@divisor,f,c
  2441  000EC2  2E0C               	decfsz	i2___lwmod@counter,f,c
  2442  000EC4  D7F1               	goto	i2l1105
  2443  000EC6                     i2l550:
  2444  000EC6  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  2445  000ECA  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  2446  000ECE  0012               	return		;funcret
  2447  000ED0                     __end_ofi2___lwmod:
  2448                           	opt stack 0
  2449                           pclatu	equ	0xFFB
  2450                           pclath	equ	0xFFA
  2451                           tblptru	equ	0xFF8
  2452                           tblptrh	equ	0xFF7
  2453                           tblptrl	equ	0xFF6
  2454                           tablat	equ	0xFF5
  2455                           prodh	equ	0xFF4
  2456                           prodl	equ	0xFF3
  2457                           intcon	equ	0xFF2
  2458                           fsr0h	equ	0xFEA
  2459                           fsr0l	equ	0xFE9
  2460                           wreg	equ	0xFE8
  2461                           fsr1h	equ	0xFE2
  2462                           fsr1l	equ	0xFE1
  2463                           postinc2	equ	0xFDE
  2464                           postdec2	equ	0xFDD
  2465                           fsr2h	equ	0xFDA
  2466                           fsr2l	equ	0xFD9
  2467                           status	equ	0xFD8
  2468                           
  2469 ;; *************** function i2___lwdiv *****************
  2470 ;; Defined at:
  2471 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwdiv.c"
  2472 ;; Parameters:    Size  Location     Type
  2473 ;;  dividend        2    0[COMRAM] unsigned int 
  2474 ;;  divisor         2    2[COMRAM] unsigned int 
  2475 ;; Auto vars:     Size  Location     Type
  2476 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  2477 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  2478 ;; Return value:  Size  Location     Type
  2479 ;;                  2    0[COMRAM] unsigned int 
  2480 ;; Registers used:
  2481 ;;		wreg, status,2, status,0
  2482 ;; Tracked objects:
  2483 ;;		On entry : 0/0
  2484 ;;		On exit  : 0/0
  2485 ;;		Unchanged: 0/0
  2486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2487 ;;      Params:         4       0       0       0       0       0       0       0       0
  2488 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2489 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2490 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2491 ;;Total ram usage:        7 bytes
  2492 ;; Hardware stack levels used:    1
  2493 ;; This function calls:
  2494 ;;		Nothing
  2495 ;; This function is called by:
  2496 ;;		i2_printf
  2497 ;; This function uses a non-reentrant model
  2498 ;;
  2499                           
  2500                           	psect	text16
  2501  000DFA                     __ptext16:
  2502                           	opt stack 0
  2503  000DFA                     i2___lwdiv:
  2504                           	opt stack 25
  2505                           
  2506                           ;incstack = 0
  2507  000DFA  0E00               	movlw	0
  2508  000DFC  6E06               	movwf	i2___lwdiv@quotient+1,c
  2509  000DFE  0E00               	movlw	0
  2510  000E00  6E05               	movwf	i2___lwdiv@quotient,c
  2511  000E02  5003               	movf	i2___lwdiv@divisor,w,c
  2512  000E04  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  2513  000E06  B4D8               	btfsc	status,2,c
  2514  000E08  D01C               	goto	i2l540
  2515  000E0A  0E01               	movlw	1
  2516  000E0C  6E07               	movwf	i2___lwdiv@counter,c
  2517  000E0E  D004               	goto	i2l1083
  2518  000E10                     i2l1081:
  2519  000E10  90D8               	bcf	status,0,c
  2520  000E12  3603               	rlcf	i2___lwdiv@divisor,f,c
  2521  000E14  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  2522  000E16  2A07               	incf	i2___lwdiv@counter,f,c
  2523  000E18                     i2l1083:
  2524  000E18  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  2525  000E1A  D7FA               	goto	i2l1081
  2526  000E1C                     i2l1085:
  2527  000E1C  90D8               	bcf	status,0,c
  2528  000E1E  3605               	rlcf	i2___lwdiv@quotient,f,c
  2529  000E20  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  2530  000E22  5003               	movf	i2___lwdiv@divisor,w,c
  2531  000E24  5C01               	subwf	i2___lwdiv@dividend,w,c
  2532  000E26  5004               	movf	i2___lwdiv@divisor+1,w,c
  2533  000E28  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  2534  000E2A  A0D8               	btfss	status,0,c
  2535  000E2C  D005               	goto	i2l1093
  2536  000E2E  5003               	movf	i2___lwdiv@divisor,w,c
  2537  000E30  5E01               	subwf	i2___lwdiv@dividend,f,c
  2538  000E32  5004               	movf	i2___lwdiv@divisor+1,w,c
  2539  000E34  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  2540  000E36  8005               	bsf	i2___lwdiv@quotient,0,c
  2541  000E38                     i2l1093:
  2542  000E38  90D8               	bcf	status,0,c
  2543  000E3A  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  2544  000E3C  3203               	rrcf	i2___lwdiv@divisor,f,c
  2545  000E3E  2E07               	decfsz	i2___lwdiv@counter,f,c
  2546  000E40  D7ED               	goto	i2l1085
  2547  000E42                     i2l540:
  2548  000E42  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  2549  000E46  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  2550  000E4A  0012               	return		;funcret
  2551  000E4C                     __end_ofi2___lwdiv:
  2552                           	opt stack 0
  2553                           pclatu	equ	0xFFB
  2554                           pclath	equ	0xFFA
  2555                           tblptru	equ	0xFF8
  2556                           tblptrh	equ	0xFF7
  2557                           tblptrl	equ	0xFF6
  2558                           tablat	equ	0xFF5
  2559                           prodh	equ	0xFF4
  2560                           prodl	equ	0xFF3
  2561                           intcon	equ	0xFF2
  2562                           fsr0h	equ	0xFEA
  2563                           fsr0l	equ	0xFE9
  2564                           wreg	equ	0xFE8
  2565                           fsr1h	equ	0xFE2
  2566                           fsr1l	equ	0xFE1
  2567                           postinc2	equ	0xFDE
  2568                           postdec2	equ	0xFDD
  2569                           fsr2h	equ	0xFDA
  2570                           fsr2l	equ	0xFD9
  2571                           status	equ	0xFD8
  2572                           pclatu	equ	0xFFB
  2573                           pclath	equ	0xFFA
  2574                           tblptru	equ	0xFF8
  2575                           tblptrh	equ	0xFF7
  2576                           tblptrl	equ	0xFF6
  2577                           tablat	equ	0xFF5
  2578                           prodh	equ	0xFF4
  2579                           prodl	equ	0xFF3
  2580                           intcon	equ	0xFF2
  2581                           fsr0h	equ	0xFEA
  2582                           fsr0l	equ	0xFE9
  2583                           wreg	equ	0xFE8
  2584                           fsr1h	equ	0xFE2
  2585                           fsr1l	equ	0xFE1
  2586                           postinc2	equ	0xFDE
  2587                           postdec2	equ	0xFDD
  2588                           fsr2h	equ	0xFDA
  2589                           fsr2l	equ	0xFD9
  2590                           status	equ	0xFD8
  2591                           
  2592                           	psect	rparam
  2593  0000                     pclatu	equ	0xFFB
  2594                           pclath	equ	0xFFA
  2595                           tblptru	equ	0xFF8
  2596                           tblptrh	equ	0xFF7
  2597                           tblptrl	equ	0xFF6
  2598                           tablat	equ	0xFF5
  2599                           prodh	equ	0xFF4
  2600                           prodl	equ	0xFF3
  2601                           intcon	equ	0xFF2
  2602                           fsr0h	equ	0xFEA
  2603                           fsr0l	equ	0xFE9
  2604                           wreg	equ	0xFE8
  2605                           fsr1h	equ	0xFE2
  2606                           fsr1l	equ	0xFE1
  2607                           postinc2	equ	0xFDE
  2608                           postdec2	equ	0xFDD
  2609                           fsr2h	equ	0xFDA
  2610                           fsr2l	equ	0xFD9
  2611                           status	equ	0xFD8
  2612                           
  2613                           	psect	temp
  2614  000037                     btemp:
  2615                           	opt stack 0
  2616  000037                     	ds	1
  2617  0000                     int$flags	set	btemp
  2618                           pclatu	equ	0xFFB
  2619                           pclath	equ	0xFFA
  2620                           tblptru	equ	0xFF8
  2621                           tblptrh	equ	0xFF7
  2622                           tblptrl	equ	0xFF6
  2623                           tablat	equ	0xFF5
  2624                           prodh	equ	0xFF4
  2625                           prodl	equ	0xFF3
  2626                           intcon	equ	0xFF2
  2627                           fsr0h	equ	0xFEA
  2628                           fsr0l	equ	0xFE9
  2629                           wreg	equ	0xFE8
  2630                           fsr1h	equ	0xFE2
  2631                           fsr1l	equ	0xFE1
  2632                           postinc2	equ	0xFDE
  2633                           postdec2	equ	0xFDD
  2634                           fsr2h	equ	0xFDA
  2635                           fsr2l	equ	0xFD9
  2636                           status	equ	0xFD8


Data Sizes:
    Strings     85
    Constant    10
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     54      54
    BANK0           160     16      16
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 41
		 -> STR_4(CODE[41]), STR_1(CODE[4]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    printSerialnl@String	PTR unsigned char  size(2) Largest target is 22
		 -> STR_3(CODE[22]), STR_2(CODE[18]), 

    printSerialnl@p	PTR unsigned char  size(2) Largest target is 22
		 -> STR_3(CODE[22]), STR_2(CODE[18]), 


Critical Paths under _main in COMRAM

    _startSerial->___aldiv
    _printf->___lwmod
    ___lwmod->___lwdiv
    _printSerialnl->_sendDataSerial

Critical Paths under _ISR in COMRAM

    _ISR->_auxRead
    _auxRead->i2_printf
    i2_printf->i2___lwmod
    i2___lwmod->i2___lwdiv

Critical Paths under _main in BANK0

    _main->_startSerial

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2974
                          _configADC
                      _printSerialnl
                             _printf
                            _readADC
                        _startSerial
 ---------------------------------------------------------------------------------
 (1) _startSerial                                         20    10     10    1482
                                              0 BANK0     16     6     10
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     908
                                             40 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _readADC                                              2     0      2      98
                                             40 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    1159
                                             52 COMRAM     1     1      0
                                              0 BANK0     11     7      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                             40 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                             47 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                             40 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _printSerialnl                                        4     2      2     235
                                             41 COMRAM     4     2      2
                     _sendDataSerial
 ---------------------------------------------------------------------------------
 (2) _sendDataSerial                                       1     1      0      15
                                             40 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _configADC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                 14    14      0     859
                                             26 COMRAM    14    14      0
                            _auxRead
 ---------------------------------------------------------------------------------
 (4) _auxRead                                              2     2      0     859
                                             24 COMRAM     2     2      0
                           i2_printf
 ---------------------------------------------------------------------------------
 (5) i2_printf                                            21    17      4     859
                                             12 COMRAM    12     8      4
                          i2___lwdiv
                          i2___lwmod
                            i2_putch
 ---------------------------------------------------------------------------------
 (6) i2_putch                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) i2___lwdiv                                            7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _configADC
   _printSerialnl
     _sendDataSerial
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
   _readADC
   _startSerial
     ___aldiv

 _ISR (ROOT)
   _auxRead
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2_putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5E     36      36       1       57.4%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     10      10       5       10.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Wed Jul 11 19:45:48 2018

                     l41 0ADE                       l42 0AE0                       l43 0B74  
                     l48 0F74                       l81 0F68              __CFG_BOR$ON 000000  
     i2___lwdiv@dividend 0001              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000              _startSerial 0ACE  
           __CFG_CP3$OFF 000000              __CFG_LVP$ON 000000                      l104 0DA6  
                    l540 0DF0                      l550 0E84             __CFG_CPB$OFF 000000  
           __CFG_CPD$OFF 000000                      _ISR 0008                      wreg 000FE8  
                   ?_ISR 0001             __CFG_WDT$OFF 000000                     l1123 0C02  
                   l1135 0C3C                     l1151 0C8A                     l1321 0920  
                   l1137 0C48                     l1129 0C1A                     l1331 0986  
                   l1307 08E4                     l1155 0CA0                     l1147 0C7C  
                   l1139 0C4C                     l1165 0DBE                     l1325 0932  
                   l1309 08EA                     l1333 0992                     l1271 0EEE  
                   l1167 0DC6                     l1327 0938                     l1177 0DE6  
                   l1169 0DCA                     l1193 0E7A                     l1185 0E5A  
                   l1267 0EDA                     l1187 0E62                     l1291 0884  
                   l1189 0E66                     l1287 0870                     l1297 08B4  
                   STR_1 085C                     STR_2 084A                     STR_3 0834  
                   STR_4 080B                     i2l81 0F80                     i2l99 0CF6  
        sendDataSerial@c 0029   __end_of_sendDataSerial 0F7A                     _main 0D32  
                   fsr0h 000FEA                     fsr1h 000FE2       i2___lwdiv@quotient 0005  
                   fsr2h 000FDA                     fsr0l 000FE9                     fsr1l 000FE1  
                   fsr2l 000FD9                     btemp 0037                     prodh 000FF4  
                   prodl 000FF3                     start 000E            __CFG_IESO$OFF 000000  
        __end_ofi2_putch 0F86            __CFG_MCLRE$ON 000000             ___param_bank 000000  
                  ??_ISR 001B      printSerialnl@String 002A            __CFG_PLLDIV$5 000000  
         __CFG_CCP2MX$ON 000000          __end_of___aldiv 0CB2                    ?_main 0001  
        __end_of___lwdiv 0DFA          __end_of___lwmod 0E8E                    i2l540 0E42  
                  i2l550 0EC6                    _RCREG 000FAE                    _SPBRG 000FAF  
          __CFG_USBDIV$1 000000                    _TRISA 000F92          ??_printSerialnl 002C  
                  _TXREG 000FAD            __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000          __end_of_auxRead 0F2E  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
        __end_of_readADC 0F54           __CFG_EBTRB$OFF 000000          __end_of_dpowers 080B  
                  _putch 0F62                    pclath 000FFA                    tablat 000FF5  
        ?_sendDataSerial 0001                    status 000FD8           __CFG_ICPRT$OFF 000000  
         __CFG_PBADEN$ON 000000         __end_ofi2_printf 0ACE       __size_ofi2___lwdiv 0052  
     __size_ofi2___lwmod 0042          __initialization 0F54             __end_of_main 0DA8  
             i2printf@ap 0012                   ??_main 0037            __activetblptr 000002  
         printSerialnl@p 002C                   _ADCON0 000FC2                   _ADCON1 000FC1  
                 _ADCON2 000FC0                   _ADRESH 000FC4                   _ADRESL 000FC3  
                 ?_putch 0001                   i2l1101 0E9C                   i2l1103 0EA4  
                 i2l1105 0EA8                   i2l1203 09CA                   i2l1109 0EBC  
                 i2l1221 0A20                   i2l1081 0E10                   i2l1233 0A4C  
                 i2l1209 09F4                   i2l1083 0E18                   i2l1243 0AAC  
                 i2l1219 0A1C                   i2l1093 0E38                   i2l1085 0E1C  
                 i2l1237 0A5E                   i2l1245 0AB4                   i2l1239 0A64  
                 i2l1199 09BA                ??i2_putch 0001                   _SPBRGH 000FB0  
         __CFG_XINST$OFF 000000                ??___aldiv 0031           __CFG_STVREN$ON 000000  
           startSerial@n 006E                ??___lwdiv 002D                ??___lwmod 0034  
                 _printf 0862                ??_auxRead 0019                ??_readADC 002B  
      __end_ofi2___lwdiv 0E4C             __mediumconst 0000        __end_ofi2___lwmod 0ED0  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
                 putch@c 0029               __accesstop 0060  __end_of__initialization 0F54  
          ___rparam_used 000001       i2___lwmod@dividend 0008           __pcstackCOMRAM 0001  
          __end_of_putch 0F6E              i2printf@val 0016             ?_startSerial 0060  
     __size_of_configADC 0014                ?i2_printf 000D                  ??_putch 0029  
                ?_printf 0060               ??i2_printf 0011         ??_sendDataSerial 0029  
        __CFG_VREGEN$OFF 000000                  i2_putch 0F7A                  __Hparam 0000  
                __Lparam 0000        __end_of_configADC 0F42                  ___aldiv 0BE6  
                ___lwdiv 0DA8                  ___lwmod 0E4C             __psmallconst 0800  
                __pcinit 0F54                  __ramtop 0800                  __ptext0 0D32  
                __ptext1 0ACE                  __ptext2 0BE6                  __ptext3 0F42  
                __ptext4 0862                  __ptext5 0F62                  __ptext6 0E4C  
                __ptext7 0DA8                  __ptext8 0ED0                  __ptext9 0F6E  
        __size_of_printf 014E                  _auxRead 0F0E                  _readADC 0F42  
           __size_of_ISR 0D2A                  _dpowers 0801         ___aldiv@dividend 0029  
  __end_of_printSerialnl 0F0E           __pintcode_body 0CB2     end_of_initialization 0F54  
          __Lmediumconst 0000                  int_func 0CB2                _RCSTAbits 000FAB  
                printf@c 006A                  printf@f 0060         ___aldiv@quotient 0033  
                postdec2 000FDD                  postinc2 000FDE     __size_of_startSerial 0118  
              _TRISCbits 000F94        i2___lwdiv@divisor 0003                i2___lwdiv 0DFA  
              i2___lwmod 0E8E        i2___lwdiv@counter 0007                _TXSTAbits 000FAC  
            _BAUDCONbits 000FB8           __end_of_printf 09B0         _startSerial$1097 006A  
           i2printf@flag 0014             i2printf@prec 0015      start_initialization 0F54  
            __end_of_ISR 0D32                i2printf@c 0018                i2printf@f 000D  
    startSerial@baudrate 0060               ?i2___lwdiv 0001               ?i2___lwmod 0008  
      __size_ofi2_printf 011E         __CFG_LPT1OSC$OFF 000000                 ??_printf 0035  
          __pcstackBANK0 0060        i2___lwmod@divisor 000A        i2___lwmod@counter 000C  
      startSerial@brg_16 0068                 ?i2_putch 0001          startSerial@FOSC 0062  
        startSerial@mode 0066         ___lwdiv@dividend 0029                __pintcode 0008  
               ?___aldiv 0029                 ?___lwdiv 0029                 ?___lwmod 0030  
              _configADC 0F2E                 ?_auxRead 0001                 ?_readADC 0029  
            __smallconst 0800         ___lwdiv@quotient 002D              ??i2___lwdiv 0005  
            ??i2___lwmod 000C           __size_of_putch 000C          ___aldiv@divisor 002D  
        ___aldiv@counter 0031                 _PIE1bits 000F9D                 _PIR1bits 000F9E  
       __CFG_WDTPS$32768 000000               ?_configADC 0001               _ADCON0bits 000FC2  
             printf@flag 0066               printf@prec 0067                 i2_printf 09B0  
               i2putch@c 0001         __size_ofi2_putch 000C  __size_of_sendDataSerial 000C  
               __Hrparam 0000                 __Lrparam 0000   __size_of_printSerialnl 003E  
       __size_of___aldiv 00CC         __size_of___lwdiv 0052         __size_of___lwmod 0042  
         readADC@channel 0029            ??_startSerial 0037         __size_of_auxRead 0020  
       __size_of_readADC 0012          ___lwdiv@divisor 002B          ___lwdiv@counter 002F  
               __ptext10 0F2E                 __ptext12 0F0E                 __ptext13 09B0  
               __ptext14 0F7A                 __ptext15 0E8E                 __ptext16 0DFA  
          __size_of_main 0076                 int$flags 0037              ??_configADC 0029  
              printf@val 0068    __CFG_CPUDIV$OSC3_PLL4 000000               _INTCONbits 000FF2  
    __end_of_startSerial 0BE6            _printSerialnl 0ED0                 intlevel2 0000  
       ___lwmod@dividend 0030                 printf@ap 0064          ___lwmod@divisor 0032  
        ___lwmod@counter 0034             ___aldiv@sign 0032           ?_printSerialnl 002A  
     __CFG_FOSC$HSPLL_HS 000000           _sendDataSerial 0F6E  
