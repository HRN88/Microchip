

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Fri Jul 20 09:26:59 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    14                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    15  0000                     
    16                           ; Version 1.42
    17                           ; Generated 13/04/2017 GMT
    18                           ; 
    19                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC18F4550 Definitions
    48                           ; 
    49                           ; SFR Addresses
    50  0000                     _CCPR1	set	4030
    51  0000                     _ADCON0bits	set	4034
    52  0000                     _TMR1L	set	4046
    53  0000                     _TMR1H	set	4047
    54  0000                     _T1CON	set	4045
    55  0000                     _CCP1CON	set	4029
    56  0000                     _ADCON2	set	4032
    57  0000                     _ADCON1	set	4033
    58  0000                     _ADCON0	set	4034
    59  0000                     _TRISA	set	3986
    60  0000                     _LATB	set	3978
    61  0000                     _TRISB	set	3987
    62  0000                     _RCREG	set	4014
    63  0000                     _PIR1bits	set	3998
    64  0000                     _TXREG	set	4013
    65  0000                     _SPBRGH	set	4016
    66  0000                     _SPBRG	set	4015
    67  0000                     _BAUDCONbits	set	4024
    68  0000                     _INTCONbits	set	4082
    69  0000                     _PIE1bits	set	3997
    70  0000                     _TRISCbits	set	3988
    71  0000                     _RCSTAbits	set	4011
    72  0000                     _TXSTAbits	set	4012
    73                           
    74                           	psect	smallconst
    75  000800                     __psmallconst:
    76                           	opt stack 0
    77  000800  00                 	db	0
    78  000801                     STR_1:
    79  000801  53                 	db	83	;'S'
    80  000802  74                 	db	116	;'t'
    81  000803  61                 	db	97	;'a'
    82  000804  72                 	db	114	;'r'
    83  000805  74                 	db	116	;'t'
    84  000806  69                 	db	105	;'i'
    85  000807  6E                 	db	110	;'n'
    86  000808  67                 	db	103	;'g'
    87  000809  20                 	db	32
    88  00080A  70                 	db	112	;'p'
    89  00080B  72                 	db	114	;'r'
    90  00080C  6F                 	db	111	;'o'
    91  00080D  63                 	db	99	;'c'
    92  00080E  65                 	db	101	;'e'
    93  00080F  73                 	db	115	;'s'
    94  000810  2E                 	db	46
    95  000811  2E                 	db	46
    96  000812  2E                 	db	46
    97  000813  00                 	db	0
    98  000814                     STR_2:
    99  000814  73                 	db	115	;'s'
   100  000815  00                 	db	0
   101                           
   102                           ; #config settings
   103  000816  00                 	db	0	; dummy byte at the end
   104  0000                     
   105                           	psect	cinit
   106  000A98                     __pcinit:
   107                           	opt stack 0
   108  000A98                     start_initialization:
   109                           	opt stack 0
   110  000A98                     __initialization:
   111                           	opt stack 0
   112  000A98                     end_of_initialization:
   113                           	opt stack 0
   114  000A98                     __end_of__initialization:
   115                           	opt stack 0
   116  000A98  0E00               	movlw	low (__Lsmallconst shr (0+16))
   117  000A9A  6EF8               	movwf	tblptru,c
   118  000A9C  0E08               	movlw	high __Lsmallconst
   119  000A9E  6EF7               	movwf	tblptrh,c
   120  000AA0  0100               	movlb	0
   121  000AA2  EFF6  F004         	goto	_main	;jump to C main() function
   122                           tblptru	equ	0xFF8
   123                           tblptrh	equ	0xFF7
   124                           
   125                           	psect	cstackCOMRAM
   126  000001                     __pcstackCOMRAM:
   127                           	opt stack 0
   128  000001                     ?___aldiv:
   129                           	opt stack 0
   130  000001                     sendDataSerial@c:
   131                           	opt stack 0
   132  000001                     ___aldiv@dividend:
   133                           	opt stack 0
   134                           
   135                           ; 4 bytes @ 0x0
   136  000001                     	ds	1
   137  000002                     printSerialnl@String:
   138                           	opt stack 0
   139                           
   140                           ; 2 bytes @ 0x1
   141  000002                     	ds	2
   142  000004                     printSerialnl@p:
   143                           	opt stack 0
   144                           
   145                           ; 2 bytes @ 0x3
   146  000004                     	ds	1
   147  000005                     ___aldiv@divisor:
   148                           	opt stack 0
   149                           
   150                           ; 4 bytes @ 0x4
   151  000005                     	ds	4
   152  000009                     ___aldiv@counter:
   153                           	opt stack 0
   154                           
   155                           ; 1 bytes @ 0x8
   156  000009                     	ds	1
   157  00000A                     ___aldiv@sign:
   158                           	opt stack 0
   159                           
   160                           ; 1 bytes @ 0x9
   161  00000A                     	ds	1
   162  00000B                     ___aldiv@quotient:
   163                           	opt stack 0
   164                           
   165                           ; 4 bytes @ 0xA
   166  00000B                     	ds	4
   167  00000F                     startSerial@baudrate:
   168                           	opt stack 0
   169                           
   170                           ; 2 bytes @ 0xE
   171  00000F                     	ds	2
   172  000011                     startSerial@FOSC:
   173                           	opt stack 0
   174                           
   175                           ; 4 bytes @ 0x10
   176  000011                     	ds	4
   177  000015                     startSerial@mode:
   178                           	opt stack 0
   179                           
   180                           ; 2 bytes @ 0x14
   181  000015                     	ds	2
   182  000017                     startSerial@brg_16:
   183                           	opt stack 0
   184                           
   185                           ; 2 bytes @ 0x16
   186  000017                     	ds	2
   187  000019                     _startSerial$1033:
   188                           	opt stack 0
   189                           
   190                           ; 4 bytes @ 0x18
   191  000019                     	ds	4
   192  00001D                     startSerial@n:
   193                           	opt stack 0
   194                           
   195                           ; 2 bytes @ 0x1C
   196  00001D                     	ds	2
   197  00001F                     tblptru	equ	0xFF8
   198                           tblptrh	equ	0xFF7
   199                           
   200                           ; 1 bytes @ 0x1E
   201 ;;
   202 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   203 ;;
   204 ;; *************** function _main *****************
   205 ;; Defined at:
   206 ;;		line 71 in file "main.c"
   207 ;; Parameters:    Size  Location     Type
   208 ;;		None
   209 ;; Auto vars:     Size  Location     Type
   210 ;;		None
   211 ;; Return value:  Size  Location     Type
   212 ;;                  1    wreg      void 
   213 ;; Registers used:
   214 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   215 ;; Tracked objects:
   216 ;;		On entry : 0/0
   217 ;;		On exit  : 0/0
   218 ;;		Unchanged: 0/0
   219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   220 ;;      Params:         0       0       0       0       0       0       0       0       0
   221 ;;      Locals:         0       0       0       0       0       0       0       0       0
   222 ;;      Temps:          0       0       0       0       0       0       0       0       0
   223 ;;      Totals:         0       0       0       0       0       0       0       0       0
   224 ;;Total ram usage:        0 bytes
   225 ;; Hardware stack levels required when called:    2
   226 ;; This function calls:
   227 ;;		_printSerialnl
   228 ;;		_sendDataSerial
   229 ;;		_startSerial
   230 ;; This function is called by:
   231 ;;		Startup code after reset
   232 ;; This function uses a non-reentrant model
   233 ;;
   234                           
   235                           	psect	text0
   236  0009EC                     __ptext0:
   237                           	opt stack 0
   238  0009EC                     _main:
   239                           	opt stack 29
   240                           
   241                           ;main.c: 72: startSerial(9600, 24000000, 0, 0);
   242                           
   243                           ;incstack = 0
   244  0009EC  0E25               	movlw	37
   245  0009EE  6E10               	movwf	startSerial@baudrate+1,c
   246  0009F0  0E80               	movlw	128
   247  0009F2  6E0F               	movwf	startSerial@baudrate,c
   248  0009F4  0E00               	movlw	0
   249  0009F6  6E11               	movwf	startSerial@FOSC,c
   250  0009F8  0E36               	movlw	54
   251  0009FA  6E12               	movwf	startSerial@FOSC+1,c
   252  0009FC  0E6E               	movlw	110
   253  0009FE  6E13               	movwf	startSerial@FOSC+2,c
   254  000A00  0E01               	movlw	1
   255  000A02  6E14               	movwf	startSerial@FOSC+3,c
   256  000A04  0E00               	movlw	0
   257  000A06  6E16               	movwf	startSerial@mode+1,c
   258  000A08  0E00               	movlw	0
   259  000A0A  6E15               	movwf	startSerial@mode,c
   260  000A0C  0E00               	movlw	0
   261  000A0E  6E18               	movwf	startSerial@brg_16+1,c
   262  000A10  0E00               	movlw	0
   263  000A12  6E17               	movwf	startSerial@brg_16,c
   264  000A14  EC0C  F004         	call	_startSerial	;wreg free
   265                           
   266                           ;main.c: 73: printSerialnl("Starting proces...");
   267  000A18  0E01               	movlw	low STR_1
   268  000A1A  6E02               	movwf	printSerialnl@String,c
   269  000A1C  0E08               	movlw	high STR_1
   270  000A1E  6E03               	movwf	printSerialnl@String+1,c
   271  000A20  EC2D  F005         	call	_printSerialnl	;wreg free
   272                           
   273                           ;main.c: 76: TRISB = 0x00;
   274  000A24  0E00               	movlw	0
   275  000A26  6E93               	movwf	3987,c	;volatile
   276                           
   277                           ;main.c: 77: LATB = 0x00;
   278  000A28  0E00               	movlw	0
   279  000A2A  6E8A               	movwf	3978,c	;volatile
   280                           
   281                           ;main.c: 78: TRISA = 0xFF;
   282  000A2C  6892               	setf	3986,c	;volatile
   283                           
   284                           ;main.c: 79: ADCON0 = 0b00000001;
   285  000A2E  0E01               	movlw	1
   286  000A30  6EC2               	movwf	4034,c	;volatile
   287                           
   288                           ;main.c: 80: ADCON1 = 0b00000000;
   289  000A32  0E00               	movlw	0
   290  000A34  6EC1               	movwf	4033,c	;volatile
   291                           
   292                           ;main.c: 81: ADCON2 = 0b10101010;
   293  000A36  0EAA               	movlw	170
   294  000A38  6EC0               	movwf	4032,c	;volatile
   295                           
   296                           ;main.c: 84: CCP1CON = 0b00001011;
   297  000A3A  0E0B               	movlw	11
   298  000A3C  6EBD               	movwf	4029,c	;volatile
   299                           
   300                           ;main.c: 85: CCPR1 = 0x15A0;
   301  000A3E  0E15               	movlw	21
   302  000A40  6EBF               	movwf	4031,c	;volatile
   303  000A42  0EA0               	movlw	160
   304  000A44  6EBE               	movwf	4030,c	;volatile
   305                           
   306                           ;main.c: 88: T1CON = 0b10110001;
   307  000A46  0EB1               	movlw	177
   308  000A48  6ECD               	movwf	4045,c	;volatile
   309                           
   310                           ;main.c: 89: TMR1H = 0x15;
   311  000A4A  0E15               	movlw	21
   312  000A4C  6ECF               	movwf	4047,c	;volatile
   313                           
   314                           ;main.c: 90: TMR1L = 0xA0;
   315  000A4E  0EA0               	movlw	160
   316  000A50  6ECE               	movwf	4046,c	;volatile
   317  000A52                     l86:
   318  000A52  B2C2               	btfsc	4034,1,c	;volatile
   319  000A54  D7FE               	goto	l86
   320                           
   321                           ;main.c: 94: LATB = ~LATB;
   322  000A56  1E8A               	comf	3978,f,c	;volatile
   323  000A58  D7FC               	goto	l86
   324  000A5A                     __end_of_main:
   325                           	opt stack 0
   326                           tblptru	equ	0xFF8
   327                           tblptrh	equ	0xFF7
   328                           
   329 ;; *************** function _startSerial *****************
   330 ;; Defined at:
   331 ;;		line 8 in file "Serial.h"
   332 ;; Parameters:    Size  Location     Type
   333 ;;  baudrate        2   14[COMRAM] int 
   334 ;;  FOSC            4   16[COMRAM] long 
   335 ;;  mode            2   20[COMRAM] int 
   336 ;;  brg_16          2   22[COMRAM] int 
   337 ;; Auto vars:     Size  Location     Type
   338 ;;  n               2   28[COMRAM] int 
   339 ;; Return value:  Size  Location     Type
   340 ;;                  1    wreg      void 
   341 ;; Registers used:
   342 ;;		wreg, status,2, status,0, cstack
   343 ;; Tracked objects:
   344 ;;		On entry : 0/0
   345 ;;		On exit  : 0/0
   346 ;;		Unchanged: 0/0
   347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   348 ;;      Params:        10       0       0       0       0       0       0       0       0
   349 ;;      Locals:         6       0       0       0       0       0       0       0       0
   350 ;;      Temps:          0       0       0       0       0       0       0       0       0
   351 ;;      Totals:        16       0       0       0       0       0       0       0       0
   352 ;;Total ram usage:       16 bytes
   353 ;; Hardware stack levels used:    1
   354 ;; Hardware stack levels required when called:    1
   355 ;; This function calls:
   356 ;;		___aldiv
   357 ;; This function is called by:
   358 ;;		_main
   359 ;; This function uses a non-reentrant model
   360 ;;
   361                           
   362                           	psect	text1
   363  000818                     __ptext1:
   364                           	opt stack 0
   365  000818                     _startSerial:
   366                           	opt stack 29
   367                           
   368                           ;Serial.h: 9: int n;
   369                           ;Serial.h: 10: if(!mode){
   370                           
   371                           ;incstack = 0
   372  000818  5015               	movf	startSerial@mode,w,c
   373  00081A  1016               	iorwf	startSerial@mode+1,w,c
   374  00081C  A4D8               	btfss	status,2,c
   375  00081E  D002               	goto	l49
   376                           
   377                           ;Serial.h: 11: TXSTAbits.SYNC = 0;
   378  000820  98AC               	bcf	4012,4,c	;volatile
   379                           
   380                           ;Serial.h: 12: }
   381  000822  D001               	goto	l50
   382  000824                     l49:
   383                           
   384                           ;Serial.h: 13: else{
   385                           ;Serial.h: 14: TXSTAbits.SYNC = 1;
   386  000824  88AC               	bsf	4012,4,c	;volatile
   387  000826                     l50:
   388                           
   389                           ;Serial.h: 15: }
   390                           ;Serial.h: 18: RCSTAbits.SPEN = 1;
   391  000826  8EAB               	bsf	4011,7,c	;volatile
   392                           
   393                           ;Serial.h: 19: TRISCbits.RC6 = 0;
   394  000828  9C94               	bcf	3988,6,c	;volatile
   395                           
   396                           ;Serial.h: 20: TRISCbits.RC7 = 1;
   397  00082A  8E94               	bsf	3988,7,c	;volatile
   398                           
   399                           ;Serial.h: 22: RCSTAbits.CREN = 1;
   400  00082C  88AB               	bsf	4011,4,c	;volatile
   401                           
   402                           ;Serial.h: 23: TXSTAbits.TXEN = 1;
   403  00082E  8AAC               	bsf	4012,5,c	;volatile
   404                           
   405                           ;Serial.h: 27: PIE1bits.RCIE = 1;
   406  000830  8A9D               	bsf	3997,5,c	;volatile
   407                           
   408                           ;Serial.h: 28: INTCONbits.GIE = 1;
   409  000832  8EF2               	bsf	intcon,7,c	;volatile
   410                           
   411                           ;Serial.h: 29: INTCONbits.PEIE = 1;
   412  000834  8CF2               	bsf	intcon,6,c	;volatile
   413                           
   414                           ;Serial.h: 30: TXSTAbits.BRGH = 1;
   415  000836  84AC               	bsf	4012,2,c	;volatile
   416                           
   417                           ;Serial.h: 33: if(brg_16){
   418  000838  5017               	movf	startSerial@brg_16,w,c
   419  00083A  1018               	iorwf	startSerial@brg_16+1,w,c
   420  00083C  B4D8               	btfsc	status,2,c
   421  00083E  D039               	goto	l51
   422                           
   423                           ;Serial.h: 35: BAUDCONbits.BRG16 = 1;
   424  000840  86B8               	bsf	4024,3,c	;volatile
   425                           
   426                           ;Serial.h: 36: n = (int)((FOSC / baudrate) / 4) - 1;
   427  000842  C00F  F005         	movff	startSerial@baudrate,___aldiv@divisor
   428  000846  C010  F006         	movff	startSerial@baudrate+1,___aldiv@divisor+1
   429  00084A  0E00               	movlw	0
   430  00084C  BE06               	btfsc	___aldiv@divisor+1,7,c
   431  00084E  0EFF               	movlw	-1
   432  000850  6E07               	movwf	___aldiv@divisor+2,c
   433  000852  6E08               	movwf	___aldiv@divisor+3,c
   434  000854  C011  F001         	movff	startSerial@FOSC,___aldiv@dividend
   435  000858  C012  F002         	movff	startSerial@FOSC+1,___aldiv@dividend+1
   436  00085C  C013  F003         	movff	startSerial@FOSC+2,___aldiv@dividend+2
   437  000860  C014  F004         	movff	startSerial@FOSC+3,___aldiv@dividend+3
   438  000864  EC90  F004         	call	___aldiv	;wreg free
   439  000868  C001  F019         	movff	?___aldiv,_startSerial$1033
   440  00086C  C002  F01A         	movff	?___aldiv+1,_startSerial$1033+1
   441  000870  C003  F01B         	movff	?___aldiv+2,_startSerial$1033+2
   442  000874  C004  F01C         	movff	?___aldiv+3,_startSerial$1033+3
   443                           
   444                           ;Serial.h: 36: n = (int)((FOSC / baudrate) / 4) - 1;
   445  000878  C019  F001         	movff	_startSerial$1033,___aldiv@dividend
   446  00087C  C01A  F002         	movff	_startSerial$1033+1,___aldiv@dividend+1
   447  000880  C01B  F003         	movff	_startSerial$1033+2,___aldiv@dividend+2
   448  000884  C01C  F004         	movff	_startSerial$1033+3,___aldiv@dividend+3
   449  000888  0E04               	movlw	4
   450  00088A  6E05               	movwf	___aldiv@divisor,c
   451  00088C  0E00               	movlw	0
   452  00088E  6E06               	movwf	___aldiv@divisor+1,c
   453  000890  0E00               	movlw	0
   454  000892  6E07               	movwf	___aldiv@divisor+2,c
   455  000894  0E00               	movlw	0
   456  000896  6E08               	movwf	___aldiv@divisor+3,c
   457  000898  EC90  F004         	call	___aldiv	;wreg free
   458  00089C  0EFF               	movlw	255
   459  00089E  2401               	addwf	?___aldiv,w,c
   460  0008A0  6E1D               	movwf	startSerial@n,c
   461  0008A2  0EFF               	movlw	255
   462  0008A4  2002               	addwfc	?___aldiv+1,w,c
   463  0008A6  6E1E               	movwf	startSerial@n+1,c
   464                           
   465                           ;Serial.h: 37: SPBRG = (int)(n & 0x00FF);
   466  0008A8  C01D  FFAF         	movff	startSerial@n,4015	;volatile
   467                           
   468                           ;Serial.h: 38: SPBRGH = (int)(n & 0xFF00);
   469  0008AC  0E00               	movlw	0
   470  0008AE  6EB0               	movwf	4016,c	;volatile
   471                           
   472                           ;Serial.h: 39: }
   473  0008B0  0012               	return	
   474  0008B2                     l51:
   475                           
   476                           ;Serial.h: 40: else{
   477                           ;Serial.h: 42: BAUDCONbits.BRG16 = 0;
   478  0008B2  96B8               	bcf	4024,3,c	;volatile
   479                           
   480                           ;Serial.h: 43: n = (int)((FOSC / baudrate) / 16) - 1;
   481  0008B4  C00F  F005         	movff	startSerial@baudrate,___aldiv@divisor
   482  0008B8  C010  F006         	movff	startSerial@baudrate+1,___aldiv@divisor+1
   483  0008BC  0E00               	movlw	0
   484  0008BE  BE06               	btfsc	___aldiv@divisor+1,7,c
   485  0008C0  0EFF               	movlw	-1
   486  0008C2  6E07               	movwf	___aldiv@divisor+2,c
   487  0008C4  6E08               	movwf	___aldiv@divisor+3,c
   488  0008C6  C011  F001         	movff	startSerial@FOSC,___aldiv@dividend
   489  0008CA  C012  F002         	movff	startSerial@FOSC+1,___aldiv@dividend+1
   490  0008CE  C013  F003         	movff	startSerial@FOSC+2,___aldiv@dividend+2
   491  0008D2  C014  F004         	movff	startSerial@FOSC+3,___aldiv@dividend+3
   492  0008D6  EC90  F004         	call	___aldiv	;wreg free
   493  0008DA  C001  F019         	movff	?___aldiv,_startSerial$1033
   494  0008DE  C002  F01A         	movff	?___aldiv+1,_startSerial$1033+1
   495  0008E2  C003  F01B         	movff	?___aldiv+2,_startSerial$1033+2
   496  0008E6  C004  F01C         	movff	?___aldiv+3,_startSerial$1033+3
   497                           
   498                           ;Serial.h: 43: n = (int)((FOSC / baudrate) / 16) - 1;
   499  0008EA  C019  F001         	movff	_startSerial$1033,___aldiv@dividend
   500  0008EE  C01A  F002         	movff	_startSerial$1033+1,___aldiv@dividend+1
   501  0008F2  C01B  F003         	movff	_startSerial$1033+2,___aldiv@dividend+2
   502  0008F6  C01C  F004         	movff	_startSerial$1033+3,___aldiv@dividend+3
   503  0008FA  0E10               	movlw	16
   504  0008FC  6E05               	movwf	___aldiv@divisor,c
   505  0008FE  0E00               	movlw	0
   506  000900  6E06               	movwf	___aldiv@divisor+1,c
   507  000902  0E00               	movlw	0
   508  000904  6E07               	movwf	___aldiv@divisor+2,c
   509  000906  0E00               	movlw	0
   510  000908  6E08               	movwf	___aldiv@divisor+3,c
   511  00090A  EC90  F004         	call	___aldiv	;wreg free
   512  00090E  0EFF               	movlw	255
   513  000910  2401               	addwf	?___aldiv,w,c
   514  000912  6E1D               	movwf	startSerial@n,c
   515  000914  0EFF               	movlw	255
   516  000916  2002               	addwfc	?___aldiv+1,w,c
   517  000918  6E1E               	movwf	startSerial@n+1,c
   518                           
   519                           ;Serial.h: 44: SPBRG = (int)(n & 0x00FF);
   520  00091A  C01D  FFAF         	movff	startSerial@n,4015	;volatile
   521  00091E  0012               	return	
   522  000920                     __end_of_startSerial:
   523                           	opt stack 0
   524                           tblptru	equ	0xFF8
   525                           tblptrh	equ	0xFF7
   526                           intcon	equ	0xFF2
   527                           status	equ	0xFD8
   528                           
   529 ;; *************** function ___aldiv *****************
   530 ;; Defined at:
   531 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\aldiv.c"
   532 ;; Parameters:    Size  Location     Type
   533 ;;  dividend        4    0[COMRAM] long 
   534 ;;  divisor         4    4[COMRAM] long 
   535 ;; Auto vars:     Size  Location     Type
   536 ;;  quotient        4   10[COMRAM] long 
   537 ;;  sign            1    9[COMRAM] unsigned char 
   538 ;;  counter         1    8[COMRAM] unsigned char 
   539 ;; Return value:  Size  Location     Type
   540 ;;                  4    0[COMRAM] long 
   541 ;; Registers used:
   542 ;;		wreg, status,2, status,0
   543 ;; Tracked objects:
   544 ;;		On entry : 0/0
   545 ;;		On exit  : 0/0
   546 ;;		Unchanged: 0/0
   547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   548 ;;      Params:         8       0       0       0       0       0       0       0       0
   549 ;;      Locals:         6       0       0       0       0       0       0       0       0
   550 ;;      Temps:          0       0       0       0       0       0       0       0       0
   551 ;;      Totals:        14       0       0       0       0       0       0       0       0
   552 ;;Total ram usage:       14 bytes
   553 ;; Hardware stack levels used:    1
   554 ;; This function calls:
   555 ;;		Nothing
   556 ;; This function is called by:
   557 ;;		_startSerial
   558 ;; This function uses a non-reentrant model
   559 ;;
   560                           
   561                           	psect	text2
   562  000920                     __ptext2:
   563                           	opt stack 0
   564  000920                     ___aldiv:
   565                           	opt stack 29
   566                           
   567                           ;incstack = 0
   568  000920  0E00               	movlw	0
   569  000922  6E0A               	movwf	___aldiv@sign,c
   570  000924  AE08               	btfss	___aldiv@divisor+3,7,c
   571  000926  D00A               	goto	l841
   572  000928  1E08               	comf	___aldiv@divisor+3,f,c
   573  00092A  1E07               	comf	___aldiv@divisor+2,f,c
   574  00092C  1E06               	comf	___aldiv@divisor+1,f,c
   575  00092E  6C05               	negf	___aldiv@divisor,c
   576  000930  0E00               	movlw	0
   577  000932  2206               	addwfc	___aldiv@divisor+1,f,c
   578  000934  2207               	addwfc	___aldiv@divisor+2,f,c
   579  000936  2208               	addwfc	___aldiv@divisor+3,f,c
   580  000938  0E01               	movlw	1
   581  00093A  6E0A               	movwf	___aldiv@sign,c
   582  00093C                     l841:
   583  00093C  AE04               	btfss	___aldiv@dividend+3,7,c
   584  00093E  D00A               	goto	l847
   585  000940  1E04               	comf	___aldiv@dividend+3,f,c
   586  000942  1E03               	comf	___aldiv@dividend+2,f,c
   587  000944  1E02               	comf	___aldiv@dividend+1,f,c
   588  000946  6C01               	negf	___aldiv@dividend,c
   589  000948  0E00               	movlw	0
   590  00094A  2202               	addwfc	___aldiv@dividend+1,f,c
   591  00094C  2203               	addwfc	___aldiv@dividend+2,f,c
   592  00094E  2204               	addwfc	___aldiv@dividend+3,f,c
   593  000950  0E01               	movlw	1
   594  000952  1A0A               	xorwf	___aldiv@sign,f,c
   595  000954                     l847:
   596  000954  0E00               	movlw	0
   597  000956  6E0B               	movwf	___aldiv@quotient,c
   598  000958  0E00               	movlw	0
   599  00095A  6E0C               	movwf	___aldiv@quotient+1,c
   600  00095C  0E00               	movlw	0
   601  00095E  6E0D               	movwf	___aldiv@quotient+2,c
   602  000960  0E00               	movlw	0
   603  000962  6E0E               	movwf	___aldiv@quotient+3,c
   604  000964  5005               	movf	___aldiv@divisor,w,c
   605  000966  1006               	iorwf	___aldiv@divisor+1,w,c
   606  000968  1007               	iorwf	___aldiv@divisor+2,w,c
   607  00096A  1008               	iorwf	___aldiv@divisor+3,w,c
   608  00096C  B4D8               	btfsc	status,2,c
   609  00096E  D02A               	goto	l869
   610  000970  0E01               	movlw	1
   611  000972  6E09               	movwf	___aldiv@counter,c
   612  000974  D006               	goto	l855
   613  000976                     l853:
   614  000976  90D8               	bcf	status,0,c
   615  000978  3605               	rlcf	___aldiv@divisor,f,c
   616  00097A  3606               	rlcf	___aldiv@divisor+1,f,c
   617  00097C  3607               	rlcf	___aldiv@divisor+2,f,c
   618  00097E  3608               	rlcf	___aldiv@divisor+3,f,c
   619  000980  2A09               	incf	___aldiv@counter,f,c
   620  000982                     l855:
   621  000982  AE08               	btfss	___aldiv@divisor+3,7,c
   622  000984  D7F8               	goto	l853
   623  000986                     l857:
   624  000986  90D8               	bcf	status,0,c
   625  000988  360B               	rlcf	___aldiv@quotient,f,c
   626  00098A  360C               	rlcf	___aldiv@quotient+1,f,c
   627  00098C  360D               	rlcf	___aldiv@quotient+2,f,c
   628  00098E  360E               	rlcf	___aldiv@quotient+3,f,c
   629  000990  5005               	movf	___aldiv@divisor,w,c
   630  000992  5C01               	subwf	___aldiv@dividend,w,c
   631  000994  5006               	movf	___aldiv@divisor+1,w,c
   632  000996  5802               	subwfb	___aldiv@dividend+1,w,c
   633  000998  5007               	movf	___aldiv@divisor+2,w,c
   634  00099A  5803               	subwfb	___aldiv@dividend+2,w,c
   635  00099C  5008               	movf	___aldiv@divisor+3,w,c
   636  00099E  5804               	subwfb	___aldiv@dividend+3,w,c
   637  0009A0  A0D8               	btfss	status,0,c
   638  0009A2  D009               	goto	l865
   639  0009A4  5005               	movf	___aldiv@divisor,w,c
   640  0009A6  5E01               	subwf	___aldiv@dividend,f,c
   641  0009A8  5006               	movf	___aldiv@divisor+1,w,c
   642  0009AA  5A02               	subwfb	___aldiv@dividend+1,f,c
   643  0009AC  5007               	movf	___aldiv@divisor+2,w,c
   644  0009AE  5A03               	subwfb	___aldiv@dividend+2,f,c
   645  0009B0  5008               	movf	___aldiv@divisor+3,w,c
   646  0009B2  5A04               	subwfb	___aldiv@dividend+3,f,c
   647  0009B4  800B               	bsf	___aldiv@quotient,0,c
   648  0009B6                     l865:
   649  0009B6  90D8               	bcf	status,0,c
   650  0009B8  3208               	rrcf	___aldiv@divisor+3,f,c
   651  0009BA  3207               	rrcf	___aldiv@divisor+2,f,c
   652  0009BC  3206               	rrcf	___aldiv@divisor+1,f,c
   653  0009BE  3205               	rrcf	___aldiv@divisor,f,c
   654  0009C0  2E09               	decfsz	___aldiv@counter,f,c
   655  0009C2  D7E1               	goto	l857
   656  0009C4                     l869:
   657  0009C4  500A               	movf	___aldiv@sign,w,c
   658  0009C6  B4D8               	btfsc	status,2,c
   659  0009C8  D008               	goto	l873
   660  0009CA  1E0E               	comf	___aldiv@quotient+3,f,c
   661  0009CC  1E0D               	comf	___aldiv@quotient+2,f,c
   662  0009CE  1E0C               	comf	___aldiv@quotient+1,f,c
   663  0009D0  6C0B               	negf	___aldiv@quotient,c
   664  0009D2  0E00               	movlw	0
   665  0009D4  220C               	addwfc	___aldiv@quotient+1,f,c
   666  0009D6  220D               	addwfc	___aldiv@quotient+2,f,c
   667  0009D8  220E               	addwfc	___aldiv@quotient+3,f,c
   668  0009DA                     l873:
   669  0009DA  C00B  F001         	movff	___aldiv@quotient,?___aldiv
   670  0009DE  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
   671  0009E2  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
   672  0009E6  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
   673  0009EA  0012               	return	
   674  0009EC                     __end_of___aldiv:
   675                           	opt stack 0
   676                           tblptru	equ	0xFF8
   677                           tblptrh	equ	0xFF7
   678                           intcon	equ	0xFF2
   679                           status	equ	0xFD8
   680                           
   681 ;; *************** function _printSerialnl *****************
   682 ;; Defined at:
   683 ;;		line 67 in file "Serial.h"
   684 ;; Parameters:    Size  Location     Type
   685 ;;  String          2    1[COMRAM] PTR unsigned char 
   686 ;;		 -> STR_1(19), 
   687 ;; Auto vars:     Size  Location     Type
   688 ;;  p               2    3[COMRAM] PTR unsigned char 
   689 ;;		 -> STR_1(19), 
   690 ;; Return value:  Size  Location     Type
   691 ;;                  1    wreg      void 
   692 ;; Registers used:
   693 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   694 ;; Tracked objects:
   695 ;;		On entry : 0/0
   696 ;;		On exit  : 0/0
   697 ;;		Unchanged: 0/0
   698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   699 ;;      Params:         2       0       0       0       0       0       0       0       0
   700 ;;      Locals:         2       0       0       0       0       0       0       0       0
   701 ;;      Temps:          0       0       0       0       0       0       0       0       0
   702 ;;      Totals:         4       0       0       0       0       0       0       0       0
   703 ;;Total ram usage:        4 bytes
   704 ;; Hardware stack levels used:    1
   705 ;; Hardware stack levels required when called:    1
   706 ;; This function calls:
   707 ;;		_sendDataSerial
   708 ;; This function is called by:
   709 ;;		_main
   710 ;; This function uses a non-reentrant model
   711 ;;
   712                           
   713                           	psect	text3
   714  000A5A                     __ptext3:
   715                           	opt stack 0
   716  000A5A                     _printSerialnl:
   717                           	opt stack 29
   718                           
   719                           ;Serial.h: 69: char *p;
   720                           ;Serial.h: 70: p = String;
   721                           
   722                           ;incstack = 0
   723  000A5A  C002  F004         	movff	printSerialnl@String,printSerialnl@p
   724  000A5E  C003  F005         	movff	printSerialnl@String+1,printSerialnl@p+1
   725                           
   726                           ;Serial.h: 71: while(*p != '\0'){
   727  000A62  D00A               	goto	l901
   728  000A64                     l897:
   729                           
   730                           ;Serial.h: 72: sendDataSerial(*p);
   731  000A64  C004  FFF6         	movff	printSerialnl@p,tblptrl
   732  000A68  C005  FFF7         	movff	printSerialnl@p+1,tblptrh
   733  000A6C                     	if	0	;tblptru may be non-zero
   734  000A6C                     	endif
   735  000A6C                     	if	0	;tblptru may be non-zero
   736  000A6C                     	endif
   737  000A6C  0008               	tblrd		*
   738  000A6E  50F5               	movf	tablat,w,c
   739  000A70  EC53  F005         	call	_sendDataSerial
   740                           
   741                           ;Serial.h: 73: p++;
   742  000A74  4A04               	infsnz	printSerialnl@p,f,c
   743  000A76  2A05               	incf	printSerialnl@p+1,f,c
   744  000A78                     l901:
   745  000A78  C004  FFF6         	movff	printSerialnl@p,tblptrl
   746  000A7C  C005  FFF7         	movff	printSerialnl@p+1,tblptrh
   747  000A80                     	if	0	;tblptru may be non-zero
   748  000A80                     	endif
   749  000A80                     	if	0	;tblptru may be non-zero
   750  000A80                     	endif
   751  000A80  0008               	tblrd		*
   752  000A82  50F5               	movf	tablat,w,c
   753  000A84  0900               	iorlw	0
   754  000A86  A4D8               	btfss	status,2,c
   755  000A88  D7ED               	goto	l897
   756                           
   757                           ;Serial.h: 74: }
   758                           ;Serial.h: 75: sendDataSerial('\n');
   759  000A8A  0E0A               	movlw	10
   760  000A8C  EC53  F005         	call	_sendDataSerial
   761                           
   762                           ;Serial.h: 76: sendDataSerial('\r');
   763  000A90  0E0D               	movlw	13
   764  000A92  EC53  F005         	call	_sendDataSerial
   765  000A96  0012               	return		;funcret
   766  000A98                     __end_of_printSerialnl:
   767                           	opt stack 0
   768                           tblptru	equ	0xFF8
   769                           tblptrh	equ	0xFF7
   770                           tblptrl	equ	0xFF6
   771                           tablat	equ	0xFF5
   772                           intcon	equ	0xFF2
   773                           status	equ	0xFD8
   774                           
   775 ;; *************** function _sendDataSerial *****************
   776 ;; Defined at:
   777 ;;		line 51 in file "Serial.h"
   778 ;; Parameters:    Size  Location     Type
   779 ;;  c               1    wreg     unsigned char 
   780 ;; Auto vars:     Size  Location     Type
   781 ;;  c               1    0[COMRAM] unsigned char 
   782 ;; Return value:  Size  Location     Type
   783 ;;                  1    wreg      void 
   784 ;; Registers used:
   785 ;;		wreg
   786 ;; Tracked objects:
   787 ;;		On entry : 0/0
   788 ;;		On exit  : 0/0
   789 ;;		Unchanged: 0/0
   790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   791 ;;      Params:         0       0       0       0       0       0       0       0       0
   792 ;;      Locals:         1       0       0       0       0       0       0       0       0
   793 ;;      Temps:          0       0       0       0       0       0       0       0       0
   794 ;;      Totals:         1       0       0       0       0       0       0       0       0
   795 ;;Total ram usage:        1 bytes
   796 ;; Hardware stack levels used:    1
   797 ;; This function calls:
   798 ;;		Nothing
   799 ;; This function is called by:
   800 ;;		_printSerialnl
   801 ;;		_main
   802 ;;		_printSerial
   803 ;; This function uses a non-reentrant model
   804 ;;
   805                           
   806                           	psect	text4
   807  000AA6                     __ptext4:
   808                           	opt stack 0
   809  000AA6                     _sendDataSerial:
   810                           	opt stack 30
   811                           
   812                           ;incstack = 0
   813                           ;sendDataSerial@c stored from wreg
   814  000AA6  6E01               	movwf	sendDataSerial@c,c
   815                           
   816                           ;Serial.h: 53: TXREG = c;
   817  000AA8  C001  FFAD         	movff	sendDataSerial@c,4013	;volatile
   818  000AAC                     l56:
   819  000AAC  B2AC               	btfsc	4012,1,c	;volatile
   820  000AAE  0012               	return	
   821  000AB0  D7FD               	goto	l56
   822  000AB2                     __end_of_sendDataSerial:
   823                           	opt stack 0
   824                           tblptru	equ	0xFF8
   825                           tblptrh	equ	0xFF7
   826                           tblptrl	equ	0xFF6
   827                           tablat	equ	0xFF5
   828                           intcon	equ	0xFF2
   829                           status	equ	0xFD8
   830                           tblptru	equ	0xFF8
   831                           tblptrh	equ	0xFF7
   832                           tblptrl	equ	0xFF6
   833                           tablat	equ	0xFF5
   834                           intcon	equ	0xFF2
   835                           status	equ	0xFD8
   836                           
   837                           	psect	rparam
   838  0000                     tblptru	equ	0xFF8
   839                           tblptrh	equ	0xFF7
   840                           tblptrl	equ	0xFF6
   841                           tablat	equ	0xFF5
   842                           intcon	equ	0xFF2
   843                           status	equ	0xFD8


Data Sizes:
    Strings     21
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     30      30
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    printSerialnl@String	PTR unsigned char  size(2) Largest target is 19
		 -> STR_1(CODE[19]), 

    printSerialnl@p	PTR unsigned char  size(2) Largest target is 19
		 -> STR_1(CODE[19]), 


Critical Paths under _main in COMRAM

    _main->_startSerial
    _startSerial->___aldiv
    _printSerialnl->_sendDataSerial

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1656
                      _printSerialnl
                     _sendDataSerial
                        _startSerial
 ---------------------------------------------------------------------------------
 (1) _startSerial                                         20    10     10    1482
                                             14 COMRAM    16     6     10
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     908
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _printSerialnl                                        4     2      2     159
                                              1 COMRAM     4     2      2
                     _sendDataSerial
 ---------------------------------------------------------------------------------
 (1) _sendDataSerial                                       1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _printSerialnl
     _sendDataSerial
   _sendDataSerial
   _startSerial
     ___aldiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     1E      1E       1       31.6%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Fri Jul 20 09:26:59 2018

                     l50 0826                       l51 08B2                       l56 0AAC  
                     l49 0824                       l86 0A52              __CFG_BOR$ON 000000  
            __CFG_BORV$3 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000              _startSerial 0818             __CFG_CP3$OFF 000000  
            __CFG_LVP$ON 000000                      l901 0A78                      l841 093C  
                    l853 0976                      l855 0982                      l847 0954  
                    l873 09DA                      l865 09B6                      l857 0986  
                    l869 09C4                      l897 0A64             __CFG_CPB$OFF 000000  
           __CFG_CPD$OFF 000000             __CFG_WDT$OFF 000000                     STR_1 0801  
                   STR_2 0814                     _LATB 000F8A          sendDataSerial@c 0001  
 __end_of_sendDataSerial 0AB2                     _main 09EC                     start 0000  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000             ___param_bank 000000  
    printSerialnl@String 0002            __CFG_PLLDIV$5 000000           __CFG_CCP2MX$ON 000000  
        __end_of___aldiv 09EC                    ?_main 0001                    _CCPR1 000FBE  
                  _T1CON 000FCD                    _RCREG 000FAE                    _TMR1H 000FCF  
                  _TMR1L 000FCE                    _SPBRG 000FAF            __CFG_USBDIV$1 000000  
                  _TRISA 000F92                    _TRISB 000F93          ??_printSerialnl 0004  
                  _TXREG 000FAD            __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
                  tablat 000FF5          ?_sendDataSerial 0001                    status 000FD8  
         __CFG_ICPRT$OFF 000000           __CFG_PBADEN$ON 000000          __initialization 0A98  
           __end_of_main 0A5A                   ??_main 001F            __activetblptr 000001  
         printSerialnl@p 0004                   _ADCON0 000FC2                   _ADCON1 000FC1  
                 _ADCON2 000FC0                   _SPBRGH 000FB0           __CFG_XINST$OFF 000000  
              ??___aldiv 0009           __CFG_STVREN$ON 000000             startSerial@n 001D  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8               __accesstop 0060  __end_of__initialization 0A98  
          ___rparam_used 000001           __pcstackCOMRAM 0001             ?_startSerial 000F  
                _CCP1CON 000FBD         ??_sendDataSerial 0001          __CFG_VREGEN$OFF 000000  
                __Hparam 0000                  __Lparam 0000                  ___aldiv 0920  
           __psmallconst 0800                  __pcinit 0A98                  __ramtop 0800  
                __ptext0 09EC                  __ptext1 0818                  __ptext2 0920  
                __ptext3 0A5A                  __ptext4 0AA6         ___aldiv@dividend 0001  
  __end_of_printSerialnl 0A98     end_of_initialization 0A98                _RCSTAbits 000FAB  
       ___aldiv@quotient 000B     __size_of_startSerial 0108                _TRISCbits 000F94  
              _TXSTAbits 000FAC              _BAUDCONbits 000FB8         _startSerial$1033 0019  
    start_initialization 0A98      startSerial@baudrate 000F         __CFG_LPT1OSC$OFF 000000  
      startSerial@brg_16 0017          startSerial@FOSC 0011          startSerial@mode 0015  
               ?___aldiv 0001              __smallconst 0800          ___aldiv@divisor 0005  
        ___aldiv@counter 0009                 _PIE1bits 000F9D                 _PIR1bits 000F9E  
       __CFG_WDTPS$32768 000000               _ADCON0bits 000FC2  __size_of_sendDataSerial 000C  
               __Hrparam 0000                 __Lrparam 0000             __Lsmallconst 0800  
 __size_of_printSerialnl 003E         __size_of___aldiv 00CC            ??_startSerial 0019  
          __size_of_main 006E    __CFG_CPUDIV$OSC3_PLL4 000000               _INTCONbits 000FF2  
    __end_of_startSerial 0920            _printSerialnl 0A5A             ___aldiv@sign 000A  
         ?_printSerialnl 0002       __CFG_FOSC$HSPLL_HS 000000           _sendDataSerial 0AA6  
