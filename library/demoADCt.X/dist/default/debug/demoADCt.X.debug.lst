

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Mon Jul 16 20:33:04 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    14                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    15                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    16                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    18  0000                     
    19                           ; Version 1.42
    20                           ; Generated 13/04/2017 GMT
    21                           ; 
    22                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC18F4550 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     _TRISB	set	3987
    54  0000                     _TMR1L	set	4046
    55  0000                     _TMR1H	set	4047
    56  0000                     _T1CON	set	4045
    57  0000                     _CCP1CON	set	4029
    58  0000                     _ADCON2	set	4032
    59  0000                     _ADCON1	set	4033
    60  0000                     _ADCON0	set	4034
    61  0000                     _TRISA	set	3986
    62  0000                     _LATB	set	3978
    63  0000                     _ADCON0bits	set	4034
    64  0000                     _RCREG	set	4014
    65  0000                     _PIR1bits	set	3998
    66  0000                     _TXREG	set	4013
    67  0000                     _SPBRGH	set	4016
    68  0000                     _SPBRG	set	4015
    69  0000                     _BAUDCONbits	set	4024
    70  0000                     _PIE1bits	set	3997
    71  0000                     _TRISCbits	set	3988
    72  0000                     _RCSTAbits	set	4011
    73  0000                     _TXSTAbits	set	4012
    74  0000                     _INTCONbits	set	4082
    75                           
    76                           	psect	smallconst
    77  000800                     __psmallconst:
    78                           	opt stack 0
    79  000800  00                 	db	0
    80  000801                     STR_1:
    81  000801  53                 	db	83	;'S'
    82  000802  74                 	db	116	;'t'
    83  000803  61                 	db	97	;'a'
    84  000804  72                 	db	114	;'r'
    85  000805  74                 	db	116	;'t'
    86  000806  69                 	db	105	;'i'
    87  000807  6E                 	db	110	;'n'
    88  000808  67                 	db	103	;'g'
    89  000809  20                 	db	32
    90  00080A  70                 	db	112	;'p'
    91  00080B  72                 	db	114	;'r'
    92  00080C  6F                 	db	111	;'o'
    93  00080D  63                 	db	99	;'c'
    94  00080E  65                 	db	101	;'e'
    95  00080F  73                 	db	115	;'s'
    96  000810  2E                 	db	46
    97  000811  2E                 	db	46
    98  000812  2E                 	db	46
    99  000813  00                 	db	0
   100                           
   101                           ; #config settings
   102  000814  00                 	db	0	; dummy byte at the end
   103  0000                     
   104                           	psect	cinit
   105  000B12                     __pcinit:
   106                           	opt stack 0
   107  000B12                     start_initialization:
   108                           	opt stack 0
   109  000B12                     __initialization:
   110                           	opt stack 0
   111  000B12                     end_of_initialization:
   112                           	opt stack 0
   113  000B12                     __end_of__initialization:
   114                           	opt stack 0
   115  000B12  902D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   116  000B14  922D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   117  000B16  0E00               	movlw	low (__Lsmallconst shr (0+16))
   118  000B18  6EF8               	movwf	tblptru,c
   119  000B1A  0E08               	movlw	high __Lsmallconst
   120  000B1C  6EF7               	movwf	tblptrh,c
   121  000B1E  0100               	movlb	0
   122  000B20  EF36  F005         	goto	_main	;jump to C main() function
   123                           tblptru	equ	0xFF8
   124                           tblptrh	equ	0xFF7
   125                           
   126                           	psect	cstackCOMRAM
   127  000001                     __pcstackCOMRAM:
   128                           	opt stack 0
   129  000001                     ??_isr:
   130  000001                     
   131                           ; 1 bytes @ 0x0
   132  000001                     	ds	14
   133  00000F                     ?___aldiv:
   134                           	opt stack 0
   135  00000F                     sendDataSerial@c:
   136                           	opt stack 0
   137  00000F                     ___aldiv@dividend:
   138                           	opt stack 0
   139                           
   140                           ; 4 bytes @ 0xE
   141  00000F                     	ds	1
   142  000010                     printSerialnl@String:
   143                           	opt stack 0
   144                           
   145                           ; 2 bytes @ 0xF
   146  000010                     	ds	2
   147  000012                     printSerialnl@p:
   148                           	opt stack 0
   149                           
   150                           ; 2 bytes @ 0x11
   151  000012                     	ds	1
   152  000013                     ___aldiv@divisor:
   153                           	opt stack 0
   154                           
   155                           ; 4 bytes @ 0x12
   156  000013                     	ds	4
   157  000017                     ___aldiv@counter:
   158                           	opt stack 0
   159                           
   160                           ; 1 bytes @ 0x16
   161  000017                     	ds	1
   162  000018                     ___aldiv@sign:
   163                           	opt stack 0
   164                           
   165                           ; 1 bytes @ 0x17
   166  000018                     	ds	1
   167  000019                     ___aldiv@quotient:
   168                           	opt stack 0
   169                           
   170                           ; 4 bytes @ 0x18
   171  000019                     	ds	4
   172  00001D                     startSerial@baudrate:
   173                           	opt stack 0
   174                           
   175                           ; 2 bytes @ 0x1C
   176  00001D                     	ds	2
   177  00001F                     startSerial@FOSC:
   178                           	opt stack 0
   179                           
   180                           ; 4 bytes @ 0x1E
   181  00001F                     	ds	4
   182  000023                     startSerial@mode:
   183                           	opt stack 0
   184                           
   185                           ; 2 bytes @ 0x22
   186  000023                     	ds	2
   187  000025                     startSerial@brg_16:
   188                           	opt stack 0
   189                           
   190                           ; 2 bytes @ 0x24
   191  000025                     	ds	2
   192  000027                     _startSerial$1040:
   193                           	opt stack 0
   194                           
   195                           ; 4 bytes @ 0x26
   196  000027                     	ds	4
   197  00002B                     startSerial@n:
   198                           	opt stack 0
   199                           
   200                           ; 2 bytes @ 0x2A
   201  00002B                     	ds	2
   202  00002D                     tblptru	equ	0xFF8
   203                           tblptrh	equ	0xFF7
   204                           
   205                           ; 1 bytes @ 0x2C
   206 ;;
   207 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   208 ;;
   209 ;; *************** function _main *****************
   210 ;; Defined at:
   211 ;;		line 79 in file "main.c"
   212 ;; Parameters:    Size  Location     Type
   213 ;;		None
   214 ;; Auto vars:     Size  Location     Type
   215 ;;		None
   216 ;; Return value:  Size  Location     Type
   217 ;;                  1    wreg      void 
   218 ;; Registers used:
   219 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   220 ;; Tracked objects:
   221 ;;		On entry : 0/0
   222 ;;		On exit  : 0/0
   223 ;;		Unchanged: 0/0
   224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   225 ;;      Params:         0       0       0       0       0       0       0       0       0
   226 ;;      Locals:         0       0       0       0       0       0       0       0       0
   227 ;;      Temps:          0       0       0       0       0       0       0       0       0
   228 ;;      Totals:         0       0       0       0       0       0       0       0       0
   229 ;;Total ram usage:        0 bytes
   230 ;; Hardware stack levels required when called:    3
   231 ;; This function calls:
   232 ;;		_printSerialnl
   233 ;;		_startSerial
   234 ;; This function is called by:
   235 ;;		Startup code after reset
   236 ;; This function uses a non-reentrant model
   237 ;;
   238                           
   239                           	psect	text0
   240  000A6C                     __ptext0:
   241                           	opt stack 0
   242  000A6C                     _main:
   243                           	opt stack 28
   244                           
   245                           ;main.c: 80: INTCONbits.GIE = 1;
   246                           
   247                           ;incstack = 0
   248  000A6C  8EF2               	bsf	intcon,7,c	;volatile
   249                           
   250                           ;main.c: 81: INTCONbits.PEIE = 1;
   251  000A6E  8CF2               	bsf	intcon,6,c	;volatile
   252                           
   253                           ;main.c: 82: PIE1bits.ADIE = 1;
   254  000A70  8C9D               	bsf	3997,6,c	;volatile
   255                           
   256                           ;main.c: 83: PIR1bits.ADIF = 0;
   257  000A72  9C9E               	bcf	3998,6,c	;volatile
   258                           
   259                           ;main.c: 87: TRISA = 0xFF;
   260  000A74  6892               	setf	3986,c	;volatile
   261                           
   262                           ;main.c: 88: ADCON0 = 0b00000001;
   263  000A76  0E01               	movlw	1
   264  000A78  6EC2               	movwf	4034,c	;volatile
   265                           
   266                           ;main.c: 89: ADCON1 = 0b00000000;
   267  000A7A  0E00               	movlw	0
   268  000A7C  6EC1               	movwf	4033,c	;volatile
   269                           
   270                           ;main.c: 90: ADCON2 = 0b10010010;
   271  000A7E  0E92               	movlw	146
   272  000A80  6EC0               	movwf	4032,c	;volatile
   273                           
   274                           ;main.c: 91: CCP1CON = 0b00001011;
   275  000A82  0E0B               	movlw	11
   276  000A84  6EBD               	movwf	4029,c	;volatile
   277                           
   278                           ;main.c: 92: T1CON = 0b10110001;
   279  000A86  0EB1               	movlw	177
   280  000A88  6ECD               	movwf	4045,c	;volatile
   281                           
   282                           ;main.c: 93: TMR1H = 0x15;
   283  000A8A  0E15               	movlw	21
   284  000A8C  6ECF               	movwf	4047,c	;volatile
   285                           
   286                           ;main.c: 94: TMR1L = 0xA0;
   287  000A8E  0EA0               	movlw	160
   288  000A90  6ECE               	movwf	4046,c	;volatile
   289                           
   290                           ;main.c: 96: TRISB = 0x00;
   291  000A92  0E00               	movlw	0
   292  000A94  6E93               	movwf	3987,c	;volatile
   293                           
   294                           ;main.c: 97: LATB = 0x00;
   295  000A96  0E00               	movlw	0
   296  000A98  6E8A               	movwf	3978,c	;volatile
   297                           
   298                           ;main.c: 100: startSerial(9600, 24000000, 0, 0);
   299  000A9A  0E25               	movlw	37
   300  000A9C  6E1E               	movwf	startSerial@baudrate+1,c
   301  000A9E  0E80               	movlw	128
   302  000AA0  6E1D               	movwf	startSerial@baudrate,c
   303  000AA2  0E00               	movlw	0
   304  000AA4  6E1F               	movwf	startSerial@FOSC,c
   305  000AA6  0E36               	movlw	54
   306  000AA8  6E20               	movwf	startSerial@FOSC+1,c
   307  000AAA  0E6E               	movlw	110
   308  000AAC  6E21               	movwf	startSerial@FOSC+2,c
   309  000AAE  0E01               	movlw	1
   310  000AB0  6E22               	movwf	startSerial@FOSC+3,c
   311  000AB2  0E00               	movlw	0
   312  000AB4  6E24               	movwf	startSerial@mode+1,c
   313  000AB6  0E00               	movlw	0
   314  000AB8  6E23               	movwf	startSerial@mode,c
   315  000ABA  0E00               	movlw	0
   316  000ABC  6E26               	movwf	startSerial@brg_16+1,c
   317  000ABE  0E00               	movlw	0
   318  000AC0  6E25               	movwf	startSerial@brg_16,c
   319  000AC2  EC0B  F004         	call	_startSerial	;wreg free
   320                           
   321                           ;main.c: 101: printSerialnl("Starting proces...");
   322  000AC6  0E01               	movlw	low STR_1
   323  000AC8  6E10               	movwf	printSerialnl@String,c
   324  000ACA  0E08               	movlw	high STR_1
   325  000ACC  6E11               	movwf	printSerialnl@String+1,c
   326  000ACE  EC6A  F005         	call	_printSerialnl	;wreg free
   327  000AD2                     l89:
   328  000AD2  D7FF               	goto	l89
   329  000AD4                     __end_of_main:
   330                           	opt stack 0
   331                           tblptru	equ	0xFF8
   332                           tblptrh	equ	0xFF7
   333                           intcon	equ	0xFF2
   334                           
   335 ;; *************** function _startSerial *****************
   336 ;; Defined at:
   337 ;;		line 8 in file "Serial.h"
   338 ;; Parameters:    Size  Location     Type
   339 ;;  baudrate        2   28[COMRAM] int 
   340 ;;  FOSC            4   30[COMRAM] long 
   341 ;;  mode            2   34[COMRAM] int 
   342 ;;  brg_16          2   36[COMRAM] int 
   343 ;; Auto vars:     Size  Location     Type
   344 ;;  n               2   42[COMRAM] int 
   345 ;; Return value:  Size  Location     Type
   346 ;;                  1    wreg      void 
   347 ;; Registers used:
   348 ;;		wreg, status,2, status,0, cstack
   349 ;; Tracked objects:
   350 ;;		On entry : 0/0
   351 ;;		On exit  : 0/0
   352 ;;		Unchanged: 0/0
   353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   354 ;;      Params:        10       0       0       0       0       0       0       0       0
   355 ;;      Locals:         6       0       0       0       0       0       0       0       0
   356 ;;      Temps:          0       0       0       0       0       0       0       0       0
   357 ;;      Totals:        16       0       0       0       0       0       0       0       0
   358 ;;Total ram usage:       16 bytes
   359 ;; Hardware stack levels used:    1
   360 ;; Hardware stack levels required when called:    2
   361 ;; This function calls:
   362 ;;		___aldiv
   363 ;; This function is called by:
   364 ;;		_main
   365 ;; This function uses a non-reentrant model
   366 ;;
   367                           
   368                           	psect	text1
   369  000816                     __ptext1:
   370                           	opt stack 0
   371  000816                     _startSerial:
   372                           	opt stack 28
   373                           
   374                           ;Serial.h: 9: int n;
   375                           ;Serial.h: 10: if(!mode){
   376                           
   377                           ;incstack = 0
   378  000816  5023               	movf	startSerial@mode,w,c
   379  000818  1024               	iorwf	startSerial@mode+1,w,c
   380  00081A  A4D8               	btfss	status,2,c
   381  00081C  D002               	goto	l47
   382                           
   383                           ;Serial.h: 11: TXSTAbits.SYNC = 0;
   384  00081E  98AC               	bcf	4012,4,c	;volatile
   385                           
   386                           ;Serial.h: 12: }
   387  000820  D001               	goto	l48
   388  000822                     l47:
   389                           
   390                           ;Serial.h: 13: else{
   391                           ;Serial.h: 14: TXSTAbits.SYNC = 1;
   392  000822  88AC               	bsf	4012,4,c	;volatile
   393  000824                     l48:
   394                           
   395                           ;Serial.h: 15: }
   396                           ;Serial.h: 18: RCSTAbits.SPEN = 1;
   397  000824  8EAB               	bsf	4011,7,c	;volatile
   398                           
   399                           ;Serial.h: 19: TRISCbits.RC6 = 0;
   400  000826  9C94               	bcf	3988,6,c	;volatile
   401                           
   402                           ;Serial.h: 20: TRISCbits.RC7 = 1;
   403  000828  8E94               	bsf	3988,7,c	;volatile
   404                           
   405                           ;Serial.h: 22: RCSTAbits.CREN = 1;
   406  00082A  88AB               	bsf	4011,4,c	;volatile
   407                           
   408                           ;Serial.h: 23: TXSTAbits.TXEN = 1;
   409  00082C  8AAC               	bsf	4012,5,c	;volatile
   410                           
   411                           ;Serial.h: 27: PIE1bits.RCIE = 1;
   412  00082E  8A9D               	bsf	3997,5,c	;volatile
   413                           
   414                           ;Serial.h: 28: INTCONbits.GIE = 1;
   415  000830  8EF2               	bsf	intcon,7,c	;volatile
   416                           
   417                           ;Serial.h: 29: INTCONbits.PEIE = 1;
   418  000832  8CF2               	bsf	intcon,6,c	;volatile
   419                           
   420                           ;Serial.h: 30: TXSTAbits.BRGH = 1;
   421  000834  84AC               	bsf	4012,2,c	;volatile
   422                           
   423                           ;Serial.h: 33: if(brg_16){
   424  000836  5025               	movf	startSerial@brg_16,w,c
   425  000838  1026               	iorwf	startSerial@brg_16+1,w,c
   426  00083A  B4D8               	btfsc	status,2,c
   427  00083C  D039               	goto	l49
   428                           
   429                           ;Serial.h: 35: BAUDCONbits.BRG16 = 1;
   430  00083E  86B8               	bsf	4024,3,c	;volatile
   431                           
   432                           ;Serial.h: 36: n = (int)((FOSC / baudrate) / 4) - 1;
   433  000840  C01D  F013         	movff	startSerial@baudrate,___aldiv@divisor
   434  000844  C01E  F014         	movff	startSerial@baudrate+1,___aldiv@divisor+1
   435  000848  0E00               	movlw	0
   436  00084A  BE14               	btfsc	___aldiv@divisor+1,7,c
   437  00084C  0EFF               	movlw	-1
   438  00084E  6E15               	movwf	___aldiv@divisor+2,c
   439  000850  6E16               	movwf	___aldiv@divisor+3,c
   440  000852  C01F  F00F         	movff	startSerial@FOSC,___aldiv@dividend
   441  000856  C020  F010         	movff	startSerial@FOSC+1,___aldiv@dividend+1
   442  00085A  C021  F011         	movff	startSerial@FOSC+2,___aldiv@dividend+2
   443  00085E  C022  F012         	movff	startSerial@FOSC+3,___aldiv@dividend+3
   444  000862  EC8F  F004         	call	___aldiv	;wreg free
   445  000866  C00F  F027         	movff	?___aldiv,_startSerial$1040
   446  00086A  C010  F028         	movff	?___aldiv+1,_startSerial$1040+1
   447  00086E  C011  F029         	movff	?___aldiv+2,_startSerial$1040+2
   448  000872  C012  F02A         	movff	?___aldiv+3,_startSerial$1040+3
   449                           
   450                           ;Serial.h: 36: n = (int)((FOSC / baudrate) / 4) - 1;
   451  000876  C027  F00F         	movff	_startSerial$1040,___aldiv@dividend
   452  00087A  C028  F010         	movff	_startSerial$1040+1,___aldiv@dividend+1
   453  00087E  C029  F011         	movff	_startSerial$1040+2,___aldiv@dividend+2
   454  000882  C02A  F012         	movff	_startSerial$1040+3,___aldiv@dividend+3
   455  000886  0E04               	movlw	4
   456  000888  6E13               	movwf	___aldiv@divisor,c
   457  00088A  0E00               	movlw	0
   458  00088C  6E14               	movwf	___aldiv@divisor+1,c
   459  00088E  0E00               	movlw	0
   460  000890  6E15               	movwf	___aldiv@divisor+2,c
   461  000892  0E00               	movlw	0
   462  000894  6E16               	movwf	___aldiv@divisor+3,c
   463  000896  EC8F  F004         	call	___aldiv	;wreg free
   464  00089A  0EFF               	movlw	255
   465  00089C  240F               	addwf	?___aldiv,w,c
   466  00089E  6E2B               	movwf	startSerial@n,c
   467  0008A0  0EFF               	movlw	255
   468  0008A2  2010               	addwfc	?___aldiv+1,w,c
   469  0008A4  6E2C               	movwf	startSerial@n+1,c
   470                           
   471                           ;Serial.h: 37: SPBRG = (int)(n & 0x00FF);
   472  0008A6  C02B  FFAF         	movff	startSerial@n,4015	;volatile
   473                           
   474                           ;Serial.h: 38: SPBRGH = (int)(n & 0xFF00);
   475  0008AA  0E00               	movlw	0
   476  0008AC  6EB0               	movwf	4016,c	;volatile
   477                           
   478                           ;Serial.h: 39: }
   479  0008AE  0012               	return	
   480  0008B0                     l49:
   481                           
   482                           ;Serial.h: 40: else{
   483                           ;Serial.h: 42: BAUDCONbits.BRG16 = 0;
   484  0008B0  96B8               	bcf	4024,3,c	;volatile
   485                           
   486                           ;Serial.h: 43: n = (int)((FOSC / baudrate) / 16) - 1;
   487  0008B2  C01D  F013         	movff	startSerial@baudrate,___aldiv@divisor
   488  0008B6  C01E  F014         	movff	startSerial@baudrate+1,___aldiv@divisor+1
   489  0008BA  0E00               	movlw	0
   490  0008BC  BE14               	btfsc	___aldiv@divisor+1,7,c
   491  0008BE  0EFF               	movlw	-1
   492  0008C0  6E15               	movwf	___aldiv@divisor+2,c
   493  0008C2  6E16               	movwf	___aldiv@divisor+3,c
   494  0008C4  C01F  F00F         	movff	startSerial@FOSC,___aldiv@dividend
   495  0008C8  C020  F010         	movff	startSerial@FOSC+1,___aldiv@dividend+1
   496  0008CC  C021  F011         	movff	startSerial@FOSC+2,___aldiv@dividend+2
   497  0008D0  C022  F012         	movff	startSerial@FOSC+3,___aldiv@dividend+3
   498  0008D4  EC8F  F004         	call	___aldiv	;wreg free
   499  0008D8  C00F  F027         	movff	?___aldiv,_startSerial$1040
   500  0008DC  C010  F028         	movff	?___aldiv+1,_startSerial$1040+1
   501  0008E0  C011  F029         	movff	?___aldiv+2,_startSerial$1040+2
   502  0008E4  C012  F02A         	movff	?___aldiv+3,_startSerial$1040+3
   503                           
   504                           ;Serial.h: 43: n = (int)((FOSC / baudrate) / 16) - 1;
   505  0008E8  C027  F00F         	movff	_startSerial$1040,___aldiv@dividend
   506  0008EC  C028  F010         	movff	_startSerial$1040+1,___aldiv@dividend+1
   507  0008F0  C029  F011         	movff	_startSerial$1040+2,___aldiv@dividend+2
   508  0008F4  C02A  F012         	movff	_startSerial$1040+3,___aldiv@dividend+3
   509  0008F8  0E10               	movlw	16
   510  0008FA  6E13               	movwf	___aldiv@divisor,c
   511  0008FC  0E00               	movlw	0
   512  0008FE  6E14               	movwf	___aldiv@divisor+1,c
   513  000900  0E00               	movlw	0
   514  000902  6E15               	movwf	___aldiv@divisor+2,c
   515  000904  0E00               	movlw	0
   516  000906  6E16               	movwf	___aldiv@divisor+3,c
   517  000908  EC8F  F004         	call	___aldiv	;wreg free
   518  00090C  0EFF               	movlw	255
   519  00090E  240F               	addwf	?___aldiv,w,c
   520  000910  6E2B               	movwf	startSerial@n,c
   521  000912  0EFF               	movlw	255
   522  000914  2010               	addwfc	?___aldiv+1,w,c
   523  000916  6E2C               	movwf	startSerial@n+1,c
   524                           
   525                           ;Serial.h: 44: SPBRG = (int)(n & 0x00FF);
   526  000918  C02B  FFAF         	movff	startSerial@n,4015	;volatile
   527  00091C  0012               	return	
   528  00091E                     __end_of_startSerial:
   529                           	opt stack 0
   530                           tblptru	equ	0xFF8
   531                           tblptrh	equ	0xFF7
   532                           intcon	equ	0xFF2
   533                           status	equ	0xFD8
   534                           
   535 ;; *************** function ___aldiv *****************
   536 ;; Defined at:
   537 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\aldiv.c"
   538 ;; Parameters:    Size  Location     Type
   539 ;;  dividend        4   14[COMRAM] long 
   540 ;;  divisor         4   18[COMRAM] long 
   541 ;; Auto vars:     Size  Location     Type
   542 ;;  quotient        4   24[COMRAM] long 
   543 ;;  sign            1   23[COMRAM] unsigned char 
   544 ;;  counter         1   22[COMRAM] unsigned char 
   545 ;; Return value:  Size  Location     Type
   546 ;;                  4   14[COMRAM] long 
   547 ;; Registers used:
   548 ;;		wreg, status,2, status,0
   549 ;; Tracked objects:
   550 ;;		On entry : 0/0
   551 ;;		On exit  : 0/0
   552 ;;		Unchanged: 0/0
   553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   554 ;;      Params:         8       0       0       0       0       0       0       0       0
   555 ;;      Locals:         6       0       0       0       0       0       0       0       0
   556 ;;      Temps:          0       0       0       0       0       0       0       0       0
   557 ;;      Totals:        14       0       0       0       0       0       0       0       0
   558 ;;Total ram usage:       14 bytes
   559 ;; Hardware stack levels used:    1
   560 ;; Hardware stack levels required when called:    1
   561 ;; This function calls:
   562 ;;		Nothing
   563 ;; This function is called by:
   564 ;;		_startSerial
   565 ;; This function uses a non-reentrant model
   566 ;;
   567                           
   568                           	psect	text2
   569  00091E                     __ptext2:
   570                           	opt stack 0
   571  00091E                     ___aldiv:
   572                           	opt stack 28
   573                           
   574                           ;incstack = 0
   575  00091E  0E00               	movlw	0
   576  000920  6E18               	movwf	___aldiv@sign,c
   577  000922  AE16               	btfss	___aldiv@divisor+3,7,c
   578  000924  D00A               	goto	l830
   579  000926  1E16               	comf	___aldiv@divisor+3,f,c
   580  000928  1E15               	comf	___aldiv@divisor+2,f,c
   581  00092A  1E14               	comf	___aldiv@divisor+1,f,c
   582  00092C  6C13               	negf	___aldiv@divisor,c
   583  00092E  0E00               	movlw	0
   584  000930  2214               	addwfc	___aldiv@divisor+1,f,c
   585  000932  2215               	addwfc	___aldiv@divisor+2,f,c
   586  000934  2216               	addwfc	___aldiv@divisor+3,f,c
   587  000936  0E01               	movlw	1
   588  000938  6E18               	movwf	___aldiv@sign,c
   589  00093A                     l830:
   590  00093A  AE12               	btfss	___aldiv@dividend+3,7,c
   591  00093C  D00A               	goto	l836
   592  00093E  1E12               	comf	___aldiv@dividend+3,f,c
   593  000940  1E11               	comf	___aldiv@dividend+2,f,c
   594  000942  1E10               	comf	___aldiv@dividend+1,f,c
   595  000944  6C0F               	negf	___aldiv@dividend,c
   596  000946  0E00               	movlw	0
   597  000948  2210               	addwfc	___aldiv@dividend+1,f,c
   598  00094A  2211               	addwfc	___aldiv@dividend+2,f,c
   599  00094C  2212               	addwfc	___aldiv@dividend+3,f,c
   600  00094E  0E01               	movlw	1
   601  000950  1A18               	xorwf	___aldiv@sign,f,c
   602  000952                     l836:
   603  000952  0E00               	movlw	0
   604  000954  6E19               	movwf	___aldiv@quotient,c
   605  000956  0E00               	movlw	0
   606  000958  6E1A               	movwf	___aldiv@quotient+1,c
   607  00095A  0E00               	movlw	0
   608  00095C  6E1B               	movwf	___aldiv@quotient+2,c
   609  00095E  0E00               	movlw	0
   610  000960  6E1C               	movwf	___aldiv@quotient+3,c
   611  000962  5013               	movf	___aldiv@divisor,w,c
   612  000964  1014               	iorwf	___aldiv@divisor+1,w,c
   613  000966  1015               	iorwf	___aldiv@divisor+2,w,c
   614  000968  1016               	iorwf	___aldiv@divisor+3,w,c
   615  00096A  B4D8               	btfsc	status,2,c
   616  00096C  D02A               	goto	l858
   617  00096E  0E01               	movlw	1
   618  000970  6E17               	movwf	___aldiv@counter,c
   619  000972  D006               	goto	l844
   620  000974                     l842:
   621  000974  90D8               	bcf	status,0,c
   622  000976  3613               	rlcf	___aldiv@divisor,f,c
   623  000978  3614               	rlcf	___aldiv@divisor+1,f,c
   624  00097A  3615               	rlcf	___aldiv@divisor+2,f,c
   625  00097C  3616               	rlcf	___aldiv@divisor+3,f,c
   626  00097E  2A17               	incf	___aldiv@counter,f,c
   627  000980                     l844:
   628  000980  AE16               	btfss	___aldiv@divisor+3,7,c
   629  000982  D7F8               	goto	l842
   630  000984                     l846:
   631  000984  90D8               	bcf	status,0,c
   632  000986  3619               	rlcf	___aldiv@quotient,f,c
   633  000988  361A               	rlcf	___aldiv@quotient+1,f,c
   634  00098A  361B               	rlcf	___aldiv@quotient+2,f,c
   635  00098C  361C               	rlcf	___aldiv@quotient+3,f,c
   636  00098E  5013               	movf	___aldiv@divisor,w,c
   637  000990  5C0F               	subwf	___aldiv@dividend,w,c
   638  000992  5014               	movf	___aldiv@divisor+1,w,c
   639  000994  5810               	subwfb	___aldiv@dividend+1,w,c
   640  000996  5015               	movf	___aldiv@divisor+2,w,c
   641  000998  5811               	subwfb	___aldiv@dividend+2,w,c
   642  00099A  5016               	movf	___aldiv@divisor+3,w,c
   643  00099C  5812               	subwfb	___aldiv@dividend+3,w,c
   644  00099E  A0D8               	btfss	status,0,c
   645  0009A0  D009               	goto	l854
   646  0009A2  5013               	movf	___aldiv@divisor,w,c
   647  0009A4  5E0F               	subwf	___aldiv@dividend,f,c
   648  0009A6  5014               	movf	___aldiv@divisor+1,w,c
   649  0009A8  5A10               	subwfb	___aldiv@dividend+1,f,c
   650  0009AA  5015               	movf	___aldiv@divisor+2,w,c
   651  0009AC  5A11               	subwfb	___aldiv@dividend+2,f,c
   652  0009AE  5016               	movf	___aldiv@divisor+3,w,c
   653  0009B0  5A12               	subwfb	___aldiv@dividend+3,f,c
   654  0009B2  8019               	bsf	___aldiv@quotient,0,c
   655  0009B4                     l854:
   656  0009B4  90D8               	bcf	status,0,c
   657  0009B6  3216               	rrcf	___aldiv@divisor+3,f,c
   658  0009B8  3215               	rrcf	___aldiv@divisor+2,f,c
   659  0009BA  3214               	rrcf	___aldiv@divisor+1,f,c
   660  0009BC  3213               	rrcf	___aldiv@divisor,f,c
   661  0009BE  2E17               	decfsz	___aldiv@counter,f,c
   662  0009C0  D7E1               	goto	l846
   663  0009C2                     l858:
   664  0009C2  5018               	movf	___aldiv@sign,w,c
   665  0009C4  B4D8               	btfsc	status,2,c
   666  0009C6  D008               	goto	l862
   667  0009C8  1E1C               	comf	___aldiv@quotient+3,f,c
   668  0009CA  1E1B               	comf	___aldiv@quotient+2,f,c
   669  0009CC  1E1A               	comf	___aldiv@quotient+1,f,c
   670  0009CE  6C19               	negf	___aldiv@quotient,c
   671  0009D0  0E00               	movlw	0
   672  0009D2  221A               	addwfc	___aldiv@quotient+1,f,c
   673  0009D4  221B               	addwfc	___aldiv@quotient+2,f,c
   674  0009D6  221C               	addwfc	___aldiv@quotient+3,f,c
   675  0009D8                     l862:
   676  0009D8  C019  F00F         	movff	___aldiv@quotient,?___aldiv
   677  0009DC  C01A  F010         	movff	___aldiv@quotient+1,?___aldiv+1
   678  0009E0  C01B  F011         	movff	___aldiv@quotient+2,?___aldiv+2
   679  0009E4  C01C  F012         	movff	___aldiv@quotient+3,?___aldiv+3
   680  0009E8  0012               	return	
   681  0009EA                     __end_of___aldiv:
   682                           	opt stack 0
   683                           tblptru	equ	0xFF8
   684                           tblptrh	equ	0xFF7
   685                           intcon	equ	0xFF2
   686                           status	equ	0xFD8
   687                           
   688 ;; *************** function _printSerialnl *****************
   689 ;; Defined at:
   690 ;;		line 67 in file "Serial.h"
   691 ;; Parameters:    Size  Location     Type
   692 ;;  String          2   15[COMRAM] PTR unsigned char 
   693 ;;		 -> STR_1(19), 
   694 ;; Auto vars:     Size  Location     Type
   695 ;;  p               2   17[COMRAM] PTR unsigned char 
   696 ;;		 -> STR_1(19), 
   697 ;; Return value:  Size  Location     Type
   698 ;;                  1    wreg      void 
   699 ;; Registers used:
   700 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   701 ;; Tracked objects:
   702 ;;		On entry : 0/0
   703 ;;		On exit  : 0/0
   704 ;;		Unchanged: 0/0
   705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   706 ;;      Params:         2       0       0       0       0       0       0       0       0
   707 ;;      Locals:         2       0       0       0       0       0       0       0       0
   708 ;;      Temps:          0       0       0       0       0       0       0       0       0
   709 ;;      Totals:         4       0       0       0       0       0       0       0       0
   710 ;;Total ram usage:        4 bytes
   711 ;; Hardware stack levels used:    1
   712 ;; Hardware stack levels required when called:    2
   713 ;; This function calls:
   714 ;;		_sendDataSerial
   715 ;; This function is called by:
   716 ;;		_main
   717 ;; This function uses a non-reentrant model
   718 ;;
   719                           
   720                           	psect	text3
   721  000AD4                     __ptext3:
   722                           	opt stack 0
   723  000AD4                     _printSerialnl:
   724                           	opt stack 28
   725                           
   726                           ;Serial.h: 69: char *p;
   727                           ;Serial.h: 70: p = String;
   728                           
   729                           ;incstack = 0
   730  000AD4  C010  F012         	movff	printSerialnl@String,printSerialnl@p
   731  000AD8  C011  F013         	movff	printSerialnl@String+1,printSerialnl@p+1
   732                           
   733                           ;Serial.h: 71: while(*p != '\0'){
   734  000ADC  D00A               	goto	l890
   735  000ADE                     l886:
   736                           
   737                           ;Serial.h: 72: sendDataSerial(*p);
   738  000ADE  C012  FFF6         	movff	printSerialnl@p,tblptrl
   739  000AE2  C013  FFF7         	movff	printSerialnl@p+1,tblptrh
   740  000AE6                     	if	0	;tblptru may be non-zero
   741  000AE6                     	endif
   742  000AE6                     	if	0	;tblptru may be non-zero
   743  000AE6                     	endif
   744  000AE6  0008               	tblrd		*
   745  000AE8  50F5               	movf	tablat,w,c
   746  000AEA  EC92  F005         	call	_sendDataSerial
   747                           
   748                           ;Serial.h: 73: p++;
   749  000AEE  4A12               	infsnz	printSerialnl@p,f,c
   750  000AF0  2A13               	incf	printSerialnl@p+1,f,c
   751  000AF2                     l890:
   752  000AF2  C012  FFF6         	movff	printSerialnl@p,tblptrl
   753  000AF6  C013  FFF7         	movff	printSerialnl@p+1,tblptrh
   754  000AFA                     	if	0	;tblptru may be non-zero
   755  000AFA                     	endif
   756  000AFA                     	if	0	;tblptru may be non-zero
   757  000AFA                     	endif
   758  000AFA  0008               	tblrd		*
   759  000AFC  50F5               	movf	tablat,w,c
   760  000AFE  0900               	iorlw	0
   761  000B00  A4D8               	btfss	status,2,c
   762  000B02  D7ED               	goto	l886
   763                           
   764                           ;Serial.h: 74: }
   765                           ;Serial.h: 75: sendDataSerial('\n');
   766  000B04  0E0A               	movlw	10
   767  000B06  EC92  F005         	call	_sendDataSerial
   768                           
   769                           ;Serial.h: 76: sendDataSerial('\r');
   770  000B0A  0E0D               	movlw	13
   771  000B0C  EC92  F005         	call	_sendDataSerial
   772  000B10  0012               	return		;funcret
   773  000B12                     __end_of_printSerialnl:
   774                           	opt stack 0
   775                           tblptru	equ	0xFF8
   776                           tblptrh	equ	0xFF7
   777                           tblptrl	equ	0xFF6
   778                           tablat	equ	0xFF5
   779                           intcon	equ	0xFF2
   780                           status	equ	0xFD8
   781                           
   782 ;; *************** function _sendDataSerial *****************
   783 ;; Defined at:
   784 ;;		line 51 in file "Serial.h"
   785 ;; Parameters:    Size  Location     Type
   786 ;;  c               1    wreg     unsigned char 
   787 ;; Auto vars:     Size  Location     Type
   788 ;;  c               1   14[COMRAM] unsigned char 
   789 ;; Return value:  Size  Location     Type
   790 ;;                  1    wreg      void 
   791 ;; Registers used:
   792 ;;		wreg
   793 ;; Tracked objects:
   794 ;;		On entry : 0/0
   795 ;;		On exit  : 0/0
   796 ;;		Unchanged: 0/0
   797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   798 ;;      Params:         0       0       0       0       0       0       0       0       0
   799 ;;      Locals:         1       0       0       0       0       0       0       0       0
   800 ;;      Temps:          0       0       0       0       0       0       0       0       0
   801 ;;      Totals:         1       0       0       0       0       0       0       0       0
   802 ;;Total ram usage:        1 bytes
   803 ;; Hardware stack levels used:    1
   804 ;; Hardware stack levels required when called:    1
   805 ;; This function calls:
   806 ;;		Nothing
   807 ;; This function is called by:
   808 ;;		_printSerialnl
   809 ;;		_printSerial
   810 ;; This function uses a non-reentrant model
   811 ;;
   812                           
   813                           	psect	text4
   814  000B24                     __ptext4:
   815                           	opt stack 0
   816  000B24                     _sendDataSerial:
   817                           	opt stack 28
   818                           
   819                           ;incstack = 0
   820                           ;sendDataSerial@c stored from wreg
   821  000B24  6E0F               	movwf	sendDataSerial@c,c
   822                           
   823                           ;Serial.h: 53: TXREG = c;
   824  000B26  C00F  FFAD         	movff	sendDataSerial@c,4013	;volatile
   825  000B2A                     l54:
   826  000B2A  B2AC               	btfsc	4012,1,c	;volatile
   827  000B2C  0012               	return	
   828  000B2E  D7FD               	goto	l54
   829  000B30                     __end_of_sendDataSerial:
   830                           	opt stack 0
   831                           tblptru	equ	0xFF8
   832                           tblptrh	equ	0xFF7
   833                           tblptrl	equ	0xFF6
   834                           tablat	equ	0xFF5
   835                           intcon	equ	0xFF2
   836                           status	equ	0xFD8
   837                           
   838 ;; *************** function _isr *****************
   839 ;; Defined at:
   840 ;;		line 70 in file "main.c"
   841 ;; Parameters:    Size  Location     Type
   842 ;;		None
   843 ;; Auto vars:     Size  Location     Type
   844 ;;		None
   845 ;; Return value:  Size  Location     Type
   846 ;;                  1    wreg      void 
   847 ;; Registers used:
   848 ;;		wreg, status,2
   849 ;; Tracked objects:
   850 ;;		On entry : 0/0
   851 ;;		On exit  : 0/0
   852 ;;		Unchanged: 0/0
   853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   854 ;;      Params:         0       0       0       0       0       0       0       0       0
   855 ;;      Locals:         0       0       0       0       0       0       0       0       0
   856 ;;      Temps:         14       0       0       0       0       0       0       0       0
   857 ;;      Totals:        14       0       0       0       0       0       0       0       0
   858 ;;Total ram usage:       14 bytes
   859 ;; Hardware stack levels used:    1
   860 ;; This function calls:
   861 ;;		Nothing
   862 ;; This function is called by:
   863 ;;		Interrupt level 2
   864 ;; This function uses a non-reentrant model
   865 ;;
   866                           
   867                           	psect	intcode
   868  000008                     __pintcode:
   869                           	opt stack 0
   870  000008                     _isr:
   871                           	opt stack 28
   872                           
   873                           ;incstack = 0
   874  000008  822D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
   875  00000A  EDF5  F004         	call	int_func,f	;refresh shadow registers
   876                           tblptru	equ	0xFF8
   877                           tblptrh	equ	0xFF7
   878                           tblptrl	equ	0xFF6
   879                           tablat	equ	0xFF5
   880                           intcon	equ	0xFF2
   881                           status	equ	0xFD8
   882                           
   883                           	psect	intcode_body
   884  0009EA                     __pintcode_body:
   885                           	opt stack 28
   886  0009EA                     int_func:
   887                           	opt stack 28
   888  0009EA  0006               	pop		; remove dummy address from shadow register refresh
   889  0009EC  CFFA F001          	movff	pclath,??_isr
   890  0009F0  CFFB F002          	movff	pclatu,??_isr+1
   891  0009F4  CFE9 F003          	movff	fsr0l,??_isr+2
   892  0009F8  CFEA F004          	movff	fsr0h,??_isr+3
   893  0009FC  CFE1 F005          	movff	fsr1l,??_isr+4
   894  000A00  CFE2 F006          	movff	fsr1h,??_isr+5
   895  000A04  CFD9 F007          	movff	fsr2l,??_isr+6
   896  000A08  CFDA F008          	movff	fsr2h,??_isr+7
   897  000A0C  CFF3 F009          	movff	prodl,??_isr+8
   898  000A10  CFF4 F00A          	movff	prodh,??_isr+9
   899  000A14  CFF6 F00B          	movff	tblptrl,??_isr+10
   900  000A18  CFF7 F00C          	movff	tblptrh,??_isr+11
   901  000A1C  CFF8 F00D          	movff	tblptru,??_isr+12
   902  000A20  CFF5 F00E          	movff	tablat,??_isr+13
   903                           
   904                           ;main.c: 71: if(ADCON0bits.GO){
   905  000A24  A2C2               	btfss	4034,1,c	;volatile
   906  000A26  D004               	goto	i2l84
   907                           
   908                           ;main.c: 72: LATB = 1;
   909  000A28  0E01               	movlw	1
   910  000A2A  6E8A               	movwf	3978,c	;volatile
   911                           
   912                           ;main.c: 73: PIR1bits.ADIF = 0;
   913  000A2C  9C9E               	bcf	3998,6,c	;volatile
   914                           
   915                           ;main.c: 74: ADCON0bits.GO = 0;
   916  000A2E  92C2               	bcf	4034,1,c	;volatile
   917  000A30                     i2l84:
   918  000A30  C00E  FFF5         	movff	??_isr+13,tablat
   919  000A34  C00D  FFF8         	movff	??_isr+12,tblptru
   920  000A38  C00C  FFF7         	movff	??_isr+11,tblptrh
   921  000A3C  C00B  FFF6         	movff	??_isr+10,tblptrl
   922  000A40  C00A  FFF4         	movff	??_isr+9,prodh
   923  000A44  C009  FFF3         	movff	??_isr+8,prodl
   924  000A48  C008  FFDA         	movff	??_isr+7,fsr2h
   925  000A4C  C007  FFD9         	movff	??_isr+6,fsr2l
   926  000A50  C006  FFE2         	movff	??_isr+5,fsr1h
   927  000A54  C005  FFE1         	movff	??_isr+4,fsr1l
   928  000A58  C004  FFEA         	movff	??_isr+3,fsr0h
   929  000A5C  C003  FFE9         	movff	??_isr+2,fsr0l
   930  000A60  C002  FFFB         	movff	??_isr+1,pclatu
   931  000A64  C001  FFFA         	movff	??_isr,pclath
   932  000A68  922D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
   933  000A6A  0011               	retfie		f
   934  000A6C                     __end_of_isr:
   935                           	opt stack 0
   936                           pclatu	equ	0xFFB
   937                           pclath	equ	0xFFA
   938                           tblptru	equ	0xFF8
   939                           tblptrh	equ	0xFF7
   940                           tblptrl	equ	0xFF6
   941                           tablat	equ	0xFF5
   942                           prodh	equ	0xFF4
   943                           prodl	equ	0xFF3
   944                           intcon	equ	0xFF2
   945                           fsr0h	equ	0xFEA
   946                           fsr0l	equ	0xFE9
   947                           fsr1h	equ	0xFE2
   948                           fsr1l	equ	0xFE1
   949                           fsr2h	equ	0xFDA
   950                           fsr2l	equ	0xFD9
   951                           status	equ	0xFD8
   952                           pclatu	equ	0xFFB
   953                           pclath	equ	0xFFA
   954                           tblptru	equ	0xFF8
   955                           tblptrh	equ	0xFF7
   956                           tblptrl	equ	0xFF6
   957                           tablat	equ	0xFF5
   958                           prodh	equ	0xFF4
   959                           prodl	equ	0xFF3
   960                           intcon	equ	0xFF2
   961                           fsr0h	equ	0xFEA
   962                           fsr0l	equ	0xFE9
   963                           fsr1h	equ	0xFE2
   964                           fsr1l	equ	0xFE1
   965                           fsr2h	equ	0xFDA
   966                           fsr2l	equ	0xFD9
   967                           status	equ	0xFD8
   968                           
   969                           	psect	rparam
   970  0000                     pclatu	equ	0xFFB
   971                           pclath	equ	0xFFA
   972                           tblptru	equ	0xFF8
   973                           tblptrh	equ	0xFF7
   974                           tblptrl	equ	0xFF6
   975                           tablat	equ	0xFF5
   976                           prodh	equ	0xFF4
   977                           prodl	equ	0xFF3
   978                           intcon	equ	0xFF2
   979                           fsr0h	equ	0xFEA
   980                           fsr0l	equ	0xFE9
   981                           fsr1h	equ	0xFE2
   982                           fsr1l	equ	0xFE1
   983                           fsr2h	equ	0xFDA
   984                           fsr2l	equ	0xFD9
   985                           status	equ	0xFD8
   986                           
   987                           	psect	temp
   988  00002D                     btemp:
   989                           	opt stack 0
   990  00002D                     	ds	1
   991  0000                     int$flags	set	btemp
   992                           pclatu	equ	0xFFB
   993                           pclath	equ	0xFFA
   994                           tblptru	equ	0xFF8
   995                           tblptrh	equ	0xFF7
   996                           tblptrl	equ	0xFF6
   997                           tablat	equ	0xFF5
   998                           prodh	equ	0xFF4
   999                           prodl	equ	0xFF3
  1000                           intcon	equ	0xFF2
  1001                           fsr0h	equ	0xFEA
  1002                           fsr0l	equ	0xFE9
  1003                           fsr1h	equ	0xFE2
  1004                           fsr1l	equ	0xFE1
  1005                           fsr2h	equ	0xFDA
  1006                           fsr2l	equ	0xFD9
  1007                           status	equ	0xFD8


Data Sizes:
    Strings     19
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     44      44
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           244      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    printSerialnl@String	PTR unsigned char  size(2) Largest target is 19
		 -> STR_1(CODE[19]), 

    printSerialnl@p	PTR unsigned char  size(2) Largest target is 19
		 -> STR_1(CODE[19]), 


Critical Paths under _main in COMRAM

    _main->_startSerial
    _startSerial->___aldiv
    _printSerialnl->_sendDataSerial

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1641
                      _printSerialnl
                        _startSerial
 ---------------------------------------------------------------------------------
 (1) _startSerial                                         20    10     10    1482
                                             28 COMRAM    16     6     10
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     908
                                             14 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _printSerialnl                                        4     2      2     159
                                             15 COMRAM     4     2      2
                     _sendDataSerial
 ---------------------------------------------------------------------------------
 (2) _sendDataSerial                                       1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                 14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _printSerialnl
     _sendDataSerial
   _startSerial
     ___aldiv

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5E     2C      2C       1       46.8%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
DATA                 0      0       0       4        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0       0       6        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK3            F4      0       0      11        0.0%
BANK3               F4      0       0      12        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BIGRAM_1           400      0       0      21        0.0%
BIGRAM             3F3      0       0      22        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Mon Jul 16 20:33:04 2018

                     l54 0B2A                       l47 0822                       l48 0824  
                     l49 08B0                       l89 0AD2              __CFG_BOR$ON 000000  
            __CFG_BORV$3 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000              _startSerial 0816             __CFG_CP3$OFF 000000  
            __CFG_LVP$ON 000000                      l830 093A                      l842 0974  
                    l844 0980                      l836 0952                      l862 09D8  
                    l854 09B4                      l846 0984                      l890 0AF2  
                    l858 09C2                      l886 0ADE             __CFG_CPB$OFF 000000  
           __CFG_CPD$OFF 000000                      _isr 0008             __CFG_WDT$OFF 000000  
                   ?_isr 0001                     STR_1 0801                     _LATB 000F8A  
                   i2l84 0A30          sendDataSerial@c 000F   __end_of_sendDataSerial 0B30  
                   _main 0A6C                     fsr0h 000FEA                     fsr1h 000FE2  
                   fsr2h 000FDA                     fsr0l 000FE9                     fsr1l 000FE1  
                   fsr2l 000FD9                     btemp 002D                     prodh 000FF4  
                   prodl 000FF3                     start 000E            __CFG_IESO$OFF 000000  
          __CFG_MCLRE$ON 000000             ___param_bank 000000      printSerialnl@String 0010  
                  ??_isr 0001            __CFG_PLLDIV$5 000000           __CFG_CCP2MX$ON 000000  
        __end_of___aldiv 09EA                    ?_main 0001                    _T1CON 000FCD  
                  _RCREG 000FAE                    _TMR1H 000FCF                    _TMR1L 000FCE  
                  _SPBRG 000FAF            __CFG_USBDIV$1 000000                    _TRISA 000F92  
                  _TRISB 000F93          ??_printSerialnl 0012                    _TXREG 000FAD  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000                    pclath 000FFA  
                  tablat 000FF5          ?_sendDataSerial 0001                    status 000FD8  
         __CFG_ICPRT$OFF 000000           __CFG_PBADEN$ON 000000          __initialization 0B12  
           __end_of_main 0AD4                   ??_main 002D            __activetblptr 000001  
         printSerialnl@p 0012                   _ADCON0 000FC2                   _ADCON1 000FC1  
                 _ADCON2 000FC0                   _SPBRGH 000FB0           __CFG_XINST$OFF 000000  
              ??___aldiv 0017           __CFG_STVREN$ON 000000             startSerial@n 002B  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8               __accesstop 0060  __end_of__initialization 0B12  
          ___rparam_used 000001           __pcstackCOMRAM 0001             ?_startSerial 001D  
                _CCP1CON 000FBD         ??_sendDataSerial 000F          __CFG_VREGEN$OFF 000000  
                __Hparam 0000                  __Lparam 0000                  ___aldiv 091E  
           __psmallconst 0800                  __pcinit 0B12                  __ramtop 0800  
                __ptext0 0A6C                  __ptext1 0816                  __ptext2 091E  
                __ptext3 0AD4                  __ptext4 0B24             __size_of_isr 0A64  
       ___aldiv@dividend 000F    __end_of_printSerialnl 0B12           __pintcode_body 09EA  
   end_of_initialization 0B12                  int_func 09EA                _RCSTAbits 000FAB  
       ___aldiv@quotient 0019     __size_of_startSerial 0108                _TRISCbits 000F94  
              _TXSTAbits 000FAC              _BAUDCONbits 000FB8         _startSerial$1040 0027  
    start_initialization 0B12              __end_of_isr 0A6C      startSerial@baudrate 001D  
       __CFG_LPT1OSC$OFF 000000        startSerial@brg_16 0025          startSerial@FOSC 001F  
        startSerial@mode 0023                __pintcode 0008                 ?___aldiv 000F  
            __smallconst 0800          ___aldiv@divisor 0013          ___aldiv@counter 0017  
               _PIE1bits 000F9D                 _PIR1bits 000F9E         __CFG_WDTPS$32768 000000  
             _ADCON0bits 000FC2  __size_of_sendDataSerial 000C                 __Hrparam 0000  
               __Lrparam 0000             __Lsmallconst 0800   __size_of_printSerialnl 003E  
       __size_of___aldiv 00CC            ??_startSerial 0027            __size_of_main 0068  
               int$flags 002D    __CFG_CPUDIV$OSC3_PLL4 000000               _INTCONbits 000FF2  
    __end_of_startSerial 091E            _printSerialnl 0AD4                 intlevel2 0000  
           ___aldiv@sign 0018           ?_printSerialnl 0010       __CFG_FOSC$HSPLL_HS 000000  
         _sendDataSerial 0B24  
